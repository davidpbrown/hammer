//! Safe GUI content
//!
//!		Uses ammonia::clean_text to clean user input 
//!		but otherwise results should be no different to the actions of user directly on CLI
//!
use std::time::SystemTime;
use std::process::{Command, Stdio};
use std::process;
use std::fs::File;
use std::fs::write;
use std::io::Write;

use ammonia::clean_text;

use grep_regex::RegexMatcher;
use grep_searcher::Searcher;
use grep_printer::Standard;
use sedregex::{find_and_replace};

use fltk::{
    app,
	button::{Button, CheckButton},
    enums::{Align, Color, Event},
    group::{Group, Tabs},
    prelude::*,
    frame::Frame,
    image::PngImage,
    *};

use check_dir_exists::check_dir_exists;
use iso8601::iso8601;
use img_safe_logo::img_safe_logo;
use img_venn_psf::img_venn_psf;
use img_dragon::img_dragon;
use user_settings::get_filescontainer;

pub fn draw_gallery_af() { //! Safe GUI content - lang = af
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Tuis\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nie gevind nie)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nie gevind nie)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nie gevind nie)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Weergawe: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(Nie gekonnekteer nie)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(Nie gekonnekteer nie)" { network_label = format!("toetsnetwerk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("toetsnetwerk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sekuriteit\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Netwerk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("toetsnetwerk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Gebruikers sekuriteit") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Teken aan]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Privaat sleutel aanmelding - afgeskakel\ntest net het u standaard aangemeld!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Teken uit]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Teken uit - gedeaktiveer vir testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Vertroude toestel = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Vertroude toestel = [Nee (maar ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Eienaarskap") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Muntstukke]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/info_balance", &timestamp); let result_location = format!("safe balans\ngevolg -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Sleutels]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\ngevolg -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domeine") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[kry joune]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nuwe domeinnaam - safe nrs skep","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\ngevolg -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Konteks") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[lêers houer]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Lêershouer = {}\n verander na:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Aflaaie/"); let filename = format!("./Aflaaie/userinput_filescontainer"); let result_location = format!("Lêershouer opgemerk in: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Vryheid\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Openbare Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Laai op na die veilige netwerk") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nie geverifieer nie") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[laai een lêer op]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Veilige netwerk: Openbare Data - lêer oplaai"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files put\ngevolg -> {}\nLaai leêr op =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Laai lêers op]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Veilige netwerk: Openbare Data - lêers oplaai"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files put\ngevolg -> {}\nLaai op {} lêers =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files put\ngevolg -> {}\nLaai leêr op =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[laai gids op]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Veilige netwerk: Openbare Data - gidsoplaai"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\ngevolg -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 gids : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Laai op na ʼn plek wat u besit") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[laai een lêer op]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Veilige netwerk: Openbare Data - lêer oplaai na Lêershouer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files sync\ngevolg -> {}\nLaai leêr op aan {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 lêer : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Laai lêers op]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Veilige netwerk: Openbare Data - lêers oplaai na Lêershouer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files sync\ngevolg -> {}\nLaai op {} lêers aan {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} van {} lêers : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files put\ngevolg -> {}\nLaai leêr op aan {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 lêer : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[laai gids op]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Veilige netwerk: Openbare Data - gids oplaai na Lêershouer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\ngevolg -> {}\n❰Upload directory❱ aan {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 gids : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Laai af van die veilige netwerk") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// lêer]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/file", &timestamp); let result_location = format!("safe files sync\ngevolg -> {}\nkry lêer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 lêer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// gids]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\ngevolg -> {}\nkry gids", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 gids : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// lêer]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/file", &timestamp); let result_location = format!("safe files sync\ngevolg -> {}\nkry lêer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 lêer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// gids]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\ngevolg -> {}\nkry gids", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 gids : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privaatheid\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privaat Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Verken"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Aflaai]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/file", &timestamp); let result_location = format!("safe cat\ngevolg -> {}\nkry lêer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 lêer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => inligting]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/info_metadata", &timestamp); let result_location = format!("safe dog\ngevolg -> {}\nkry inligting", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lys]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/info_ls", &timestamp); let result_location = format!("safe files ls\ngevolg -> {}\nkry lys", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => boom]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/info_tree", &timestamp); let result_location = format!("safe files tree\ngevolg -> {}\nkry boom", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Gereedskap"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[werk domein op]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\ngevolg -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nuwe sleutels]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Aflaaie/{}/", &timestamp); let filename = format!("./Aflaaie/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\ngevolg -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Opdateer]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[skakelaar]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Skakel netwerk en herbegin handmatig\nverander na::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Verlaat"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Help ander om te ontdek die veilige netwerk") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Saam vorder ons\nPrivaatheid - Sekuriteit - Vryheid") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Hou op #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Hou op #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_am() { //! Safe GUI content - lang = am
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "ቤት\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] አልተገኘም)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] አልተገኘም)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] አልተገኘም)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("ስሪት: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(አልተገናኘም)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(አልተገናኘም)" { network_label = format!("የሙከራ አውታረ መረብ: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("የሙከራ አውታረ መረብ: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "ደህንነት\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("አውታረ መረብ") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("የሙከራ አውታረ መረብ") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("የተጠቃሚ ደህንነት") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[ግባ]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"የግል ቁልፍ መግቢያ - አካል ጉዳተኛ\ntest net هل قمت بتسجيل الدخول بشكل افتراضي!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[ውጣ]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ውጣ - ለሙከራ አውታረ መረብ ተሰናክሏል");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("የታመነ መሣሪያ = [አዎ]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("የታመነ መሣሪያ = [አይደለም (ግን አዎ!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ባለቤትነት") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[ሳንቲሞች]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/info_balance", &timestamp); let result_location = format!("safe ሚዛን\nውጤት -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[ቁልፎች]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nውጤት -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ጎራዎች") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ያንተን አግኝ]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"اسم المجال الجديد - safe nrs ፍጠር","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nውጤት -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("አውድ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[የፋይሎች መያዣ]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("የፋይሎች መያዣ = {}\n ወደ መለወጥ:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ውርዶች/"); let filename = format!("./ውርዶች/userinput_filescontainer"); let result_location = format!("የፋይሎች መያዣ ውስጥ ተጠቅሷል: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "ነፃነት\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("የህዝብ መረጃ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("ይስቀሉ ወደ ደህንነቱ የተጠበቀ አውታረ መረብ") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("አልተረጋገጠም") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[አንድ ፋይል ይስቀሉ]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - ፋይል ሰቀላ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files put\nውጤት -> {}\nፋይል ስቀል =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ፋይሎችን ይስቀሉ]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - ፋይሎች ይሰቀላሉ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files put\nውጤት -> {}\nስቀል {} ፋይሎች =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files put\nውጤት -> {}\nፋይል ስቀል =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[ማውጫ ጫን]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - ማውጫ ሰቀላ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nውጤት -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ማውጫ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("ወደ ባለቤትነት ቦታ ይስቀሉ") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[አንድ ፋይል ይስቀሉ]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - ፋይል ሰቀላ ወደ የፋይሎች መያዣ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nውጤት -> {}\nፋይል ስቀል ወደ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ፋይል : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ፋይሎችን ይስቀሉ]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - የሚሰቀሉ ፋይሎች የፋይሎች መያዣ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nውጤት -> {}\nስቀል {} ፋይሎች ወደ {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} የ {} ፋይሎች : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files put\nውጤት -> {}\nፋይል ስቀል ወደ {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ፋይል : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[ማውጫ ጫን]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"ደህንነቱ የተጠበቀ አውታረ መረብ: የህዝብ መረጃ - ማውጫ ወደ ይስቀሉ የፋይሎች መያዣ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nውጤት -> {}\n❰Upload directory❱ ወደ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ማውጫ : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("አውርድ ከ ደህንነቱ የተጠበቀ አውታረ መረብ") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ፋይል]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ደህንነቱ የተጠበቀ ዩአርኤል","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/file", &timestamp); let result_location = format!("safe files sync\nውጤት -> {}\nአግኝ ፋይል", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ፋይል : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ማውጫ]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ደህንነቱ የተጠበቀ ዩአርኤል","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nውጤት -> {}\nአግኝ ማውጫ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ማውጫ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ፋይል]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ደህንነቱ የተጠበቀ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/file", &timestamp); let result_location = format!("safe files sync\nውጤት -> {}\nአግኝ ፋይል", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ፋይል : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ማውጫ]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ደህንነቱ የተጠበቀ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nውጤት -> {}\nአግኝ ማውጫ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ማውጫ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "ግላዊነት\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("የግል ውሂብ") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "ያስሱ"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => አውርድ]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/file", &timestamp); let result_location = format!("safe cat\nውጤት -> {}\nአግኝ ፋይል", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 የ 1 ፋይል : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => መረጃ]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nውጤት -> {}\nአግኝ መረጃ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => ዝርዝር]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nውጤት -> {}\nአግኝ ዝርዝር", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ዛፍ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nውጤት -> {}\nአግኝ ዛፍ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "መሣሪያዎች"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ጎራ አዘምን]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nውጤት -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[አዲስ ቁልፎች]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ውርዶች/{}/", &timestamp); let filename = format!("./ውርዶች/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nውጤት -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[አዘምን]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[መቀየሪያ]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"አውታረ መረብን ይቀይሩ እና በእጅ እንደገና ያስጀምሩ\nወደ መለወጥ::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "ውጣ"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("ሌሎች እንዲያውቁ እርዷቸው ደህንነቱ የተጠበቀ አውታረ መረብ") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("አብረን እድገት እናደርጋለን\nግላዊነት - ደህንነት - ነፃነት") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# ተወው #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# ተወው #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ar() { //! Safe GUI content - lang = ar
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "الصفحة الرئيسية\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] غير موجود)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] غير موجود)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] غير موجود)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("إصدار: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(غير متصل)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(غير متصل)" { network_label = format!("اختبار الشبكة: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("اختبار الشبكة: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "حماية\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("شبكة الاتصال") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("اختبار الشبكة") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("أمان المستخدم") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[يسجل دخول]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"مفتاح خاص لتسجيل الدخول - معاق\ntest net هل قمت بتسجيل الدخول بشكل افتراضي!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[تسجيل خروج]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"تسجيل خروج - معطل ل testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("جهاز موثوق به = [نعم]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("جهاز موثوق به = [لا (لكن نعم!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ملكية") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[عملات معدنية]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/info_balance", &timestamp); let result_location = format!("safe الرصيد\nنتيجة -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[مفاتيح]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nنتيجة -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("المجالات") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[احصل على لك]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"اسم المجال الجديد - safe nrs يزيد","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nنتيجة -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("مفهوم") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[حاوية الملفات]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("حاوية الملفات = {}\n تغيير إلى:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./التحميلات/"); let filename = format!("./التحميلات/userinput_filescontainer"); let result_location = format!("حاوية الملفات لاحظت في: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "الحريه\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("البيانات العامة") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("حمل الى الشبكة الآمنة") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("غير مصدق") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[تحميل ملف واحد]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"شبكة آمنة: البيانات العامة - تحميل الملف"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتيجة -> {}\nرفع ملف =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[تحميل الملفات]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"شبكة آمنة: البيانات العامة - تحميل الملفات"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتيجة -> {}\nتحميل {} الملفات =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتيجة -> {}\nرفع ملف =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[دليل التحميل]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"شبكة آمنة: البيانات العامة - تحميل الدليل"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nنتيجة -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 الدليل : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("تحميل إلى موقع مملوك") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[تحميل ملف واحد]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"شبكة آمنة: البيانات العامة - تحميل الملف إلى حاوية الملفات"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتيجة -> {}\nرفع ملف إلى {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 ملف : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[تحميل الملفات]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"شبكة آمنة: البيانات العامة - تحميل الملفات إلى حاوية الملفات"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتيجة -> {}\nتحميل {} الملفات إلى {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} من {} الملفات : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتيجة -> {}\nرفع ملف إلى {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 ملف : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[دليل التحميل]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"شبكة آمنة: البيانات العامة - تحميل الدليل إلى حاوية الملفات"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nنتيجة -> {}\n❰Upload directory❱ إلى {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 الدليل : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("التحميل من الشبكة الآمنة") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ملف]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"آمنة url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/file", &timestamp); let result_location = format!("safe files sync\nنتيجة -> {}\nاحصل على ملف", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 ملف : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// الدليل]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"آمنة url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتيجة -> {}\nاحصل على الدليل", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 الدليل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ملف]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"آمنة xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/file", &timestamp); let result_location = format!("safe files sync\nنتيجة -> {}\nاحصل على ملف", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 ملف : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// الدليل]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"آمنة xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتيجة -> {}\nاحصل على الدليل", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 الدليل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "خصوصية\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("بيانات خاصة") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "يكتشف"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => تحميل]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/file", &timestamp); let result_location = format!("safe cat\nنتيجة -> {}\nاحصل على ملف", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 من 1 ملف : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => معلومة]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nنتيجة -> {}\nاحصل على معلومة", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => قائمة]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nنتيجة -> {}\nاحصل على قائمة", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => شجرة]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nنتيجة -> {}\nاحصل على شجرة", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "أدوات"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[تحديث المجال]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nنتيجة -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[مفاتيح جديدة]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./التحميلات/{}/", &timestamp); let filename = format!("./التحميلات/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nنتيجة -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[تحديث]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[تحول]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"تبديل الشبكة وإعادة التشغيل يدويًا\nتغيير إلى::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "مخرج"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("ساعد الآخرين على الاكتشاف الشبكة الآمنة") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("معا نتقدم\nخصوصية - حماية - الحريه") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# استقال #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# استقال #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_be() { //! Safe GUI content - lang = be
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Дадому\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] не знойдзена)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] не знойдзена)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] не знойдзена)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Версія: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(не падлучаны)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(не падлучаны)" { network_label = format!("тэставая сетка: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тэставая сетка: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Бяспека\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Сетка") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тэставая сетка") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Бяспека карыстальніка") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Увайсці]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Уваход у прыватны ключ - інвалідам\ntest net Вы ўвайшлі па змаўчанні!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Выйсці]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Выйсці - адключаны для testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Давераная прылада = [Так]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Давераная прылада = [Не (але так!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Уласнасць") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Манеты]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/info_balance", &timestamp); let result_location = format!("safe баланс\nвынік -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ключы]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nвынік -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Дамены") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[атрымаць сваё]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"новае даменнае імя - safe nrs ствараць","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nвынік -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Кантэкст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[кантэйнер для файлаў]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Кантэйнер для файлаў = {}\n змяніць на:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Загрузкі/"); let filename = format!("./Загрузкі/userinput_filescontainer"); let result_location = format!("Кантэйнер для файлаў адзначана ў: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Свабоды\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Публічныя дадзеныя") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Загрузіць у бяспечнай сеткі") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Не аўтэнтыфікавана") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[загрузіць адзін файл]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Бяспечная сетка: Публічныя дадзеныя - загрузка файла"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files put\nвынік -> {}\nЗагрузіць файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Загрузка файлаў]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Бяспечная сетка: Публічныя дадзеныя - загрузка файлаў"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files put\nвынік -> {}\nЗагрузіць {} файлы =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files put\nвынік -> {}\nЗагрузіць файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[каталог загрузкі]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Бяспечная сетка: Публічныя дадзеныя - загрузка каталога"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nвынік -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Загрузіць ва ўласнае месцазнаходжанне") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[загрузіць адзін файл]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Бяспечная сетка: Публічныя дадзеныя - загрузіць файл у Кантэйнер для файлаў"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nвынік -> {}\nЗагрузіць файл да {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Загрузка файлаў]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Бяспечная сетка: Публічныя дадзеныя - файлы, загружаныя ў Кантэйнер для файлаў"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nвынік -> {}\nЗагрузіць {} файлы да {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} з {} файлы : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files put\nвынік -> {}\nЗагрузіць файл да {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[каталог загрузкі]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Бяспечная сетка: Публічныя дадзеныя - загрузіць каталог Кантэйнер для файлаў"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nвынік -> {}\n❰Upload directory❱ да {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Спампаваць з бяспечнай сеткі") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// файл]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"бяспечна url -адрас","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/file", &timestamp); let result_location = format!("safe files sync\nвынік -> {}\nатрымаць файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// каталог]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"бяспечна url -адрас","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nвынік -> {}\nатрымаць каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// файл]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"бяспечна xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/file", &timestamp); let result_location = format!("safe files sync\nвынік -> {}\nатрымаць файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// каталог]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"бяспечна xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nвынік -> {}\nатрымаць каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Канфідэнцыяльнасць\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Прыватныя дадзеныя") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Даследуйце"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => загрузка]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/file", &timestamp); let result_location = format!("safe cat\nвынік -> {}\nатрымаць файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => інфармацыі]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nвынік -> {}\nатрымаць інфармацыі", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => спіс]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nвынік -> {}\nатрымаць спіс", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => дрэва]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nвынік -> {}\nатрымаць дрэва", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "інструменты"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[абнавіць дамен]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nвынік -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[новыя ключы]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузкі/{}/", &timestamp); let filename = format!("./Загрузкі/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nвынік -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[абнаўленне]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[выключальнік]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Пераключыцеся на сетку і перазапусціце ўручную\nзмяніць на::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Выхад"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Дапамажыце іншым адкрыць для сябе бяспечнай сеткі") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Разам мы прагрэсуем\nКанфідэнцыяльнасць - Бяспека - Свабоды") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Кінуць #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Кінуць #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_bg() { //! Safe GUI content - lang = bg
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "У дома\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] не е намерен)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] не е намерен)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] не е намерен)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Версия: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(няма връзка)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(няма връзка)" { network_label = format!("тестова мрежа: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тестова мрежа: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Сигурност\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Мрежа") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тестова мрежа") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Сигурност на потребителите") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Влизам]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Влизане в частния ключ - хора с увреждания\ntest net влизали ли сте по подразбиране!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Излез от профила си]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Излез от профила си - деактивиран за testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Надеждно устройство = [Да]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Надеждно устройство = [Не (но да!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Собственост") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Монети]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/info_balance", &timestamp); let result_location = format!("safe баланс\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ключове]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Домейни") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[вземи твоя]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ново име на домейн - safe nrs създавам","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Контекст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[контейнер за файлове]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Контейнер за файлове = {}\n промени на:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Изтегляния/"); let filename = format!("./Изтегляния/userinput_filescontainer"); let result_location = format!("Контейнер за файлове отбелязано в: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Свобода\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Публични данни") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Качете в безопасната мрежа") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Не е удостоверено") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[качи един файл]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безопасна мрежа: Публични данни - качване на файл"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nКачи файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Качване на файлове]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безопасна мрежа: Публични данни - качване на файлове"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nКачване {} файлове =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nКачи файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[директория за качване]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безопасна мрежа: Публични данни - качване на директория"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nрезултат -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 директория : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Качете на собствено място") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[качи един файл]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безопасна мрежа: Публични данни - качване на файл в Контейнер за файлове"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nКачи файл да се {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Качване на файлове]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безопасна мрежа: Публични данни - файлове, качени в Контейнер за файлове"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nКачване {} файлове да се {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} на {} файлове : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nКачи файл да се {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[директория за качване]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безопасна мрежа: Публични данни - директорията се качва в Контейнер за файлове"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\n❰Upload directory❱ да се {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 директория : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Изтеглите от безопасната мрежа") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// файл]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/file", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nвземете файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// директория]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\nвземете директория", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 директория : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// файл]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/file", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nвземете файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// директория]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\nвземете директория", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 директория : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "поверителност\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Лични данни") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Изследвайте"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Изтегли]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/file", &timestamp); let result_location = format!("safe cat\nрезултат -> {}\nвземете файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 на 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => информация]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nрезултат -> {}\nвземете информация", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => списък]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nрезултат -> {}\nвземете списък", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => дърво]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nрезултат -> {}\nвземете дърво", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "инструменти"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[актуализирайте домейна]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[нови ключове]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Изтегляния/{}/", &timestamp); let filename = format!("./Изтегляния/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[актуализация]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[превключвател]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Превключете мрежата и рестартирайте ръчно\nпромени на::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Изход"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Помогнете на другите да открият безопасната мрежа") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Заедно напредваме\nповерителност - Сигурност - Свобода") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Напусни #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Напусни #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_bn() { //! Safe GUI content - lang = bn
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "বাড়ি\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] পাওয়া যায়নি)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] পাওয়া যায়নি)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] পাওয়া যায়নি)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("সংস্করণ: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(সংযোগ বিচ্ছিন্ন)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(সংযোগ বিচ্ছিন্ন)" { network_label = format!("টেস্ট নেটওয়ার্ক: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("টেস্ট নেটওয়ার্ক: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "নিরাপত্তা\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("অন্তর্জাল") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("টেস্ট নেটওয়ার্ক") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ব্যবহারকারীর নিরাপত্তা") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[প্রবেশ করুন]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ব্যক্তিগত কী লগইন - অক্ষম\nপরীক্ষার নেট আপনি ডিফল্টরূপে লগ ইন করেছেন!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[প্রস্থান]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"প্রস্থান - টেস্টনেটের জন্য নিষ্ক্রিয়");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("বিশ্বস্ত ডিভাইস = [হ্যাঁ]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("বিশ্বস্ত ডিভাইস = [না (তবে হ্যাঁ!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("মালিকানা") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[কয়েন]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/info_balance", &timestamp); let result_location = format!("safe ভারসাম্য\nফলাফল -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[চাবি]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nফলাফল -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ডোমেইন") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[তোমার নাও]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নতুন ডোমেইন নাম - safe nrs সৃষ্টি","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nফলাফল -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("প্রসঙ্গ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ফাইল ধারক]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ফাইল কনটেইনার = {}\n পরিবর্তন:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ডাউনলোড/"); let filename = format!("./ডাউনলোড/userinput_filescontainer"); let result_location = format!("ফাইল কনটেইনার মধ্যে উল্লিখিত: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "স্বাধীনতা\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("পাবলিক ডেটা") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("এ আপলোড করুন নিরাপদ নেটওয়ার্ক") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("প্রমাণিত নয়") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[একটি ফাইল আপলোড করুন]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ফাইল আপলোড"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files put\nফলাফল -> {}\nফাইল আপলোড করুন =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ফাইল আপলোড]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ফাইল আপলোড"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files put\nফলাফল -> {}\nআপলোড করুন {} নথি পত্র =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files put\nফলাফল -> {}\nফাইল আপলোড করুন =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[আপলোড ডিরেক্টরি]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ডিরেক্টরি আপলোড"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nফলাফল -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ডিরেক্টরি : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("একটি মালিকানাধীন স্থানে আপলোড করুন") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[একটি ফাইল আপলোড করুন]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ফাইল আপলোড করুন ফাইল কনটেইনার"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nফলাফল -> {}\nফাইল আপলোড করুন প্রতি {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ফাইল : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ফাইল আপলোড]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ফাইল আপলোড করুন ফাইল কনটেইনার"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nফলাফল -> {}\nআপলোড করুন {} নথি পত্র প্রতি {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} এর {} নথি পত্র : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files put\nফলাফল -> {}\nফাইল আপলোড করুন প্রতি {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ফাইল : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[আপলোড ডিরেক্টরি]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"নিরাপদ নেটওয়ার্ক: পাবলিক ডেটা - ডিরেক্টরি আপলোড করুন ফাইল কনটেইনার"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nফলাফল -> {}\n❰Upload directory❱ প্রতি {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ডিরেক্টরি : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("থেকে ডাউনলোড করুন নিরাপদ নেটওয়ার্ক") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ফাইল]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নিরাপদ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/file", &timestamp); let result_location = format!("safe files sync\nফলাফল -> {}\nপাওয়া ফাইল", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ফাইল : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ডিরেক্টরি]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নিরাপদ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nফলাফল -> {}\nপাওয়া ডিরেক্টরি", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ডিরেক্টরি : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ফাইল]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নিরাপদ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/file", &timestamp); let result_location = format!("safe files sync\nফলাফল -> {}\nপাওয়া ফাইল", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ফাইল : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ডিরেক্টরি]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নিরাপদ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nফলাফল -> {}\nপাওয়া ডিরেক্টরি", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ডিরেক্টরি : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "গোপনীয়তা\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("ব্যক্তিগত তথ্য") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "এক্সপ্লোর করুন"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ডাউনলোড করুন]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/file", &timestamp); let result_location = format!("safe cat\nফলাফল -> {}\nপাওয়া ফাইল", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 এর 1 ফাইল : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => তথ্য]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nফলাফল -> {}\nপাওয়া তথ্য", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => তালিকা]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nফলাফল -> {}\nপাওয়া তালিকা", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => গাছ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nফলাফল -> {}\nপাওয়া গাছ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "সরঞ্জাম"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ডোমেইন আপডেট করুন]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nফলাফল -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[নতুন চাবি]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ডাউনলোড/{}/", &timestamp); let filename = format!("./ডাউনলোড/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nফলাফল -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[হালনাগাদ]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[সুইচ]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"নেটওয়ার্ক পরিবর্তন করুন এবং ম্যানুয়ালি পুনরায় চালু করুন\nপরিবর্তন::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "প্রস্থান করুন"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("অন্যদের আবিষ্কার করতে সাহায্য করুন নিরাপদ নেটওয়ার্ক") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("একসাথে আমরা উন্নতি করি\nগোপনীয়তা - নিরাপত্তা - স্বাধীনতা") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# প্রস্থান করুন #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# প্রস্থান করুন #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ca() { //! Safe GUI content - lang = ca
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Inici\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] no trobat)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] no trobat)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] no trobat)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versió: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(no connectat)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(no connectat)" { network_label = format!("xarxa de proves: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("xarxa de proves: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Seguretat\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Xarxa") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("xarxa de proves") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Seguretat de lʼusuari") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Iniciar Sessió]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Inici de sessió de clau privada - discapacitat\ntest net heu iniciat la sessió per defecte!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Tancar sessió]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Tancar sessió - desactivat per a testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispositiu de confiança = [Sí]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispositiu de confiança = [No (però sí!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Propietat") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monedes]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/info_balance", &timestamp); let result_location = format!("safe equilibri\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Claus]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Dominis") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[aconsegueix la teva]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nou nom de domini - safe nrs crear","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Context") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[contenidor de fitxers]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Contenidor de fitxers = {}\n canviar a:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Descàrregues/"); let filename = format!("./Descàrregues/userinput_filescontainer"); let result_location = format!("Contenidor de fitxers assenyalat a: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Llibertat\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Dades Públiques") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Carrega a la xarxa segura") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("No autenticat") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[pengeu un fitxer]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Xarxa segura: Dades Públiques - càrrega de fitxers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nPenja el document =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Pengeu fitxers]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Xarxa segura: Dades Públiques - càrrega de fitxers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nPujar {} Fitxers =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nPenja el document =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[directori de càrrega]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Xarxa segura: Dades Públiques - càrrega de directori"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directori : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Pengeu a una ubicació pròpia") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[pengeu un fitxer]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Xarxa segura: Dades Públiques - càrrega de fitxers a Contenidor de fitxers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nPenja el document a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 dossier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Pengeu fitxers]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Xarxa segura: Dades Públiques - fitxers carregats a Contenidor de fitxers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nPujar {} Fitxers a {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} de {} Fitxers : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nPenja el document a {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 dossier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[directori de càrrega]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Xarxa segura: Dades Públiques - càrrega de directori a Contenidor de fitxers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\n❰Upload directory❱ a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directori : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Descarregar des de la xarxa segura") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// dossier]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Caixa forta url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\naconseguir dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directori]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Caixa forta url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\naconseguir directori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// dossier]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Caixa forta xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\naconseguir dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directori]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Caixa forta xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\naconseguir directori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privadesa\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Dades Privades") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explorar"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => descarregar]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/file", &timestamp); let result_location = format!("safe cat\nresultat -> {}\naconseguir dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informació]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultat -> {}\naconseguir informació", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => llista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultat -> {}\naconseguir llista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => arbre]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultat -> {}\naconseguir arbre", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Eines"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[actualització del domini]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[claus noves]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descàrregues/{}/", &timestamp); let filename = format!("./Descàrregues/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[actualització]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[interruptor]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Canvieu de xarxa i reinicieu manualment\ncanviar a::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Surt"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Ajudeu els altres a descobrir-los la xarxa segura") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Junts progressem\nPrivadesa - Seguretat - Llibertat") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Deixa #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Deixa #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_cs() { //! Safe GUI content - lang = cs
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Domov\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nenalezeno)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nenalezeno)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nenalezeno)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Verze: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(Nepřipojený)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(Nepřipojený)" { network_label = format!("testovací síť: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testovací síť: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Bezpečnostní\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Síť") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testovací síť") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Zabezpečení uživatele") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Přihlásit se]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Přihlášení soukromým klíčem - zakázáno\ntest net má jste ve výchozím nastavení přihlášeni!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Odhlásit se]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Odhlásit se - zakázáno pro testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Důvěryhodné zařízení = [Ano]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Důvěryhodné zařízení = [Ne (ale ano!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Vlastnictví") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Mince]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/info_balance", &timestamp); let result_location = format!("safe Zůstatek\nvýsledek -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Klíče]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nvýsledek -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domény") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[dostat své]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nový název domény - safe nrs vytvořit","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nvýsledek -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontext") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[kontejner na soubory]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Soubory kontejneru = {}\n změnit:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Soubory ke stažení/"); let filename = format!("./Soubory ke stažení/userinput_filescontainer"); let result_location = format!("Soubory kontejneru uvedeno v: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Svoboda\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Veřejná Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Nahrát do bezpečnou síť") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Neověřeno") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[nahrajte jeden soubor]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpečná síť: Veřejná Data - nahrání souboru"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledek -> {}\nNahrát soubor =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Nahrát soubory]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpečná síť: Veřejná Data - nahrát soubory"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledek -> {}\nnahrát {} soubory =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledek -> {}\nNahrát soubor =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[nahrát adresář]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpečná síť: Veřejná Data - nahrání adresáře"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nvýsledek -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresář : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Nahrajte na vlastněné místo") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[nahrajte jeden soubor]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpečná síť: Veřejná Data - nahrát soubor do Soubory kontejneru"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nvýsledek -> {}\nNahrát soubor na {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 soubor : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Nahrát soubory]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpečná síť: Veřejná Data - nahrát soubory do Soubory kontejneru"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nvýsledek -> {}\nnahrát {} soubory na {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} z {} soubory : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledek -> {}\nNahrát soubor na {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 soubor : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[nahrát adresář]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpečná síť: Veřejná Data - nahrát adresář do Soubory kontejneru"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nvýsledek -> {}\n❰Upload directory❱ na {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresář : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Stáhnout z bezpečnou síť") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// soubor]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečný url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/file", &timestamp); let result_location = format!("safe files sync\nvýsledek -> {}\ndostat soubor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 soubor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// adresář]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečný url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nvýsledek -> {}\ndostat adresář", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresář : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// soubor]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečný xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/file", &timestamp); let result_location = format!("safe files sync\nvýsledek -> {}\ndostat soubor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 soubor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// adresář]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečný xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nvýsledek -> {}\ndostat adresář", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresář : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Soukromí\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Soukromá Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Prozkoumat"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => stažení]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/file", &timestamp); let result_location = format!("safe cat\nvýsledek -> {}\ndostat soubor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 soubor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informace]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nvýsledek -> {}\ndostat informace", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => seznam]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nvýsledek -> {}\ndostat seznam", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => strom]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nvýsledek -> {}\ndostat strom", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Nástroje"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[aktualizovat doménu]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nvýsledek -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nové klíče]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Soubory ke stažení/{}/", &timestamp); let filename = format!("./Soubory ke stažení/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nvýsledek -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Aktualizace]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[přepínač]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Přepněte síť a restartujte ručně\nzměnit::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Výstup"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Pomozte ostatním objevit bezpečnou síť") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Společně postupujeme\nSoukromí - Bezpečnostní - Svoboda") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Přestat #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Přestat #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_da() { //! Safe GUI content - lang = da
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Hjem\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ikke fundet)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ikke fundet)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ikke fundet)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Version: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ikke forbundet)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ikke forbundet)" { network_label = format!("testnetværk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testnetværk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sikkerhed\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Netværk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testnetværk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Brugersikkerhed") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Log på]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Log på privat nøgle - handicappet\ntestnet har du logget ind som standard!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Log ud]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Log ud - deaktiveret for testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Pålidelig enhed = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Pålidelig enhed = [Nej (men ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Ejendomsret") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Mønter]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_balance", &timestamp); let result_location = format!("safe balance\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Nøgler]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domæner") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[få din]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nyt domænenavn - safe nrs skab","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Sammenhæng") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[filbeholder]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Filer Container = {}\n skifte til:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Downloads/"); let filename = format!("./Downloads/userinput_filescontainer"); let result_location = format!("Filer Container noteret i: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Frihed\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Offentlige Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Upload til det sikre netværk") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ikke godkendt") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[uploade en fil]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sikkert netværk: Offentlige Data - fil upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nUpload fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Upload filer]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sikkert netværk: Offentlige Data - filer upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nUpload {} filer =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nUpload fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[upload bibliotek]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sikkert netværk: Offentlige Data - upload af bibliotek"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 vejviser : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Upload til et ejet sted") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[uploade en fil]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sikkert netværk: Offentlige Data - fil upload til Filer Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nUpload fil til {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Upload filer]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sikkert netværk: Offentlige Data - filer, der uploades til Filer Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nUpload {} filer til {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} af {} filer : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nUpload fil til {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[upload bibliotek]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sikkert netværk: Offentlige Data - katalog upload til Filer Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\n❰Upload directory❱ til {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 vejviser : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Download fra det sikre netværk") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fil]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// vejviser]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nfå vejviser", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 vejviser : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fil]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// vejviser]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nfå vejviser", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 vejviser : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privatliv\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Private Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Udforske"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Hent]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe cat\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 af 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => Information]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultat -> {}\nfå Information", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => liste]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultat -> {}\nfå liste", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => træ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultat -> {}\nfå træ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Værktøjer"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[opdater domæne]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nye nøgler]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[opdatering]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[kontakt]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Skift netværk og genstart manuelt\nskifte til::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Afslut"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Hjælp andre med at opdage det sikre netværk") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Sammen går vi fremad\nPrivatliv - Sikkerhed - Frihed") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Afslut #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Afslut #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_de() { //! Safe GUI content - lang = de
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Heim\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nicht gefunden)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nicht gefunden)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nicht gefunden)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Ausführung: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(nicht verbunden)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(nicht verbunden)" { network_label = format!("testnetzwerk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testnetzwerk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sicherheit\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Netzwerk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testnetzwerk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Benutzersicherheit") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Einloggen]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Anmeldung mit privatem Schlüssel - Behinderte\ntest net hat Sie standardmäßig eingeloggt!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Ausloggen]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Ausloggen - für Testnetz deaktiviert");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Vertrauenswürdiges Gerät = [Jawohl]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Vertrauenswürdiges Gerät = [Nein (aber ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Eigentum") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Münzen]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_balance", &timestamp); let result_location = format!("safe Balance\nErgebnis -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Schlüssel]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nErgebnis -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domänen") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[Nimm deines]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"neuer Domainname - safe nrs schaffen","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nErgebnis -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontext") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[Dateicontainer]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Dateicontainer = {}\n ändern:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Downloads/"); let filename = format!("./Downloads/userinput_filescontainer"); let result_location = format!("Dateicontainer notiert in: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Freiheit\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Öffentliche Daten") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Etwas hochladen auf das sichere Netzwerk") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nicht berechtigt") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[eine Datei hochladen]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sicheres Netzwerk: Öffentliche Daten - Datei-Upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nErgebnis -> {}\nDatei hochladen =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Daten hochladen]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sicheres Netzwerk: Öffentliche Daten - Dateien hochladen"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nErgebnis -> {}\nHochladen {} Dateien =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nErgebnis -> {}\nDatei hochladen =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[Verzeichnis hochladen]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sicheres Netzwerk: Öffentliche Daten - Verzeichnis hochladen"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nErgebnis -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Verzeichnis : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Auf einen eigenen Standort hochladen") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[eine Datei hochladen]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sicheres Netzwerk: Öffentliche Daten - Datei hochladen nach Dateicontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nErgebnis -> {}\nDatei hochladen zu {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Datei : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Daten hochladen]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sicheres Netzwerk: Öffentliche Daten - Dateien hochladen auf Dateicontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nErgebnis -> {}\nHochladen {} Dateien zu {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} von {} Dateien : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nErgebnis -> {}\nDatei hochladen zu {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Datei : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[Verzeichnis hochladen]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sicheres Netzwerk: Öffentliche Daten - Verzeichnis hochladen in Dateicontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nErgebnis -> {}\n❰Upload directory❱ zu {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Verzeichnis : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Herunterladen von das sichere Netzwerk") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// Datei]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicher url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nErgebnis -> {}\nwerden Datei", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Datei : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// Verzeichnis]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicher url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nErgebnis -> {}\nwerden Verzeichnis", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Verzeichnis : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// Datei]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicher xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nErgebnis -> {}\nwerden Datei", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Datei : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// Verzeichnis]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicher xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nErgebnis -> {}\nwerden Verzeichnis", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Verzeichnis : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privatsphäre\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Private Daten") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Entdecken"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => herunterladen]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe cat\nErgebnis -> {}\nwerden Datei", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 von 1 Datei : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => Information]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nErgebnis -> {}\nwerden Information", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => aufführen]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nErgebnis -> {}\nwerden aufführen", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => Baum]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nErgebnis -> {}\nwerden Baum", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Werkzeuge"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[Domäne aktualisieren]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nErgebnis -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[neue Schlüssel]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nErgebnis -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[aktualisieren]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[Schalter]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Netzwerk wechseln und manuell neu starten\nändern::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Ausgang"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Hilf anderen beim Entdecken das sichere Netzwerk") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Gemeinsam kommen wir voran\nPrivatsphäre - Sicherheit - Freiheit") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Aufhören #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Aufhören #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_el() { //! Safe GUI content - lang = el
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Σπίτι\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] δεν βρέθηκε)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] δεν βρέθηκε)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] δεν βρέθηκε)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Εκδοχή: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(μη συνδεδεμένο)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(μη συνδεδεμένο)" { network_label = format!("δίκτυο δοκιμών: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("δίκτυο δοκιμών: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Ασφάλεια\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Δίκτυο") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("δίκτυο δοκιμών") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Ασφάλεια χρήστη") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Σύνδεση]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Σύνδεση ιδιωτικού κλειδιού - άτομα με ειδικές ανάγκες\ntest net έχετε συνδεθεί από προεπιλογή!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Αποσύνδεση]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Αποσύνδεση - απενεργοποιημένο για testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Αξιόπιστη συσκευή = [Ναί]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Αξιόπιστη συσκευή = [Όχι (αλλά ναι!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Ιδιοκτησία") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Νομίσματα]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/info_balance", &timestamp); let result_location = format!("safe ισορροπία\nαποτέλεσμα -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Κλειδιά]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nαποτέλεσμα -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Τομείς") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[πάρε το δικό σου]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"νέο όνομα τομέα - safe nrs δημιουργώ","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nαποτέλεσμα -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Συμφραζόμενα") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[περιέκτη αρχείων]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Container αρχείων = {}\n αλλάζω σε:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Λήψεις/"); let filename = format!("./Λήψεις/userinput_filescontainer"); let result_location = format!("Container αρχείων σημειώθηκε στο: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Ελευθερία\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Δημόσια δεδομένα") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Μεταφόρτωση σε το Ασφαλές Δίκτυο") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Δεν έχει πιστοποιηθεί") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ανεβάστε ένα αρχείο]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - ανέβασμα αρχείου"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files put\nαποτέλεσμα -> {}\nΑνέβασμα αρχείου =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Ανεβάστε αρχεία]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - μεταφόρτωση αρχείων"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files put\nαποτέλεσμα -> {}\nΜεταφόρτωση {} αρχεία =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files put\nαποτέλεσμα -> {}\nΑνέβασμα αρχείου =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[κατάλογος μεταφόρτωσης]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - μεταφόρτωση καταλόγου"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nαποτέλεσμα -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 Ευρετήριο : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Μεταφόρτωση σε ιδιόκτητη τοποθεσία") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ανεβάστε ένα αρχείο]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - μεταφόρτωση αρχείου σε Container αρχείων"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nαποτέλεσμα -> {}\nΑνέβασμα αρχείου προς το {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 αρχείο : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Ανεβάστε αρχεία]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - μεταφόρτωση αρχείων σε Container αρχείων"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nαποτέλεσμα -> {}\nΜεταφόρτωση {} αρχεία προς το {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} του {} αρχεία : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files put\nαποτέλεσμα -> {}\nΑνέβασμα αρχείου προς το {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 αρχείο : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[κατάλογος μεταφόρτωσης]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Ασφαλές Δίκτυο: Δημόσια δεδομένα - μεταφόρτωση καταλόγου σε Container αρχείων"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nαποτέλεσμα -> {}\n❰Upload directory❱ προς το {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 Ευρετήριο : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Λήψη από το Ασφαλές Δίκτυο") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// αρχείο]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ασφαλής url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/file", &timestamp); let result_location = format!("safe files sync\nαποτέλεσμα -> {}\nπαίρνω αρχείο", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 αρχείο : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// Ευρετήριο]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ασφαλής url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nαποτέλεσμα -> {}\nπαίρνω Ευρετήριο", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 Ευρετήριο : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// αρχείο]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ασφαλής xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/file", &timestamp); let result_location = format!("safe files sync\nαποτέλεσμα -> {}\nπαίρνω αρχείο", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 αρχείο : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// Ευρετήριο]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ασφαλής xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nαποτέλεσμα -> {}\nπαίρνω Ευρετήριο", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 Ευρετήριο : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Μυστικότητα\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Ιδιωτικά Δεδομένα") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Εξερευνώ"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Κατεβάστε]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/file", &timestamp); let result_location = format!("safe cat\nαποτέλεσμα -> {}\nπαίρνω αρχείο", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 του 1 αρχείο : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => πληροφορίες]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nαποτέλεσμα -> {}\nπαίρνω πληροφορίες", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => λίστα]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nαποτέλεσμα -> {}\nπαίρνω λίστα", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => δέντρο]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nαποτέλεσμα -> {}\nπαίρνω δέντρο", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Εργαλεία"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ενημέρωση τομέα]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nαποτέλεσμα -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[νέα κλειδιά]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Λήψεις/{}/", &timestamp); let filename = format!("./Λήψεις/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nαποτέλεσμα -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[εκσυγχρονίζω]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[διακόπτης]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Εναλλαγή δικτύου και μη αυτόματη επανεκκίνηση\nαλλάζω σε::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Εξοδος"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Βοηθήστε τους άλλους να ανακαλύψουν το Ασφαλές Δίκτυο") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Μαζί προχωράμε\nΜυστικότητα - Ασφάλεια - Ελευθερία") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Εγκαταλείπω #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Εγκαταλείπω #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery() { //! Safe GUI content - lang = en
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Home\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] not found)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] not found)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] not found)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("version: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(not connected)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(not connected)" { network_label = format!("test network: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("test network: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Security\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Network") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("Test Network") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("User Security") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Log in]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Private Key logon - disabled\ntest network has you logged in by default!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Log out]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"log out - disabled for testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Trusted Device = [Yes]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Trusted Device = [No (but yes!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Ownership") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[coins]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_balance", &timestamp); let result_location = format!("safe balance\nresult -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[keys]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresult -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domains") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[get yours]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"new domain name - safe nrs create","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresult -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Context") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[files container]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Files Container = {}\n change to:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Downloads/"); let filename = format!("./Downloads/userinput_filescontainer"); let result_location = format!("Files Container noted in: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Freedom\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Public Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Upload to the Safe Network") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Not Authenticated") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[upload one file]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Safe Network: Public Data - file upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresult -> {}\nUpload file =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[upload files]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Safe Network: Public Data - files upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresult -> {}\nUpload {} files =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresult -> {}\nUpload file =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[upload directory]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Safe Network: Public Data - directory upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresult -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 directory : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Upload to an owned location") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[upload one file]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Safe Network: Public Data - file upload to Files Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresult -> {}\nUpload file to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[upload files]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Safe Network: Public Data - files upload to Files Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresult -> {}\nUpload {} files to {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresult -> {}\nUpload file to {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[upload directory]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Safe Network: Public Data - directory upload to Files Container"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresult -> {}\n❰Upload directory❱ to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 directory : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Download from the Safe Network") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// file]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresult -> {}\nget file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directory]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresult -> {}\nget directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// file]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresult -> {}\nget file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directory]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresult -> {}\nget directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privacy\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Private Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explore"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => download]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe cat\nresult -> {}\nget file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => information]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresult -> {}\nget information", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => list]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresult -> {}\nget list", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => tree]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresult -> {}\nget tree", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Tools"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[update domain]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresult -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[new keys]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresult -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[update]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[switch]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Switch network and manually restart\nchange to::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Exit"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Help others discover the Safe Network") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Together we progress\nPrivacy - Security - Freedom") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Quit #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Quit #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_es() { //! Safe GUI content - lang = es
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Hogar\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] extraviado)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] extraviado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] extraviado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versión: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(no conectado)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(no conectado)" { network_label = format!("red de prueba: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("red de prueba: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Seguridad\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("La Red") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("red de prueba") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Seguridad del usuario") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Iniciar sesión]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Inicio de sesión con clave privada - discapacitado\n¡test net te ha iniciado sesión de forma predeterminada!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Cerrar sesión]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Cerrar sesión - deshabilitado para testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispositivo confiable = [sí]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispositivo confiable = [No (¡pero sí!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Propiedad") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monedas]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_balance", &timestamp); let result_location = format!("safe equilibrio\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Teclas]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Dominios") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[consigue el tuyo]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nuevo nombre de dominio - safe nrs crear","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Contexto") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[contenedor de archivos]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Contenedor de archivos = {}\n cambiar a:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Descargas/"); let filename = format!("./Descargas/userinput_filescontainer"); let result_location = format!("Contenedor de archivos anotado en: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Libertad\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Datos Públicos") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Subir a la red segura") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("No autenticado") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[subir un archivo]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Red Segura: Datos Públicos - Subir archivo"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir archivo =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Subir archivos]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Red Segura: Datos Públicos - carga de archivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir {} archivos =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir archivo =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[cargar directorio]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Red Segura: Datos Públicos - carga de directorio"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultado -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Subir a una ubicación propia") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[subir un archivo]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Red Segura: Datos Públicos - carga de archivo a Contenedor de archivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nSubir archivo para {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 expediente : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Subir archivos]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Red Segura: Datos Públicos - subir archivos a Contenedor de archivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nSubir {} archivos para {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} de {} archivos : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir archivo para {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 expediente : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[cargar directorio]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Red Segura: Datos Públicos - subir directorio a Contenedor de archivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\n❰Upload directory❱ para {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Descargar desde la red segura") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// expediente]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"a salvo url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nobtener expediente", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 expediente : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directorio]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"a salvo url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\nobtener directorio", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// expediente]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"a salvo xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nobtener expediente", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 expediente : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directorio]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"a salvo xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\nobtener directorio", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Intimidad\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Datos Privados") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explorar"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => descargar]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe cat\nresultado -> {}\nobtener expediente", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 expediente : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => información]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultado -> {}\nobtener información", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultado -> {}\nobtener lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => árbol]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultado -> {}\nobtener árbol", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Herramientas"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[actualizar dominio]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nuevas llaves]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[actualizar]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[cambiar]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Cambiar de red y reiniciar manualmente\ncambiar a::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Salida"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Ayuda a otros a descubrir la red segura") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Juntos progresamos\nIntimidad - Seguridad - Libertad") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Dejar #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Dejar #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_fa() { //! Safe GUI content - lang = fa
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "صفحه اصلی\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] پیدا نشد)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] پیدا نشد)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] پیدا نشد)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("نسخه: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(متصل نیست)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(متصل نیست)" { network_label = format!("شبکه تست: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("شبکه تست: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "امنیت\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("شبکه") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("شبکه تست") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("امنیت کاربر") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[وارد شدن]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ورود کلید خصوصی - معلول\ntest net به طور پیش فرض وارد سیستم شده اید!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[خروج]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"خروج - غیر فعال برای testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("دستگاه مورد اعتماد = [آره]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("دستگاه مورد اعتماد = [نه (اما بله!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("مالکیت") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[سکه]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/info_balance", &timestamp); let result_location = format!("safe تعادل\nنتیجه -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[کلیدها]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nنتیجه -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("دامنه ها") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[مال خودت را بگیر]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"نام دامنه جدید - safe nrs ایجاد کردن","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nنتیجه -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("متن نوشته") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ظرف فایل ها]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ظرف فایل ها = {}\n تغییر به:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./بارگیری ها/"); let filename = format!("./بارگیری ها/userinput_filescontainer"); let result_location = format!("ظرف فایل ها ذکر شده در: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "آزادی\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("داده های عمومی") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("بارگذاری به شبکه ایمن") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("تأیید نشده") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[یک فایل بارگذاری کنید]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"شبکه ایمن: داده های عمومی - بارگذاری فایل"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجه -> {}\nآپلود فایل =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[بارگذاری فایل ها]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"شبکه ایمن: داده های عمومی - بارگذاری فایل ها"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجه -> {}\nبارگذاری {} فایل ها =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجه -> {}\nآپلود فایل =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[پوشه بارگذاری]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"شبکه ایمن: داده های عمومی - بارگذاری فهرست"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nنتیجه -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فهرست راهنما : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("بارگذاری در مکان متعلق به خود") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[یک فایل بارگذاری کنید]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"شبکه ایمن: داده های عمومی - بارگذاری فایل در ظرف فایل ها"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتیجه -> {}\nآپلود فایل به {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فایل : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[بارگذاری فایل ها]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"شبکه ایمن: داده های عمومی - بارگذاری فایل ها در ظرف فایل ها"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتیجه -> {}\nبارگذاری {} فایل ها به {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} از {} فایل ها : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجه -> {}\nآپلود فایل به {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فایل : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[پوشه بارگذاری]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"شبکه ایمن: داده های عمومی - بارگذاری فهرست به ظرف فایل ها"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nنتیجه -> {}\n❰Upload directory❱ به {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فهرست راهنما : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("بارگیری از شبکه ایمن") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// فایل]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بی خطر آدرس اینترنتی","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/file", &timestamp); let result_location = format!("safe files sync\nنتیجه -> {}\nگرفتن فایل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فایل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// فهرست راهنما]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بی خطر آدرس اینترنتی","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتیجه -> {}\nگرفتن فهرست راهنما", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فهرست راهنما : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// فایل]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بی خطر xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/file", &timestamp); let result_location = format!("safe files sync\nنتیجه -> {}\nگرفتن فایل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فایل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// فهرست راهنما]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بی خطر xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتیجه -> {}\nگرفتن فهرست راهنما", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فهرست راهنما : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "حریم خصوصی\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("داده های خصوصی") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "کاوش کنید"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => دانلود]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/file", &timestamp); let result_location = format!("safe cat\nنتیجه -> {}\nگرفتن فایل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 فایل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => اطلاعات]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nنتیجه -> {}\nگرفتن اطلاعات", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => لیست]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nنتیجه -> {}\nگرفتن لیست", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => درخت]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nنتیجه -> {}\nگرفتن درخت", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "ابزار"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[دامنه را به روز کنید]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nنتیجه -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[کلیدهای جدید]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./بارگیری ها/{}/", &timestamp); let filename = format!("./بارگیری ها/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nنتیجه -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[به روز رسانی]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[تعویض]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"شبکه را تغییر دهید و به صورت دستی راه اندازی مجدد کنید\nتغییر به::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "خروج"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("به دیگران در کشف کمک کنید شبکه ایمن") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("با هم پیشرفت می کنیم\nحریم خصوصی - امنیت - آزادی") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# ترک کن #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# ترک کن #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_fi() { //! Safe GUI content - lang = fi
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Koti\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ei löydetty)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ei löydetty)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ei löydetty)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versio: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ei yhteyttä)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ei yhteyttä)" { network_label = format!("testiverkko: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testiverkko: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Turvallisuus\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Verkko") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testiverkko") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Käyttäjän suojaus") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Kirjaudu sisään]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Yksityisen avaimen kirjautuminen - liikuntarajoitteinen\ntest net on kirjautunut sisään oletusarvoisesti!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Kirjautua ulos]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Kirjautua ulos - poistettu käytöstä testiverkon vuoksi");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Luotettu laite = [Joo]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Luotettu laite = [Ei (mutta kyllä!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Omistus") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Kolikot]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/info_balance", &timestamp); let result_location = format!("safe saldo\ntulos -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Avaimet]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\ntulos -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Verkkotunnukset") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[hanki omasi]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"uusi verkkotunnus - safe nrs luoda","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\ntulos -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Konteksti") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[tiedostojen säilö]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Tiedostojen säilö = {}\n vaihda:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Lataukset/"); let filename = format!("./Lataukset/userinput_filescontainer"); let result_location = format!("Tiedostojen säilö merkitty sisään: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Vapaus\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Julkiset Tiedot") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Lähetä kohteeseen Turvallinen verkko") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ei todennettu") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[lataa yksi tiedosto]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Turvallinen verkko: Julkiset Tiedot - tiedoston lataus"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files put\ntulos -> {}\nLataa tiedosto =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Lataa tiedostoja]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Turvallinen verkko: Julkiset Tiedot - tiedostojen lataaminen"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files put\ntulos -> {}\nLataa {} tiedostot =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files put\ntulos -> {}\nLataa tiedosto =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[lataa hakemisto]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Turvallinen verkko: Julkiset Tiedot - hakemiston lataus"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\ntulos -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 hakemistoon : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Lataa omistamaasi paikkaan") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[lataa yksi tiedosto]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Turvallinen verkko: Julkiset Tiedot - tiedoston lataaminen kohteeseen Tiedostojen säilö"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files sync\ntulos -> {}\nLataa tiedosto kohteeseen {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 tiedosto : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Lataa tiedostoja]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Turvallinen verkko: Julkiset Tiedot - tiedostot ladataan Tiedostojen säilö"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files sync\ntulos -> {}\nLataa {} tiedostot kohteeseen {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} av {} tiedostot : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files put\ntulos -> {}\nLataa tiedosto kohteeseen {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 tiedosto : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[lataa hakemisto]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Turvallinen verkko: Julkiset Tiedot - hakemiston lataaminen Tiedostojen säilö"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\ntulos -> {}\n❰Upload directory❱ kohteeseen {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 hakemistoon : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Lataa osoitteesta Turvallinen verkko") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// tiedosto]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"turvallinen url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/file", &timestamp); let result_location = format!("safe files sync\ntulos -> {}\nsaada tiedosto", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 tiedosto : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// hakemistoon]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"turvallinen url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\ntulos -> {}\nsaada hakemistoon", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 hakemistoon : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// tiedosto]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"turvallinen xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/file", &timestamp); let result_location = format!("safe files sync\ntulos -> {}\nsaada tiedosto", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 tiedosto : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// hakemistoon]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"turvallinen xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\ntulos -> {}\nsaada hakemistoon", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 hakemistoon : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Yksityisyys\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Yksityiset Tiedot") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Tutkia"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ladata]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/file", &timestamp); let result_location = format!("safe cat\ntulos -> {}\nsaada tiedosto", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 tiedosto : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => tiedot]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/info_metadata", &timestamp); let result_location = format!("safe dog\ntulos -> {}\nsaada tiedot", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/info_ls", &timestamp); let result_location = format!("safe files ls\ntulos -> {}\nsaada lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => puu]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/info_tree", &timestamp); let result_location = format!("safe files tree\ntulos -> {}\nsaada puu", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Työkalut"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[päivitä verkkotunnus]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\ntulos -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[uudet avaimet]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Lataukset/{}/", &timestamp); let filename = format!("./Lataukset/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\ntulos -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[päivittää]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[vaihtaa]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Vaihda verkko ja käynnistä manuaalisesti uudelleen\nvaihda::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Lopeta"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Auta muita löytämään Turvallinen verkko") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Yhdessä edistymme\nYksityisyys - Turvallisuus - Vapaus") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Lopettaa #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Lopettaa #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_fr() { //! Safe GUI content - lang = fr
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Accueil\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] pas trouvé)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] pas trouvé)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] pas trouvé)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Version: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(pas connecté)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(pas connecté)" { network_label = format!("réseau de test: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("réseau de test: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sécurité\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Réseau") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("réseau de test") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Sécurité de lʼutilisateur") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Connexion]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Connexion par clé privée - désactivée\ntest net vous a connecté par défaut !");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Se déconnecter]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Se déconnecter - désactivé pour testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Appareil de confiance = [Oui]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Appareil de confiance = [Non (mais oui !)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("La possession") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Pièces de monnaie]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/info_balance", &timestamp); let result_location = format!("safe équilibre\nrésultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Clés]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nrésultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domaines") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[obtenez le vôtre]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nouveau nom de domaine - safe nrs créer","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nrésultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Le contexte") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[conteneur de fichiers]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Conteneur de fichiers = {}\n changer pour:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Téléchargements/"); let filename = format!("./Téléchargements/userinput_filescontainer"); let result_location = format!("Conteneur de fichiers noté dans: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Liberté\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Données Publiques") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Télécharger vers le réseau sécurisé") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Non authentifié") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[télécharger un fichier]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Réseau sûr: Données Publiques - téléchargement de fichiers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrésultat -> {}\nTéléverser un fichier =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Télécharger des fichiers]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Réseau sûr: Données Publiques - téléchargement de fichiers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrésultat -> {}\nTélécharger {} des dossiers =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrésultat -> {}\nTéléverser un fichier =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[répertoire de téléchargement]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Réseau sûr: Données Publiques - téléchargement dʼannuaire"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nrésultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 annuaire : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Télécharger vers un emplacement appartenant") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[télécharger un fichier]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Réseau sûr: Données Publiques - téléchargement de fichier vers Conteneur de fichiers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrésultat -> {}\nTéléverser un fichier à {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 déposer : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Télécharger des fichiers]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Réseau sûr: Données Publiques - fichiers téléchargés vers Conteneur de fichiers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrésultat -> {}\nTélécharger {} des dossiers à {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} de {} des dossiers : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrésultat -> {}\nTéléverser un fichier à {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 déposer : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[répertoire de téléchargement]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Réseau sûr: Données Publiques - téléchargement du répertoire vers Conteneur de fichiers"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nrésultat -> {}\n❰Upload directory❱ à {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 annuaire : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Télécharger à partir de le réseau sécurisé") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// déposer]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"en sécurité url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/file", &timestamp); let result_location = format!("safe files sync\nrésultat -> {}\navoir déposer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 déposer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// annuaire]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"en sécurité url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrésultat -> {}\navoir annuaire", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 annuaire : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// déposer]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"en sécurité xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/file", &timestamp); let result_location = format!("safe files sync\nrésultat -> {}\navoir déposer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 déposer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// annuaire]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"en sécurité xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrésultat -> {}\navoir annuaire", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 annuaire : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Intimité\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Données Privées") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explorer"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Télécharger]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/file", &timestamp); let result_location = format!("safe cat\nrésultat -> {}\navoir déposer", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 déposer : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informations]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nrésultat -> {}\navoir informations", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => liste]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nrésultat -> {}\navoir liste", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => arbre]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nrésultat -> {}\navoir arbre", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Outils"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[mettre à jour le domaine]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nrésultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nouvelles clés]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Téléchargements/{}/", &timestamp); let filename = format!("./Téléchargements/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nrésultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[mettre à jour]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[changer]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Changer de réseau et redémarrer manuellement\nchanger pour::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Sortir"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Aidez les autres à découvrir le réseau sécurisé") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Ensemble nous progressons\nIntimité - Sécurité - Liberté") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Quitter #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Quitter #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_gl() { //! Safe GUI content - lang = gl
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Casa\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] non atopado)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] non atopado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] non atopado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versión: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(non conectado)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(non conectado)" { network_label = format!("rede de proba: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("rede de proba: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Seguridade\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Rede") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("rede de proba") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Seguridade do usuario") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Iniciar sesión]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Inicio de sesión de chave privada - desactivado\nproba de rede xa iniciaches sesión por defecto!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Pechar sesión]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Pechar sesión - desactivado para testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispositivo de confianza = [Si]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispositivo de confianza = [Non (pero si!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Propiedade") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Moedas]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_balance", &timestamp); let result_location = format!("safe equilibrio\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Chaves]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Dominios") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[obtén o teu]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"novo nome de dominio - safe nrs crear","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Contexto") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[contedor de ficheiros]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Contedor de ficheiros = {}\n cambiar a:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Descargas/"); let filename = format!("./Descargas/userinput_filescontainer"); let result_location = format!("Contedor de ficheiros anotado en: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Liberdade\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Datos Públicos") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Cargar en a rede segura") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Non autenticado") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[cargar un ficheiro]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rede segura: Datos Públicos - carga de ficheiros"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nCargar ficheiro =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Cargar ficheiros]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rede segura: Datos Públicos - carga de ficheiros"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nCargar {} arquivos =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nCargar ficheiro =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[directorio de carga]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rede segura: Datos Públicos - carga de directorio"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultado -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Carga a unha localización de propiedade") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[cargar un ficheiro]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rede segura: Datos Públicos - carga de ficheiros a Contedor de ficheiros"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nCargar ficheiro a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 arquivo : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Cargar ficheiros]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rede segura: Datos Públicos - ficheiros cargados a Contedor de ficheiros"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nCargar {} arquivos a {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} de {} arquivos : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nCargar ficheiro a {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 arquivo : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[directorio de carga]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rede segura: Datos Públicos - subir directorio a Contedor de ficheiros"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\n❰Upload directory❱ a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Descargar desde a rede segura") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// arquivo]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nconseguir arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directorio]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\nconseguir directorio", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// arquivo]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nconseguir arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directorio]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\nconseguir directorio", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 directorio : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privacidade\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Datos Privados") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explorar"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => descargar]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/file", &timestamp); let result_location = format!("safe cat\nresultado -> {}\nconseguir arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => información]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultado -> {}\nconseguir información", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultado -> {}\nconseguir lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => árbore]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultado -> {}\nconseguir árbore", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Ferramentas"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[actualizar dominio]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[novas claves]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descargas/{}/", &timestamp); let filename = format!("./Descargas/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[actualización]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[cambiar]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Cambia de rede e reinicia manualmente\ncambiar a::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Saír"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Axuda a outros a descubrir a rede segura") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Xuntos progresamos\nPrivacidade - Seguridade - Liberdade") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Saia #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Saia #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_he() { //! Safe GUI content - lang = he
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "בית\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] לא נמצא)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] לא נמצא)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] לא נמצא)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("גִרְסָה: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(לא מחובר)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(לא מחובר)" { network_label = format!("רשת המבחנים: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("רשת המבחנים: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "בִּטָחוֹן\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("רֶשֶׁת") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("רשת המבחנים") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("אבטחת משתמשים") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[התחברות]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"כניסה למפתח פרטי - נָכֶה\ntest test האם אתה מחובר כברירת מחדל!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[להתנתק]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"להתנתק - מושבת עבור testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("מכשיר מהימן = [כן]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("מכשיר מהימן = [לא (אבל כן!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("בַּעֲלוּת") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[מטבעות]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/info_balance", &timestamp); let result_location = format!("safe איזון\nתוֹצָאָה -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[מפתחות]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nתוֹצָאָה -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("תחומים") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[להשיג את שלך]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"שם דומיין חדש - safe nrs לִיצוֹר","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nתוֹצָאָה -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("הֶקשֵׁר") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[מיכל קבצים]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("מיכל קבצים = {}\n לשנות ל:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./הורדות/"); let filename = format!("./הורדות/userinput_filescontainer"); let result_location = format!("מיכל קבצים ציין ב: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "חוֹפֶשׁ\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("נתונים ציבוריים") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("להעלות ל הרשת הבטוחה") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("לא מזוהה") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[להעלות קובץ אחד]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"רשת בטוחה: נתונים ציבוריים - העלאת קובץ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files put\nתוֹצָאָה -> {}\nהעלה קובץ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[העלה קבצים]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"רשת בטוחה: נתונים ציבוריים - העלאת קבצים"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files put\nתוֹצָאָה -> {}\nהעלה {} קבצים =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files put\nתוֹצָאָה -> {}\nהעלה קובץ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[להעלות ספרייה]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"רשת בטוחה: נתונים ציבוריים - העלאת מדריך"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nתוֹצָאָה -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 מַדרִיך : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("העלה למיקום בבעלותך") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[להעלות קובץ אחד]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"רשת בטוחה: נתונים ציבוריים - להעלות קובץ אל מיכל קבצים"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nתוֹצָאָה -> {}\nהעלה קובץ ל {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 קוֹבֶץ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[העלה קבצים]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"רשת בטוחה: נתונים ציבוריים - קבצים שהועלו ל- מיכל קבצים"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nתוֹצָאָה -> {}\nהעלה {} קבצים ל {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} שֶׁל {} קבצים : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files put\nתוֹצָאָה -> {}\nהעלה קובץ ל {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 קוֹבֶץ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[להעלות ספרייה]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"רשת בטוחה: נתונים ציבוריים - העלאת מדריך ל מיכל קבצים"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nתוֹצָאָה -> {}\n❰Upload directory❱ ל {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 מַדרִיך : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("הורד מ הרשת הבטוחה") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// קוֹבֶץ]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"בטוח כתובת אתר","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/file", &timestamp); let result_location = format!("safe files sync\nתוֹצָאָה -> {}\nלקבל קוֹבֶץ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 קוֹבֶץ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// מַדרִיך]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"בטוח כתובת אתר","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nתוֹצָאָה -> {}\nלקבל מַדרִיך", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 מַדרִיך : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// קוֹבֶץ]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"בטוח xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/file", &timestamp); let result_location = format!("safe files sync\nתוֹצָאָה -> {}\nלקבל קוֹבֶץ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 קוֹבֶץ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// מַדרִיך]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"בטוח xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nתוֹצָאָה -> {}\nלקבל מַדרִיך", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 מַדרִיך : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "פְּרָטִיוּת\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("נתונים פרטיים") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "לַחקוֹר"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => הורד]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/file", &timestamp); let result_location = format!("safe cat\nתוֹצָאָה -> {}\nלקבל קוֹבֶץ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 שֶׁל 1 קוֹבֶץ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => מֵידָע]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nתוֹצָאָה -> {}\nלקבל מֵידָע", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => רשימה]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nתוֹצָאָה -> {}\nלקבל רשימה", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => עֵץ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nתוֹצָאָה -> {}\nלקבל עֵץ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "כלים"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[עדכן דומיין]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nתוֹצָאָה -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[מפתחות חדשים]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./הורדות/{}/", &timestamp); let filename = format!("./הורדות/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nתוֹצָאָה -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[עדכון]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[החלף]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"החלף רשת והפעל מחדש ידנית\nלשנות ל::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "יְצִיאָה"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("עזור לאחרים לגלות הרשת הבטוחה") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("ביחד אנחנו מתקדמים\nפְּרָטִיוּת - בִּטָחוֹן - חוֹפֶשׁ") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# לְהַפְסִיק #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# לְהַפְסִיק #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_hi() { //! Safe GUI content - lang = hi
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "घर\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] पता नहीं चला)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] पता नहीं चला)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] पता नहीं चला)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("संस्करण: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(जुड़े नहीं हैं)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(जुड़े नहीं हैं)" { network_label = format!("टेस्ट नेटवर्क: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("टेस्ट नेटवर्क: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "सुरक्षा\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("नेटवर्क") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("टेस्ट नेटवर्क") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("उपयोगकर्ता सुरक्षा") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[लॉग इन करें]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"निजी कुंजी लॉगऑन - विकलांग\nटेस्ट नेट क्या आपने डिफ़ॉल्ट रूप से लॉग इन किया है!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[लॉग आउट]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"लॉग आउट - टेस्टनेट के लिए अक्षम");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("विश्वसनीय उपकरण = [हां]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("विश्वसनीय उपकरण = [नहीं (लेकिन हाँ!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("स्वामित्व") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[सिक्के]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_balance", &timestamp); let result_location = format!("safe संतुलन\nनतीजा -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[चांबियाँ]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nनतीजा -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("डोमेन") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[तुम्हारा मिला]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"नया डोमेन नाम - safe nrs सर्जन करना","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nनतीजा -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("संदर्भ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[फ़ाइलें कंटेनर]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("फ़ाइलें कंटेनर = {}\n में बदलो:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./डाउनलोड/"); let filename = format!("./डाउनलोड/userinput_filescontainer"); let result_location = format!("फ़ाइलें कंटेनर में नोट किया गया: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "आजादी\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("सार्वजनिक डेटा") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("अपलोड करने के लिए सुरक्षित नेटवर्क") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("प्रमाणीकृत नहीं") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[एक फ़ाइल अपलोड करें]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फाइल अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nनतीजा -> {}\nफ़ाइल अपलोड करें =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[फाइल अपलोड करो]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फ़ाइलें अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nनतीजा -> {}\nडालना {} फ़ाइलें =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nनतीजा -> {}\nफ़ाइल अपलोड करें =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[निर्देशिका अपलोड करें]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - निर्देशिका अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nनतीजा -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 निर्देशिका : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("किसी स्वामित्व वाले स्थान पर अपलोड करें") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[एक फ़ाइल अपलोड करें]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फ़ाइल अपलोड करें फ़ाइलें कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nनतीजा -> {}\nफ़ाइल अपलोड करें प्रति {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 फ़ाइल : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[फाइल अपलोड करो]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फ़ाइलें अपलोड करें फ़ाइलें कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nनतीजा -> {}\nडालना {} फ़ाइलें प्रति {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} का {} फ़ाइलें : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nनतीजा -> {}\nफ़ाइल अपलोड करें प्रति {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 फ़ाइल : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[निर्देशिका अपलोड करें]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - निर्देशिका अपलोड करने के लिए फ़ाइलें कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nनतीजा -> {}\n❰Upload directory❱ प्रति {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 निर्देशिका : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("वहाँ से डाउनलोड सुरक्षित नेटवर्क") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// फ़ाइल]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित यूआरएल","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe files sync\nनतीजा -> {}\nपाना फ़ाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 फ़ाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// निर्देशिका]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित यूआरएल","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nनतीजा -> {}\nपाना निर्देशिका", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 निर्देशिका : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// फ़ाइल]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe files sync\nनतीजा -> {}\nपाना फ़ाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 फ़ाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// निर्देशिका]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nनतीजा -> {}\nपाना निर्देशिका", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 निर्देशिका : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "गोपनीयता\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("निजी डेटा") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "अन्वेषण करना"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => डाउनलोड]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe cat\nनतीजा -> {}\nपाना फ़ाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 का 1 फ़ाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => जानकारी]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nनतीजा -> {}\nपाना जानकारी", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => सूची]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nनतीजा -> {}\nपाना सूची", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => पेड़]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nनतीजा -> {}\nपाना पेड़", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "उपकरण"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[डोमेन अपडेट करें]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nनतीजा -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[नई चाबियां]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nनतीजा -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[अपडेट करें]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[स्विच]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"नेटवर्क स्विच करें और मैन्युअल रूप से पुनरारंभ करें\nमें बदलो::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "बाहर जाएं"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("दूसरों को खोजने में मदद करें सुरक्षित नेटवर्क") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("हम सब मिलकर तरक्की करें\nगोपनीयता - सुरक्षा - आजादी") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# छोड़ना #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# छोड़ना #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_hr() { //! Safe GUI content - lang = hr
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Dom\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nije pronađeno)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nije pronađeno)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nije pronađeno)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Verzija: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(nije povezano)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(nije povezano)" { network_label = format!("testna mreža: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testna mreža: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sigurnost\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Mreža") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testna mreža") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Sigurnost korisnika") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Prijaviti se]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Prijava privatnim ključem - onemogućeno\ntest net jeste li prijavljeni prema zadanim postavkama!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Odjavite se]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Odjavite se - onemogućen za testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Pouzdani uređaj = [Da]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Pouzdani uređaj = [Ne (ali da!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Vlasništvo") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Kovanice]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/info_balance", &timestamp); let result_location = format!("safe ravnotežu\nproizlaziti -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ključevi]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nproizlaziti -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domene") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[uzmi svoju]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"novi naziv domene - safe nrs stvoriti","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nproizlaziti -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontekst") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[spremnik datoteka]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Spremnik datoteka = {}\n promijeniti:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Preuzimanja/"); let filename = format!("./Preuzimanja/userinput_filescontainer"); let result_location = format!("Spremnik datoteka zabilježeno u: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Sloboda\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Javni Podaci") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Prenesi na sigurnu mrežu") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nije provjereno") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[učitati jednu datoteku]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sigurna mreža: Javni Podaci - učitavanje datoteke"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files put\nproizlaziti -> {}\nUčitaj datoteku =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Učitajte datoteke]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sigurna mreža: Javni Podaci - učitavanje datoteka"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files put\nproizlaziti -> {}\nUčitaj {} datoteke =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files put\nproizlaziti -> {}\nUčitaj datoteku =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[učitavanje direktorija]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sigurna mreža: Javni Podaci - učitavanje imenika"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nproizlaziti -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 imenik : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Prenesite na lokaciju u vlasništvu") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[učitati jednu datoteku]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Sigurna mreža: Javni Podaci - učitavanje datoteke u Spremnik datoteka"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nproizlaziti -> {}\nUčitaj datoteku do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 datoteka : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Učitajte datoteke]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Sigurna mreža: Javni Podaci - datoteke koje se učitavaju u Spremnik datoteka"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nproizlaziti -> {}\nUčitaj {} datoteke do {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} od {} datoteke : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files put\nproizlaziti -> {}\nUčitaj datoteku do {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 datoteka : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[učitavanje direktorija]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Sigurna mreža: Javni Podaci - učitavanje direktorija u Spremnik datoteka"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nproizlaziti -> {}\n❰Upload directory❱ do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 imenik : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Preuzmi s sigurnu mrežu") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// datoteka]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sef url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/file", &timestamp); let result_location = format!("safe files sync\nproizlaziti -> {}\ndobiti datoteka", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 datoteka : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// imenik]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sef url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nproizlaziti -> {}\ndobiti imenik", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 imenik : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// datoteka]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sef xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/file", &timestamp); let result_location = format!("safe files sync\nproizlaziti -> {}\ndobiti datoteka", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 datoteka : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// imenik]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sef xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nproizlaziti -> {}\ndobiti imenik", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 imenik : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privatnost\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privatni Podaci") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Istražiti"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => preuzimanje datoteka]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/file", &timestamp); let result_location = format!("safe cat\nproizlaziti -> {}\ndobiti datoteka", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 od 1 datoteka : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informacija]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nproizlaziti -> {}\ndobiti informacija", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => popis]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nproizlaziti -> {}\ndobiti popis", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => stablo]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nproizlaziti -> {}\ndobiti stablo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Alati"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ažurirati domenu]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nproizlaziti -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[novi ključevi]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Preuzimanja/{}/", &timestamp); let filename = format!("./Preuzimanja/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nproizlaziti -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[ažuriranje]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[sklopka]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Promijenite mrežu i ručno ponovo pokrenite\npromijeniti::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Izlaz"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Pomozite drugima da otkriju sigurnu mrežu") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Zajedno napredujemo\nPrivatnost - Sigurnost - Sloboda") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Prestati #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Prestati #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ht() { //! Safe GUI content - lang = ht
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Lakay\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] pa jwenn)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] pa jwenn)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] pa jwenn)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Vèsyon: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(pa konekte)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(pa konekte)" { network_label = format!("rezo tès la: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("rezo tès la: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sekirite\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Rezo") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("rezo tès la") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Sekirite Itilizatè") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Ouvri sesyon an]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Kle koneksyon prive - enfim\nnèt tès ou te louvri sesyon an pa default!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Dekonekte]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Dekonekte - enfim pou testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Aparèy ou fè konfyans = [Wi]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Aparèy ou fè konfyans = [Non (men wi!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Pwopriyetè") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Pyès monnen]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_balance", &timestamp); let result_location = format!("safe balans\nrezilta -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Repons]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nrezilta -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domèn") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[jwenn ou]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nouvo non domèn - safe nrs kreye","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nrezilta -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontèks") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[dosye veso]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Dosye veso = {}\n chanje an:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Downloads/"); let filename = format!("./Downloads/userinput_filescontainer"); let result_location = format!("Dosye veso te note nan: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Libète\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Done Piblik") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Voye sou Rezo a san danje") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Pa otantifye") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[Upload yon sèl dosye]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rezo ki an sekirite: Done Piblik - Upload dosye"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezilta -> {}\nUpload dosye =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Voye dosye]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rezo ki an sekirite: Done Piblik - dosye Upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezilta -> {}\nVoye {} dosye =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezilta -> {}\nUpload dosye =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[Upload anyè]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rezo ki an sekirite: Done Piblik - Upload anyè"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nrezilta -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 anyè : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Voye nan yon kote ki posede") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[Upload yon sèl dosye]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rezo ki an sekirite: Done Piblik - Upload dosye nan Dosye veso"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezilta -> {}\nUpload dosye a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 dosye : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Voye dosye]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rezo ki an sekirite: Done Piblik - dosye telechaje nan Dosye veso"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezilta -> {}\nVoye {} dosye a {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} nan {} dosye : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezilta -> {}\nUpload dosye a {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 dosye : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[Upload anyè]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rezo ki an sekirite: Done Piblik - anyè Upload nan Dosye veso"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nrezilta -> {}\n❰Upload directory❱ a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 anyè : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Download soti nan Rezo a san danje") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// dosye]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"san danje url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nrezilta -> {}\njwenn dosye", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 dosye : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// anyè]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"san danje url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezilta -> {}\njwenn anyè", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 anyè : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// dosye]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"san danje xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nrezilta -> {}\njwenn dosye", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 dosye : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// anyè]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"san danje xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezilta -> {}\njwenn anyè", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 anyè : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Konfidansyalite\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Done Prive") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Eksplore"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => telechaje]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe cat\nrezilta -> {}\njwenn dosye", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nan 1 dosye : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => enfòmasyon]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nrezilta -> {}\njwenn enfòmasyon", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lis]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nrezilta -> {}\njwenn lis", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => pyebwa]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nrezilta -> {}\njwenn pyebwa", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Zouti"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[aktyalizasyon domèn]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nrezilta -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nouvo kle]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nrezilta -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[mete ajou]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[chanje]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Chanje rezo ak rekòmanse manyèlman\nchanje an::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Sòti"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Ede lòt moun dekouvri Rezo a san danje") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Ansanm nou pwogrese\nKonfidansyalite - Sekirite - Libète") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Kite #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Kite #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_hu() { //! Safe GUI content - lang = hu
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "itthon\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nem található)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nem található)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nem található)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Változat: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(Nem kapcsolódik)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(Nem kapcsolódik)" { network_label = format!("teszt hálózat: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("teszt hálózat: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Biztonság\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Hálózat") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("teszt hálózat") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Felhasználói biztonság") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Belépés]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Privát kulcs bejelentkezés - Tiltva\nteszt net bejelentkezett alapértelmezés szerint!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Kijelentkezés]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Kijelentkezés - letiltva a teszthálózathoz");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Megbízható eszköz = [Igen]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Megbízható eszköz = [Nem (de igen!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Tulajdonjog") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Érmék]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/info_balance", &timestamp); let result_location = format!("safe egyensúly\neredmény -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Kulcsok]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\neredmény -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domainek") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[szerezd meg a tiedet]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"új domain név - safe nrs teremt","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\neredmény -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontextus") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[fájlok tárolója]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Fájlok tárolója = {}\n váltani:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Letöltések/"); let filename = format!("./Letöltések/userinput_filescontainer"); let result_location = format!("Fájlok tárolója -ban jegyezte meg: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Szabadság\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Nyilvános Adatok") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Feltöltés ide: a biztonságos hálózat") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nincs hitelesítve") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[tölts fel egy fájlt]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Biztonságos hálózat: Nyilvános Adatok - fájlfeltöltés"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files put\neredmény -> {}\nFájl feltöltés =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Fájlok feltöltése]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Biztonságos hálózat: Nyilvános Adatok - fájlok feltöltése"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files put\neredmény -> {}\nFeltöltés {} fájlokat =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files put\neredmény -> {}\nFájl feltöltés =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[könyvtár feltöltése]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Biztonságos hálózat: Nyilvános Adatok - könyvtár feltöltése"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\neredmény -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 Könyvtár : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Feltöltés egy saját helyre") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[tölts fel egy fájlt]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Biztonságos hálózat: Nyilvános Adatok - fájl feltöltése ide Fájlok tárolója"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files sync\neredmény -> {}\nFájl feltöltés nak nek {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 fájlt : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Fájlok feltöltése]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Biztonságos hálózat: Nyilvános Adatok - fájlok feltöltése ide Fájlok tárolója"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files sync\neredmény -> {}\nFeltöltés {} fájlokat nak nek {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} nak,-nek {} fájlokat : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files put\neredmény -> {}\nFájl feltöltés nak nek {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 fájlt : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[könyvtár feltöltése]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Biztonságos hálózat: Nyilvános Adatok - könyvtár feltöltése ide Fájlok tárolója"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\neredmény -> {}\n❰Upload directory❱ nak nek {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 Könyvtár : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Letöltés innen a biztonságos hálózat") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fájlt]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"biztonságos url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/file", &timestamp); let result_location = format!("safe files sync\neredmény -> {}\nkap fájlt", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 fájlt : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// Könyvtár]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"biztonságos url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\neredmény -> {}\nkap Könyvtár", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 Könyvtár : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fájlt]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"biztonságos xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/file", &timestamp); let result_location = format!("safe files sync\neredmény -> {}\nkap fájlt", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 fájlt : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// Könyvtár]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"biztonságos xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\neredmény -> {}\nkap Könyvtár", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 Könyvtár : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Magánélet\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privát Adatok") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Fedezd fel"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Letöltés]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/file", &timestamp); let result_location = format!("safe cat\neredmény -> {}\nkap fájlt", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 nak,-nek 1 fájlt : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => információ]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/info_metadata", &timestamp); let result_location = format!("safe dog\neredmény -> {}\nkap információ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/info_ls", &timestamp); let result_location = format!("safe files ls\neredmény -> {}\nkap lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => fa]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/info_tree", &timestamp); let result_location = format!("safe files tree\neredmény -> {}\nkap fa", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Eszközök"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[domain frissítése]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\neredmény -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[új kulcsok]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Letöltések/{}/", &timestamp); let filename = format!("./Letöltések/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\neredmény -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[frissítés]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[kapcsoló]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Hálózatváltás és manuális újraindítás\nváltani::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Kijárat"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Segíts másoknak felfedezni a biztonságos hálózat") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Együtt haladunk\nMagánélet - Biztonság - Szabadság") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Kilépés #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Kilépés #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_hy() { //! Safe GUI content - lang = hy
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "տուն\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] չի գտնվել)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] չի գտնվել)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] չի գտնվել)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Տարբերակ: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(միացված չէ)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(միացված չէ)" { network_label = format!("փորձարկման ցանց: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("փորձարկման ցանց: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Անվտանգություն\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Ցանց") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("փորձարկման ցանց") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Օգտվողի անվտանգություն") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Մուտք գործեք]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Անձնական բանալու մուտք - անաշխատունակ\ntest net- ը լռելյայն մուտք եք գործել:");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Դուրս եկեք]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Դուրս եկեք - անջատված է testnet- ի համար");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Վստահելի սարք = [Այո]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Վստահելի սարք = [Ոչ (բայց այո!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Սեփականության իրավունք") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Մետաղադրամներ]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/info_balance", &timestamp); let result_location = format!("safe հավասարակշռություն\nարդյունքը -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Բանալիներ]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nարդյունքը -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Տիրույթներ") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ձեռք բեր քոնը]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"նոր տիրույթի անուն - safe nrs ստեղծել","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nարդյունքը -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Համատեքստ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ֆայլերի կոնտեյներ]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Ֆայլերի բեռնարկղ = {}\n փոխել:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Ներլցումներ/"); let filename = format!("./Ներլցումներ/userinput_filescontainer"); let result_location = format!("Ֆայլերի բեռնարկղ նշվել է: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Ազատություն\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Հանրային տվյալներ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Վերբեռնել դեպի անվտանգ ցանց") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Չի վավերացված") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[վերբեռնեք մեկ ֆայլ]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Անվտանգ ցանց: Հանրային տվյալներ - ֆայլի վերբեռնում"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nարդյունքը -> {}\nՆերբեռնել ֆայլ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Վերբեռնեք ֆայլեր]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Անվտանգ ցանց: Հանրային տվյալներ - ֆայլերի վերբեռնում"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nարդյունքը -> {}\nՎերբեռնել {} ֆայլեր =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nարդյունքը -> {}\nՆերբեռնել ֆայլ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[բեռնել տեղեկատու]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Անվտանգ ցանց: Հանրային տվյալներ - գրացուցակի վերբեռնում"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nարդյունքը -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 տեղեկատու : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Վերբեռնել պատկանող վայր") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[վերբեռնեք մեկ ֆայլ]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Անվտանգ ցանց: Հանրային տվյալներ - ֆայլը վերբեռնել դեպի Ֆայլերի բեռնարկղ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nարդյունքը -> {}\nՆերբեռնել ֆայլ դեպի {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 ֆայլը : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Վերբեռնեք ֆայլեր]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Անվտանգ ցանց: Հանրային տվյալներ - ֆայլեր վերբեռնել Ֆայլերի բեռնարկղ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nարդյունքը -> {}\nՎերբեռնել {} ֆայլեր դեպի {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ի {} ֆայլեր : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nարդյունքը -> {}\nՆերբեռնել ֆայլ դեպի {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 ֆայլը : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[բեռնել տեղեկատու]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Անվտանգ ցանց: Հանրային տվյալներ - գրացուցակի վերբեռնում դեպի Ֆայլերի բեռնարկղ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nարդյունքը -> {}\n❰Upload directory❱ դեպի {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 տեղեկատու : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Ներբեռնել անվտանգ ցանց") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ֆայլը]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ապահով url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/file", &timestamp); let result_location = format!("safe files sync\nարդյունքը -> {}\nստանալ ֆայլը", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 ֆայլը : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// տեղեկատու]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ապահով url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nարդյունքը -> {}\nստանալ տեղեկատու", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 տեղեկատու : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ֆայլը]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ապահով xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/file", &timestamp); let result_location = format!("safe files sync\nարդյունքը -> {}\nստանալ ֆայլը", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 ֆայլը : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// տեղեկատու]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ապահով xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nարդյունքը -> {}\nստանալ տեղեկատու", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 տեղեկատու : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Գաղտնիություն\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Անձնական տվյալներ") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Ուսումնասիրել"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => բեռնել]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/file", &timestamp); let result_location = format!("safe cat\nարդյունքը -> {}\nստանալ ֆայլը", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ի 1 ֆայլը : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => տեղեկատվություն]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nարդյունքը -> {}\nստանալ տեղեկատվություն", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => ցուցակ]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nարդյունքը -> {}\nստանալ ցուցակ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ծառ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nարդյունքը -> {}\nստանալ ծառ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "գործիքներ"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[տիրույթի թարմացում]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nարդյունքը -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[նոր բանալիներ]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ներլցումներ/{}/", &timestamp); let filename = format!("./Ներլցումներ/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nարդյունքը -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[թարմացում]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[անջատիչ]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Փոխեք ցանցը և ձեռքով վերագործարկեք\nփոխել::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Ելք"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Օգնեք ուրիշներին բացահայտել անվտանգ ցանց") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Միասին մենք առաջ ենք գնում\nԳաղտնիություն - Անվտանգություն - Ազատություն") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Հեռացեք #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Հեռացեք #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_id() { //! Safe GUI content - lang = id
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Rumah\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] tidak ditemukan)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] tidak ditemukan)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] tidak ditemukan)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versi: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(Tidak terhubung)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(Tidak terhubung)" { network_label = format!("jaringan uji: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("jaringan uji: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Keamanan\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Jaringan") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("jaringan uji") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Keamanan Pengguna") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Gabung]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Kunci pribadi masuk - dengan disabilitas\ntest net apakah Anda sudah masuk secara default!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Keluar]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Keluar - dinonaktifkan untuk testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Perangkat Tepercaya = [Ya]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Perangkat Tepercaya = [Tidak (tapi ya!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Kepemilikan") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Koin]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/info_balance", &timestamp); let result_location = format!("safe keseimbangan\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Kunci]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domain") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[dapatkan milikmu]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nama domain baru - safe nrs membuat","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Konteks") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[wadah file]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Wadah File = {}\n mengubah:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Unduhan/"); let filename = format!("./Unduhan/userinput_filescontainer"); let result_location = format!("Wadah File dicatat dalam: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Kebebasan\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Data Publik") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Unggah ke Jaringan Aman") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Tidak Diautentikasi") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[unggah satu file]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Jaringan Aman: Data Publik - unggah file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nUnggah data =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Unggah berkas]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Jaringan Aman: Data Publik - unggah file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nMengunggah {} file =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nUnggah data =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[unggah direktori]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Jaringan Aman: Data Publik - unggah direktori"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nhasil -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 direktori : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Unggah ke lokasi yang dimiliki") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[unggah satu file]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Jaringan Aman: Data Publik - unggah file ke Wadah File"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nUnggah data ke {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 mengajukan : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Unggah berkas]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Jaringan Aman: Data Publik - file diunggah ke Wadah File"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nMengunggah {} file ke {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} dari {} file : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nUnggah data ke {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 mengajukan : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[unggah direktori]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Jaringan Aman: Data Publik - unggah direktori ke Wadah File"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\n❰Upload directory❱ ke {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 direktori : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Unduh dari Jaringan Aman") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// mengajukan]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"aman url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/file", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nDapatkan mengajukan", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 mengajukan : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// direktori]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"aman url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\nDapatkan direktori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 direktori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// mengajukan]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"aman xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/file", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nDapatkan mengajukan", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 mengajukan : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// direktori]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"aman xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\nDapatkan direktori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 direktori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Pribadi\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Data Pribadi") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Mengeksplorasi"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => unduh]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/file", &timestamp); let result_location = format!("safe cat\nhasil -> {}\nDapatkan mengajukan", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 dari 1 mengajukan : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informasi]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nhasil -> {}\nDapatkan informasi", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => Daftar]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nhasil -> {}\nDapatkan Daftar", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => pohon]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nhasil -> {}\nDapatkan pohon", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Peralatan"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[perbarui domain]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[kunci baru]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Unduhan/{}/", &timestamp); let filename = format!("./Unduhan/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[memperbarui]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[mengalihkan]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Beralih jaringan dan mulai ulang secara manual\nmengubah::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "keluar"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Bantu orang lain menemukan Jaringan Aman") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Bersama kita maju\nPribadi - Keamanan - Kebebasan") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Berhenti #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Berhenti #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_it() { //! Safe GUI content - lang = it
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Casa\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] non trovato)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] non trovato)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] non trovato)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versione: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(non collegato)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(non collegato)" { network_label = format!("rete di prova: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("rete di prova: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sicurezza\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Rete") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("rete di prova") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Sicurezza dellʼutente") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Accesso]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Accesso con chiave privata - Disabilitato\ntest net ti ha loggato per impostazione predefinita!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Disconnettersi]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Disconnettersi - disabilitato per testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispositivo affidabile = [sì]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispositivo affidabile = [No (ma si!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Proprietà") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monete]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/info_balance", &timestamp); let result_location = format!("safe bilancia\nrisultato -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[chiavi]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nrisultato -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domini") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[prendi il tuo]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nuovo nome di dominio - safe nrs creare","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nrisultato -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Contesto") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[contenitore di file]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Contenitore di file = {}\n cambia in:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Download/"); let filename = format!("./Download/userinput_filescontainer"); let result_location = format!("Contenitore di file annotato in: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Libertà\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Dati pubblici") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Carica su la rete sicura") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Non autenticato") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[carica un file]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rete sicura: Dati pubblici - upload di file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrisultato -> {}\nCaricare un file =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Caricare files]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rete sicura: Dati pubblici - caricamento file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrisultato -> {}\nCaricamento {} File =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrisultato -> {}\nCaricare un file =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[caricare la directory]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rete sicura: Dati pubblici - caricamento della directory"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nrisultato -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 directory : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Carica in una posizione di proprietà") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[carica un file]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rete sicura: Dati pubblici - caricamento file su Contenitore di file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrisultato -> {}\nCaricare un file a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Caricare files]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rete sicura: Dati pubblici - caricare i file su Contenitore di file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrisultato -> {}\nCaricamento {} File a {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} di {} File : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrisultato -> {}\nCaricare un file a {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[caricare la directory]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rete sicura: Dati pubblici - caricamento della directory in Contenitore di file"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nrisultato -> {}\n❰Upload directory❱ a {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 directory : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Scarica da la rete sicura") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// file]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicuro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/file", &timestamp); let result_location = format!("safe files sync\nrisultato -> {}\nottenere file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directory]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicuro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrisultato -> {}\nottenere directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// file]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicuro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/file", &timestamp); let result_location = format!("safe files sync\nrisultato -> {}\nottenere file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directory]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sicuro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrisultato -> {}\nottenere directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privacy\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Dati privati") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Esplorare"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Scarica]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/file", &timestamp); let result_location = format!("safe cat\nrisultato -> {}\nottenere file", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 di 1 file : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informazione]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nrisultato -> {}\nottenere informazione", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => elenco]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nrisultato -> {}\nottenere elenco", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => albero]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nrisultato -> {}\nottenere albero", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Utensili"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[aggiorna dominio]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nrisultato -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nuove chiavi]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Download/{}/", &timestamp); let filename = format!("./Download/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nrisultato -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[aggiornare]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[interruttore]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Cambia rete e riavvia manualmente\ncambia in::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Uscita"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Aiuta gli altri a scoprire la rete sicura") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Insieme andiamo avanti\nPrivacy - Sicurezza - Libertà") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Uscire #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Uscire #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ja() { //! Safe GUI content - lang = ja
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "家\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] 見つかりません)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] 見つかりません)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] 見つかりません)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("バージョン: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(接続されていません)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(接続されていません)" { network_label = format!("テストネットワーク: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("テストネットワーク: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "安全\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("通信網") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("テストネットワーク") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ユーザーセキュリティ") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[ログイン]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"秘密鍵ログオン - 無効\nテストネットはデフォルトでログインしています！");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[ログアウト]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ログアウト - テストネットでは無効");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("信頼できるデバイス = [はい]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("信頼できるデバイス = [いいえ（しかしはい！）]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("所有") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[コイン]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/info_balance", &timestamp); let result_location = format!("safe 残高\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[キー]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ドメイン") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[あなたのものを手に入れよう]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"新しいドメイン名 - safe nrs 作成","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("環境") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ファイルコンテナ]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ファイルコンテナ = {}\n への変更:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ダウンロード/"); let filename = format!("./ダウンロード/userinput_filescontainer"); let result_location = format!("ファイルコンテナ に記載されています: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "フリーダム\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("公開データ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("にアップロード 安全なネットワーク") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("認証されていません") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[1つのファイルをアップロードする]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全な通信網: 公開データ - ファイルのアップロード"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\nファイルをアップロードする =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ファイルをアップロードする]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全な通信網: 公開データ - ファイルのアップロード"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\nアップロード {} ファイル =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\nファイルをアップロードする =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[アップロードディレクトリ]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全な通信網: 公開データ - ディレクトリのアップロード"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\n結果 -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ディレクトリ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("所有する場所にアップロードする") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[1つのファイルをアップロードする]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全な通信網: 公開データ - ファイルのアップロード先 ファイルコンテナ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\nファイルをアップロードする に {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ファイル : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ファイルをアップロードする]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全な通信網: 公開データ - ファイルのアップロード先 ファイルコンテナ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\nアップロード {} ファイル に {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} の {} ファイル : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\nファイルをアップロードする に {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ファイル : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[アップロードディレクトリ]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全な通信網: 公開データ - ディレクトリのアップロード先 ファイルコンテナ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n❰Upload directory❱ に {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ディレクトリ : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("からダウンロード 安全なネットワーク") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ファイル]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全な url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/file", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n得る ファイル", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ファイル : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ディレクトリ]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全な url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n得る ディレクトリ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ディレクトリ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ファイル]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全な xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/file", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n得る ファイル", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ファイル : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ディレクトリ]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全な xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n得る ディレクトリ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ディレクトリ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "プライバシー\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("プライベートデータ") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "探検"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ダウンロード]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/file", &timestamp); let result_location = format!("safe cat\n結果 -> {}\n得る ファイル", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 の 1 ファイル : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => 情報]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/info_metadata", &timestamp); let result_location = format!("safe dog\n結果 -> {}\n得る 情報", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => リスト]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/info_ls", &timestamp); let result_location = format!("safe files ls\n結果 -> {}\n得る リスト", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => 木]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/info_tree", &timestamp); let result_location = format!("safe files tree\n結果 -> {}\n得る 木", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "ツール"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ドメインを更新する]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[新しいキー]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ダウンロード/{}/", &timestamp); let filename = format!("./ダウンロード/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[アップデート]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[スイッチ]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ネットワークを切り替えて手動で再起動します\nへの変更::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "出口"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("他の人が発見するのを手伝ってください 安全なネットワーク") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("一緒に進歩します\nプライバシー - 安全 - フリーダム") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# 終了する #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# 終了する #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_kn() { //! Safe GUI content - lang = kn
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "ಮನೆ\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ಸಿಕ್ಕಿಲ್ಲ)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ಸಿಕ್ಕಿಲ್ಲ)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ಸಿಕ್ಕಿಲ್ಲ)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("ಆವೃತ್ತಿ: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ಸಂಪರ್ಕವನ್ನು ಹೊಂದಿಲ್ಲ)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ಸಂಪರ್ಕವನ್ನು ಹೊಂದಿಲ್ಲ)" { network_label = format!("ಪರೀಕ್ಷಾ ಜಾಲ: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("ಪರೀಕ್ಷಾ ಜಾಲ: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "ಭದ್ರತೆ\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("ನೆಟ್ವರ್ಕ್") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("ಪರೀಕ್ಷಾ ಜಾಲ") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ಬಳಕೆದಾರ ಭದ್ರತೆ") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[ಲಾಗ್ ಇನ್ ಮಾಡಿ]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ಖಾಸಗಿ ಕೀ ಲಾಗಿನ್ - ಅಂಗವಿಕಲ\nಟೆಸ್ಟ್ ನೆಟ್ ನೀವು ಪೂರ್ವನಿಯೋಜಿತವಾಗಿ ಲಾಗ್ ಇನ್ ಆಗಿದ್ದೀರಿ!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[ಲಾಗ್ ಔಟ್]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ಲಾಗ್ ಔಟ್ - ಟೆಸ್ಟ್ನೆಟ್ಗಾಗಿ ನಿಷ್ಕ್ರಿಯಗೊಳಿಸಲಾಗಿದೆ");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("ವಿಶ್ವಾಸಾರ್ಹ ಸಾಧನ = [ಹೌದು]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("ವಿಶ್ವಾಸಾರ್ಹ ಸಾಧನ = [ಇಲ್ಲ (ಆದರೆ ಹೌದು!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ಮಾಲೀಕತ್ವ") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[ನಾಣ್ಯಗಳು]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/info_balance", &timestamp); let result_location = format!("safe ಸಮತೋಲನ\nಫಲಿತಾಂಶ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[ಕೀಲಿಗಳು]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nಫಲಿತಾಂಶ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ಡೊಮೇನ್‌ಗಳು") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ನಿಮ್ಮದನ್ನು ಪಡೆಯಿರಿ]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ಹೊಸ ಡೊಮೇನ್ ಹೆಸರು - safe nrs ರಚಿಸಿ","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nಫಲಿತಾಂಶ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("ಸನ್ನಿವೇಶ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ಫೈಲ್ ಕಂಟೇನರ್]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ಫೈಲ್ಸ್ ಕಂಟೇನರ್ = {}\n ಗೆ ಬದಲಿಸಿ:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/"); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/userinput_filescontainer"); let result_location = format!("ಫೈಲ್ಸ್ ಕಂಟೇನರ್ ನಲ್ಲಿ ಗಮನಿಸಲಾಗಿದೆ: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "ಸ್ವಾತಂತ್ರ್ಯ\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("ಸಾರ್ವಜನಿಕ ಡೇಟಾ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("ಗೆ ಅಪ್‌ಲೋಡ್ ಮಾಡಿ ಸುರಕ್ಷಿತ ಜಾಲ") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("ದೃ Notೀಕರಿಸಲಾಗಿಲ್ಲ") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ಒಂದು ಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಫೈಲ್ ಅಪ್ಲೋಡ್"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files put\nಫಲಿತಾಂಶ -> {}\nಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ಫೈಲ್‌ಗಳನ್ನು ಅಪ್‌ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಫೈಲ್‌ಗಳನ್ನು ಅಪ್‌ಲೋಡ್ ಮಾಡಿ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files put\nಫಲಿತಾಂಶ -> {}\nಅಪ್‌ಲೋಡ್ ಮಾಡಿ {} ಕಡತಗಳನ್ನು =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files put\nಫಲಿತಾಂಶ -> {}\nಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[ಡೈರೆಕ್ಟರಿಯನ್ನು ಅಪ್ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಡೈರೆಕ್ಟರಿ ಅಪ್ಲೋಡ್"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nಫಲಿತಾಂಶ -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಡೈರೆಕ್ಟರಿ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("ಒಡೆತನದ ಸ್ಥಳಕ್ಕೆ ಅಪ್‌ಲೋಡ್ ಮಾಡಿ") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ಒಂದು ಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಗೆ ಫೈಲ್ ಅಪ್ಲೋಡ್ ಫೈಲ್ಸ್ ಕಂಟೇನರ್"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nಫಲಿತಾಂಶ -> {}\nಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ ಗೆ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಫೈಲ್ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ಫೈಲ್‌ಗಳನ್ನು ಅಪ್‌ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಗೆ ಫೈಲ್‌ಗಳನ್ನು ಅಪ್‌ಲೋಡ್ ಮಾಡಿ ಫೈಲ್ಸ್ ಕಂಟೇನರ್"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nಫಲಿತಾಂಶ -> {}\nಅಪ್‌ಲೋಡ್ ಮಾಡಿ {} ಕಡತಗಳನ್ನು ಗೆ {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ನ {} ಕಡತಗಳನ್ನು : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files put\nಫಲಿತಾಂಶ -> {}\nಫೈಲ್ ಅಪ್ಲೋಡ್ ಮಾಡಿ ಗೆ {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಫೈಲ್ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[ಡೈರೆಕ್ಟರಿಯನ್ನು ಅಪ್ಲೋಡ್ ಮಾಡಿ]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"ಸುರಕ್ಷಿತ ನೆಟ್ವರ್ಕ್: ಸಾರ್ವಜನಿಕ ಡೇಟಾ - ಗೆ ಡೈರೆಕ್ಟರಿ ಅಪ್ಲೋಡ್ ಮಾಡಿ ಫೈಲ್ಸ್ ಕಂಟೇನರ್"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nಫಲಿತಾಂಶ -> {}\n❰Upload directory❱ ಗೆ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಡೈರೆಕ್ಟರಿ : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("ನಿಂದ ಡೌನ್‌ಲೋಡ್ ಮಾಡಿ ಸುರಕ್ಷಿತ ಜಾಲ") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ಫೈಲ್]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ಸುರಕ್ಷಿತ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/file", &timestamp); let result_location = format!("safe files sync\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಫೈಲ್", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಫೈಲ್ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ಡೈರೆಕ್ಟರಿ]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ಸುರಕ್ಷಿತ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಡೈರೆಕ್ಟರಿ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಡೈರೆಕ್ಟರಿ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ಫೈಲ್]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ಸುರಕ್ಷಿತ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/file", &timestamp); let result_location = format!("safe files sync\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಫೈಲ್", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಫೈಲ್ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ಡೈರೆಕ್ಟರಿ]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ಸುರಕ್ಷಿತ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಡೈರೆಕ್ಟರಿ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಡೈರೆಕ್ಟರಿ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "ಗೌಪ್ಯತೆ\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("ಖಾಸಗಿ ಡೇಟಾ") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "ಅನ್ವೇಷಿಸಿ"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ಡೌನ್ಲೋಡ್]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/file", &timestamp); let result_location = format!("safe cat\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಫೈಲ್", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ನ 1 ಫೈಲ್ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => ಮಾಹಿತಿ]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಮಾಹಿತಿ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => ಪಟ್ಟಿ]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಪಟ್ಟಿ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ಮರ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nಫಲಿತಾಂಶ -> {}\nಪಡೆಯಿರಿ ಮರ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "ಪರಿಕರಗಳು"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ಡೊಮೇನ್ ನವೀಕರಿಸಿ]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nಫಲಿತಾಂಶ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[ಹೊಸ ಕೀಲಿಗಳು]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/", &timestamp); let filename = format!("./ಡೌನ್ಲೋಡ್ಗಳು/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nಫಲಿತಾಂಶ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[ನವೀಕರಿಸಿ]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[ಸ್ವಿಚ್]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ನೆಟ್‌ವರ್ಕ್ ಬದಲಿಸಿ ಮತ್ತು ಹಸ್ತಚಾಲಿತವಾಗಿ ಮರುಪ್ರಾರಂಭಿಸಿ\nಗೆ ಬದಲಿಸಿ::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "ನಿರ್ಗಮಿಸಿ"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("ಇತರರನ್ನು ಕಂಡುಹಿಡಿಯಲು ಸಹಾಯ ಮಾಡಿ ಸುರಕ್ಷಿತ ಜಾಲ") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("ಒಟ್ಟಾಗಿ ನಾವು ಪ್ರಗತಿ ಹೊಂದುತ್ತೇವೆ\nಗೌಪ್ಯತೆ - ಭದ್ರತೆ - ಸ್ವಾತಂತ್ರ್ಯ") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# ಬಿಟ್ಟು #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# ಬಿಟ್ಟು #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ko() { //! Safe GUI content - lang = ko
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "집\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] 찾을 수 없음)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] 찾을 수 없음)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] 찾을 수 없음)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("버전: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(연결되지 않음)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(연결되지 않음)" { network_label = format!("테스트 네트워크: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("테스트 네트워크: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "보안\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("회로망") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("테스트 네트워크") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("사용자 보안") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[로그인]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"개인 키 로그온 - 장애가있는\ntest net은 기본적으로 로그인되어 있습니다!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[로그 아웃]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"로그 아웃 - 테스트넷에 대해 비활성화됨");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("신뢰할 수 있는 장치 = [예]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("신뢰할 수 있는 장치 = [아니요(하지만 예!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("소유권") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[동전]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/info_balance", &timestamp); let result_location = format!("safe 균형\n결과 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[열쇠]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\n결과 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("도메인") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[당신의 것을 얻으십시오]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"새 도메인 이름 - safe nrs 창조하다","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\n결과 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("문맥") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[파일 컨테이너]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("파일 컨테이너 = {}\n 로 변경:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./다운로드/"); let filename = format!("./다운로드/userinput_filescontainer"); let result_location = format!("파일 컨테이너 에 언급: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "자유\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("공개 데이터") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("업로드 안전한 네트워크") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("인증되지 않음") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[하나의 파일을 업로드]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"안전한 네트워크: 공개 데이터 - 파일 업로드"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files put\n결과 -> {}\n파일 업로드 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[파일 올리기]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"안전한 네트워크: 공개 데이터 - 파일 업로드"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files put\n결과 -> {}\n업로드 {} 파일 =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files put\n결과 -> {}\n파일 업로드 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[디렉토리 업로드]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"안전한 네트워크: 공개 데이터 - 디렉토리 업로드"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\n결과 -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 예배 규칙서 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("소유 위치에 업로드") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[하나의 파일을 업로드]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"안전한 네트워크: 공개 데이터 - 파일 업로드 파일 컨테이너"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n결과 -> {}\n파일 업로드 에게 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 파일 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[파일 올리기]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"안전한 네트워크: 공개 데이터 - 파일 업로드 파일 컨테이너"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n결과 -> {}\n업로드 {} 파일 에게 {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} NS {} 파일 : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files put\n결과 -> {}\n파일 업로드 에게 {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 파일 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[디렉토리 업로드]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"안전한 네트워크: 공개 데이터 - 디렉토리 업로드 파일 컨테이너"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\n결과 -> {}\n❰Upload directory❱ 에게 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 예배 규칙서 : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("에서 다운로드 안전한 네트워크") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// 파일]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"안전한 url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/file", &timestamp); let result_location = format!("safe files sync\n결과 -> {}\n가져 오기 파일", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 파일 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// 예배 규칙서]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"안전한 url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n결과 -> {}\n가져 오기 예배 규칙서", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 예배 규칙서 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 파일]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"안전한 크소르",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/file", &timestamp); let result_location = format!("safe files sync\n결과 -> {}\n가져 오기 파일", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 파일 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 예배 규칙서]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"안전한 크소르",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n결과 -> {}\n가져 오기 예배 규칙서", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 예배 규칙서 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "은둔\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("개인 데이터") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "탐구하다"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => 다운로드]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/file", &timestamp); let result_location = format!("safe cat\n결과 -> {}\n가져 오기 파일", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 NS 1 파일 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => 정보]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/info_metadata", &timestamp); let result_location = format!("safe dog\n결과 -> {}\n가져 오기 정보", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => 목록]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/info_ls", &timestamp); let result_location = format!("safe files ls\n결과 -> {}\n가져 오기 목록", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => 나무]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/info_tree", &timestamp); let result_location = format!("safe files tree\n결과 -> {}\n가져 오기 나무", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "도구"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[도메인 업데이트]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\n결과 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[새 키]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./다운로드/{}/", &timestamp); let filename = format!("./다운로드/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\n결과 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[업데이트]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[스위치]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"네트워크를 전환하고 수동으로 다시 시작\n로 변경::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "출구"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("다른 사람들이 발견하도록 도와주세요 안전한 네트워크") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("함께 진행합니다\n은둔 - 보안 - 자유") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# 그만두 다 #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# 그만두 다 #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ku() { //! Safe GUI content - lang = ku
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Xane\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] peyda nebû)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] peyda nebû)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] peyda nebû)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Awa: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ne girêdayî ye)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ne girêdayî ye)" { network_label = format!("test network: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("test network: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Ewlekarî\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Network") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("test network") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Ewlekariya Bikarhêner") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Têkeve]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Têketina Mifteya Taybet - bêmecel\ntest net tu bixweber têketî yî!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Derkeve]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Derkeve - ji bo testnet neçalak e");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Device Trusted = [Erê]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Device Trusted = [Na (lê belê erê!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Hebûnî") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Coins]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/info_balance", &timestamp); let result_location = format!("safe bîlanço\nnetîce -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Keys]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nnetîce -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domains") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ya xwe bistînin]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"domain name nû - safe nrs xûliqandin","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nnetîce -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Hevgirêk") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[konteynir pelên]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Pelên Konteynirê = {}\n biguherîne:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Daxistin/"); let filename = format!("./Daxistin/userinput_filescontainer"); let result_location = format!("Pelên Konteynirê de tê zanîn: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Azadî\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Daneyên Giştî") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Upload to Tora Ewle") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ne Rasthatî ye") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[yek pele bar bike]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Tora Ewle: Daneyên Giştî - barkirina pelê"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files put\nnetîce -> {}\nPelê bar bike =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Pelan bar bikin]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Tora Ewle: Daneyên Giştî - barkirina pelan"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files put\nnetîce -> {}\nUpload {} pelan =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files put\nnetîce -> {}\nPelê bar bike =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[pelrêça barkirin]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Tora Ewle: Daneyên Giştî - barkirina peldankê"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nnetîce -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 directory : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Li cîhek xwedan barkirin") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[yek pele bar bike]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Tora Ewle: Daneyên Giştî - barkirina pelê li Pelên Konteynirê"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nnetîce -> {}\nPelê bar bike ber {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 dosî : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Pelan bar bikin]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Tora Ewle: Daneyên Giştî - pelên xwe barkirin Pelên Konteynirê"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nnetîce -> {}\nUpload {} pelan ber {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ji {} pelan : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files put\nnetîce -> {}\nPelê bar bike ber {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 dosî : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[pelrêça barkirin]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Tora Ewle: Daneyên Giştî - peldanka barkirin li Pelên Konteynirê"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nnetîce -> {}\n❰Upload directory❱ ber {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 directory : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Download from Tora Ewle") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// dosî]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"emîn url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/file", &timestamp); let result_location = format!("safe files sync\nnetîce -> {}\nstendin dosî", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 dosî : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// directory]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"emîn url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nnetîce -> {}\nstendin directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// dosî]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"emîn xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/file", &timestamp); let result_location = format!("safe files sync\nnetîce -> {}\nstendin dosî", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 dosî : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// directory]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"emîn xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nnetîce -> {}\nstendin directory", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 directory : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Taybetî\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Daneyên Taybet") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Lêkolîn"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => download]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/file", &timestamp); let result_location = format!("safe cat\nnetîce -> {}\nstendin dosî", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ji 1 dosî : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => agahî]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nnetîce -> {}\nstendin agahî", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => rêzok]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nnetîce -> {}\nstendin rêzok", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => dar]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nnetîce -> {}\nstendin dar", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Amûr"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[domainê nûve bikin]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nnetîce -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[kilîtên nû]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Daxistin/{}/", &timestamp); let filename = format!("./Daxistin/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nnetîce -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[rojanekirin]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[gûherr]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Torê biguhezînin û bi destan ji nû ve bidin dest pê kirin\nbiguherîne::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Derî"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Alîkariya kesên din bikin ku kifş bikin Tora Ewle") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Bi hev re em pêşve diçin\nTaybetî - Ewlekarî - Azadî") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Devjêberdan #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Devjêberdan #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_lt() { //! Safe GUI content - lang = lt
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Namai\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nerastas)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nerastas)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nerastas)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versija: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(neprisijungęs)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(neprisijungęs)" { network_label = format!("bandomasis tinklas: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("bandomasis tinklas: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Saugumas\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Tinklas") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("bandomasis tinklas") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Vartotojo saugumas") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Prisijungti]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Prisijungimas prie privataus rakto - neįgalus\ntest neto esate prisijungęs pagal numatytuosius nustatymus!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Atsijungti]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Atsijungti - išjungtas dėl bandomojo tinklo");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Patikimas įrenginys = [Taip]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Patikimas įrenginys = [Ne (bet taip!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Nuosavybė") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monetos]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/info_balance", &timestamp); let result_location = format!("safe pusiausvyra\nrezultatas -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Raktai]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nrezultatas -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domenai") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[gauk savo]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"naujas domeno vardas - safe nrs sukurti","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nrezultatas -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontekstas") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[failų talpykla]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Failų talpykla = {}\n pakeisti į:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Atsisiuntimai/"); let filename = format!("./Atsisiuntimai/userinput_filescontainer"); let result_location = format!("Failų talpykla pažymėta: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Laisvė\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Viešieji Duomenys") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Įkelti į saugų tinklą") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nepatvirtinta") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[įkelti vieną failą]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Saugus tinklas: Viešieji Duomenys - Failo ikelimas"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultatas -> {}\nĮkelti failą =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Įkelti failus]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Saugus tinklas: Viešieji Duomenys - įkelti failus"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultatas -> {}\nĮkelti {} failus =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultatas -> {}\nĮkelti failą =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[įkelti katalogą]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Saugus tinklas: Viešieji Duomenys - įkelti katalogą"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nrezultatas -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 katalogą : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Įkelti į turimą vietą") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[įkelti vieną failą]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Saugus tinklas: Viešieji Duomenys - įkelti failą į Failų talpykla"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezultatas -> {}\nĮkelti failą į {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 failą : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Įkelti failus]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Saugus tinklas: Viešieji Duomenys - failus įkelti į Failų talpykla"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezultatas -> {}\nĮkelti {} failus į {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} apie {} failus : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultatas -> {}\nĮkelti failą į {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 failą : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[įkelti katalogą]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Saugus tinklas: Viešieji Duomenys - katalogą įkelti į Failų talpykla"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nrezultatas -> {}\n❰Upload directory❱ į {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 katalogą : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Atsisiųsti iš saugų tinklą") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// failą]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"saugus url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/file", &timestamp); let result_location = format!("safe files sync\nrezultatas -> {}\ngauti failą", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 failą : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// katalogą]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"saugus url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezultatas -> {}\ngauti katalogą", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 katalogą : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// failą]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"saugus xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/file", &timestamp); let result_location = format!("safe files sync\nrezultatas -> {}\ngauti failą", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 failą : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// katalogą]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"saugus xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezultatas -> {}\ngauti katalogą", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 katalogą : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privatumas\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privatūs Duomenys") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Naršyti"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => parsisiųsti]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/file", &timestamp); let result_location = format!("safe cat\nrezultatas -> {}\ngauti failą", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 apie 1 failą : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informacija]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nrezultatas -> {}\ngauti informacija", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => sąrašą]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nrezultatas -> {}\ngauti sąrašą", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => medis]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nrezultatas -> {}\ngauti medis", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Įrankiai"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[atnaujinti domeną]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nrezultatas -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nauji raktai]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Atsisiuntimai/{}/", &timestamp); let filename = format!("./Atsisiuntimai/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nrezultatas -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[atnaujinti]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[jungiklis]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Perjunkite tinklą ir paleiskite rankiniu būdu iš naujo\npakeisti į::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Išeiti"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Padėkite kitiems atrasti saugų tinklą") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Kartu mes progresuojame\nPrivatumas - Saugumas - Laisvė") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Išeiti #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Išeiti #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ml() { //! Safe GUI content - lang = ml
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "വീട്\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] കണ്ടെത്തിയില്ല)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] കണ്ടെത്തിയില്ല)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] കണ്ടെത്തിയില്ല)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("പതിപ്പ്: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ബന്ധിപ്പിച്ചിട്ടില്ല)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ബന്ധിപ്പിച്ചിട്ടില്ല)" { network_label = format!("ടെസ്റ്റ് നെറ്റ്‌വർക്ക്: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("ടെസ്റ്റ് നെറ്റ്‌വർക്ക്: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "സുരക്ഷ\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("നെറ്റ്‌വർക്ക്") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("ടെസ്റ്റ് നെറ്റ്‌വർക്ക്") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ഉപയോക്തൃ സുരക്ഷ") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[ലോഗിൻ]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"സ്വകാര്യ കീ ലോഗോൺ - അപ്രാപ്തമാക്കി\nടെസ്റ്റ് നെറ്റ് നിങ്ങൾ സ്വതവേ ലോഗിൻ ചെയ്തിരിക്കുന്നു!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[ലോഗ് ട്ട് ചെയ്യുക]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ലോഗ് ട്ട് ചെയ്യുക - ടെസ്റ്റ്നെറ്റിനായി അപ്രാപ്തമാക്കി");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("വിശ്വസനീയമായ ഉപകരണം = [അതെ]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("വിശ്വസനീയമായ ഉപകരണം = [ഇല്ല (പക്ഷേ അതെ!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ഉടമസ്ഥാവകാശം") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[നാണയങ്ങൾ]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/info_balance", &timestamp); let result_location = format!("safe ബാലൻസ്\nഫലമായി -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[കീകൾ]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nഫലമായി -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ഡൊമെയ്‌നുകൾ") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[നിങ്ങളുടേത് നേടുക]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"പുതിയ ഡൊമെയ്ൻ നാമം - safe nrs സൃഷ്ടിക്കാൻ","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nഫലമായി -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("സന്ദർഭം") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ഫയലുകൾ കണ്ടെയ്നർ]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ഫയലുകൾ കണ്ടെയ്നർ = {}\n മാറ്റുക:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ഡൗൺലോഡുകൾ/"); let filename = format!("./ഡൗൺലോഡുകൾ/userinput_filescontainer"); let result_location = format!("ഫയലുകൾ കണ്ടെയ്നർ ൽ രേഖപ്പെടുത്തിയിട്ടുണ്ട്: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "സ്വാതന്ത്ര്യം\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("പൊതു ഡാറ്റ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("ലേക്ക് അപ്‌ലോഡ് ചെയ്യുക സുരക്ഷിത നെറ്റ്‌വർക്ക്") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("ആധികാരികമല്ല") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ഒരു ഫയൽ അപ്‌ലോഡ് ചെയ്യുക]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ഫയൽ അപ്ലോഡ്"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nഫലമായി -> {}\nഫയൽ അപ്ലോഡ് ചെയ്യുക =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ഫയലുകൾ അപ്ലോഡ് ചെയ്യുക]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ഫയലുകൾ അപ്‌ലോഡ് ചെയ്യുന്നു"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nഫലമായി -> {}\nഅപ്‌ലോഡ് ചെയ്യുക {} ഫയലുകൾ =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nഫലമായി -> {}\nഫയൽ അപ്ലോഡ് ചെയ്യുക =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[ഡയറക്‌ടറി അപ്‌ലോഡ് ചെയ്യുക]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ഡയറക്ടറി അപ്ലോഡ്"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nഫലമായി -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഡയറക്ടറി : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("ഒരു ഉടമസ്ഥതയിലുള്ള സ്ഥലത്തേക്ക് അപ്‌ലോഡ് ചെയ്യുക") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ഒരു ഫയൽ അപ്‌ലോഡ് ചെയ്യുക]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ലേക്ക് ഫയൽ അപ്ലോഡ് ചെയ്യുക ഫയലുകൾ കണ്ടെയ്നർ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nഫലമായി -> {}\nഫയൽ അപ്ലോഡ് ചെയ്യുക വരെ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഫയൽ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ഫയലുകൾ അപ്ലോഡ് ചെയ്യുക]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ഫയലുകൾ അപ്‌ലോഡ് ചെയ്യുന്നു ഫയലുകൾ കണ്ടെയ്നർ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nഫലമായി -> {}\nഅപ്‌ലോഡ് ചെയ്യുക {} ഫയലുകൾ വരെ {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} യുടെ {} ഫയലുകൾ : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nഫലമായി -> {}\nഫയൽ അപ്ലോഡ് ചെയ്യുക വരെ {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഫയൽ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[ഡയറക്‌ടറി അപ്‌ലോഡ് ചെയ്യുക]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"സുരക്ഷിത നെറ്റ്‌വർക്ക്: പൊതു ഡാറ്റ - ഡയറക്ടറി അപ്‌ലോഡ് ചെയ്യുക ഫയലുകൾ കണ്ടെയ്നർ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nഫലമായി -> {}\n❰Upload directory❱ വരെ {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഡയറക്ടറി : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("നിന്നും ഡൗൺലോഡ് ചെയ്യുക സുരക്ഷിത നെറ്റ്‌വർക്ക്") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ഫയൽ]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"സുരക്ഷിതം url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/file", &timestamp); let result_location = format!("safe files sync\nഫലമായി -> {}\nനേടുക ഫയൽ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഫയൽ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ഡയറക്ടറി]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"സുരക്ഷിതം url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nഫലമായി -> {}\nനേടുക ഡയറക്ടറി", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഡയറക്ടറി : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ഫയൽ]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"സുരക്ഷിതം xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/file", &timestamp); let result_location = format!("safe files sync\nഫലമായി -> {}\nനേടുക ഫയൽ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഫയൽ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ഡയറക്ടറി]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"സുരക്ഷിതം xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nഫലമായി -> {}\nനേടുക ഡയറക്ടറി", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഡയറക്ടറി : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "സ്വകാര്യത\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("സ്വകാര്യ ഡാറ്റ") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "പര്യവേക്ഷണം ചെയ്യുക"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ഡൗൺലോഡ്]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/file", &timestamp); let result_location = format!("safe cat\nഫലമായി -> {}\nനേടുക ഫയൽ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 യുടെ 1 ഫയൽ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => വിവരങ്ങൾ]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nഫലമായി -> {}\nനേടുക വിവരങ്ങൾ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => പട്ടിക]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nഫലമായി -> {}\nനേടുക പട്ടിക", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => വൃക്ഷം]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nഫലമായി -> {}\nനേടുക വൃക്ഷം", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "ഉപകരണങ്ങൾ"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ഡൊമെയ്ൻ അപ്ഡേറ്റ് ചെയ്യുക]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nഫലമായി -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[പുതിയ കീകൾ]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ഡൗൺലോഡുകൾ/{}/", &timestamp); let filename = format!("./ഡൗൺലോഡുകൾ/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nഫലമായി -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[അപ്ഡേറ്റ് ചെയ്യുക]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[സ്വിച്ച്]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"നെറ്റ്‌വർക്ക് മാറ്റി സ്വമേധയാ പുനരാരംഭിക്കുക\nമാറ്റുക::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "പുറത്ത്"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("കണ്ടെത്താൻ മറ്റുള്ളവരെ സഹായിക്കുക സുരക്ഷിത നെറ്റ്‌വർക്ക്") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("ഞങ്ങൾ ഒരുമിച്ച് പുരോഗമിക്കുന്നു\nസ്വകാര്യത - സുരക്ഷ - സ്വാതന്ത്ര്യം") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# ഉപേക്ഷിക്കുക #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# ഉപേക്ഷിക്കുക #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_mr() { //! Safe GUI content - lang = mr
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "मुख्यपृष्ठ\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] सापडले नाही)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] सापडले नाही)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] सापडले नाही)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("आवृत्ती: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(कनेक्ट केलेले नाही)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(कनेक्ट केलेले नाही)" { network_label = format!("चाचणी नेटवर्क: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("चाचणी नेटवर्क: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "सुरक्षा\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("नेटवर्क") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("चाचणी नेटवर्क") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("वापरकर्ता सुरक्षा") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[लॉग इन करा]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"खाजगी की लॉगऑन - अक्षम\nचाचणी नेट आपण डीफॉल्टनुसार लॉग इन केले आहे!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[बाहेर पडणे]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"बाहेर पडणे - टेस्टनेटसाठी अक्षम");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("विश्वसनीय डिव्हाइस = [होय]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("विश्वसनीय डिव्हाइस = [नाही (पण हो!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("मालकी") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[नाणी]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_balance", &timestamp); let result_location = format!("safe शिल्लक\nपरिणाम -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[कळा]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nपरिणाम -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("डोमेन") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[तुमचे मिळवा]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"नवीन डोमेन नाव - safe nrs तयार करा","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nपरिणाम -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("संदर्भ") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[फायली कंटेनर]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("फायली कंटेनर = {}\n बदल:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./डाउनलोड/"); let filename = format!("./डाउनलोड/userinput_filescontainer"); let result_location = format!("फायली कंटेनर मध्ये नोंदवले: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "स्वातंत्र्य\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("सार्वजनिक डेटा") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("वर अपलोड करा सुरक्षित नेटवर्क") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("प्रमाणीकृत नाही") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[एक फाइल अपलोड करा]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फाइल अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nपरिणाम -> {}\nअपलोड फाइल =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[फायली अपलोड करा]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फायली अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nपरिणाम -> {}\nअपलोड करा {} फायली =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nपरिणाम -> {}\nअपलोड फाइल =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[अपलोड निर्देशिका]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - निर्देशिका अपलोड"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nपरिणाम -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 निर्देशिका : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("मालकीच्या ठिकाणी अपलोड करा") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[एक फाइल अपलोड करा]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फाइल अपलोड करा फायली कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nपरिणाम -> {}\nअपलोड फाइल ला {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 फाइल : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[फायली अपलोड करा]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - फाइल अपलोड करा फायली कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nपरिणाम -> {}\nअपलोड करा {} फायली ला {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} च्या {} फायली : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files put\nपरिणाम -> {}\nअपलोड फाइल ला {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 फाइल : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[अपलोड निर्देशिका]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"सुरक्षित नेटवर्क: सार्वजनिक डेटा - निर्देशिका अपलोड करा फायली कंटेनर"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nपरिणाम -> {}\n❰Upload directory❱ ला {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 निर्देशिका : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("कडून डाउनलोड करा सुरक्षित नेटवर्क") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// फाइल]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe files sync\nपरिणाम -> {}\nमिळवा फाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 फाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// निर्देशिका]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nपरिणाम -> {}\nमिळवा निर्देशिका", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 निर्देशिका : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// फाइल]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe files sync\nपरिणाम -> {}\nमिळवा फाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 फाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// निर्देशिका]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"सुरक्षित xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nपरिणाम -> {}\nमिळवा निर्देशिका", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 निर्देशिका : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "गोपनीयता\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("खाजगी डेटा") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "अन्वेषण"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => डाउनलोड करा]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/file", &timestamp); let result_location = format!("safe cat\nपरिणाम -> {}\nमिळवा फाइल", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 च्या 1 फाइल : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => माहिती]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nपरिणाम -> {}\nमिळवा माहिती", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => यादी]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nपरिणाम -> {}\nमिळवा यादी", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => झाड]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nपरिणाम -> {}\nमिळवा झाड", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "साधने"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[डोमेन अपडेट करा]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nपरिणाम -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[नवीन की]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./डाउनलोड/{}/", &timestamp); let filename = format!("./डाउनलोड/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nपरिणाम -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[अद्यतन]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[स्विच]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"नेटवर्क स्विच करा आणि मॅन्युअली रीस्टार्ट करा\nबदल::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "बाहेर पडा"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("इतरांना शोधण्यात मदत करा सुरक्षित नेटवर्क") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("एकत्र आपण प्रगती करतो\nगोपनीयता - सुरक्षा - स्वातंत्र्य") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# सोडा #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# सोडा #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ms() { //! Safe GUI content - lang = ms
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Rumah\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] tidak ditemui)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] tidak ditemui)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] tidak ditemui)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versi: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(tidak bersambung)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(tidak bersambung)" { network_label = format!("rangkaian ujian: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("rangkaian ujian: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Keselamatan\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Rangkaian") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("rangkaian ujian") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Keselamatan Pengguna") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Log masuk]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Log masuk Kunci Peribadi - kurang upaya\njaring ujian telahkah anda log masuk secara lalai!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Log keluar]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Log keluar - dilumpuhkan untuk testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Peranti yang Dipercayai = [Ya]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Peranti yang Dipercayai = [Tidak (tapi ya!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Pemilikan") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Duit syiling]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/info_balance", &timestamp); let result_location = format!("safe seimbang\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Kekunci]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domain") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[dapatkan milik anda]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nama domain baru - safe nrs buat","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Konteks") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[bekas fail]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Bekas Fail = {}\n bertukar kepada:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Muat turun/"); let filename = format!("./Muat turun/userinput_filescontainer"); let result_location = format!("Bekas Fail dicatat dalam: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Kebebasan\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Data Awam") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Muat naik ke Rangkaian Selamat") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Tidak Disahkan") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[muat naik satu fail]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rangkaian Selamat: Data Awam - fail dimuatnaik"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nMuat naik fail =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Memuat naik fail]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rangkaian Selamat: Data Awam - muat naik fail"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nMuat naik {} fail =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nMuat naik fail =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[muat naik direktori]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rangkaian Selamat: Data Awam - muat naik direktori"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nhasil -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 direktori : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Muat naik ke lokasi yang dimiliki") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[muat naik satu fail]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rangkaian Selamat: Data Awam - muat naik fail ke Bekas Fail"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nMuat naik fail ke {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 fail : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Memuat naik fail]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rangkaian Selamat: Data Awam - fail dimuat naik ke Bekas Fail"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\nMuat naik {} fail ke {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} daripada {} fail : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files put\nhasil -> {}\nMuat naik fail ke {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 fail : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[muat naik direktori]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rangkaian Selamat: Data Awam - muat naik direktori ke Bekas Fail"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\n❰Upload directory❱ ke {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 direktori : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Muat turun dari Rangkaian Selamat") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fail]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"selamat url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/file", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\ndapatkan fail", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 fail : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// direktori]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"selamat url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\ndapatkan direktori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 direktori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fail]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"selamat xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/file", &timestamp); let result_location = format!("safe files sync\nhasil -> {}\ndapatkan fail", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 fail : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// direktori]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"selamat xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nhasil -> {}\ndapatkan direktori", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 direktori : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privasi\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Data Peribadi") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Meneroka"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => muat turun]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/file", &timestamp); let result_location = format!("safe cat\nhasil -> {}\ndapatkan fail", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 daripada 1 fail : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => maklumat]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nhasil -> {}\ndapatkan maklumat", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => senarai]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nhasil -> {}\ndapatkan senarai", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => pokok]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nhasil -> {}\ndapatkan pokok", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Alat"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[kemas kini domain]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[kunci baru]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Muat turun/{}/", &timestamp); let filename = format!("./Muat turun/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nhasil -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[kemas kini]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[beralih]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Tukar rangkaian dan mulakan semula secara manual\nbertukar kepada::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Keluar"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Bantu orang lain menemui Rangkaian Selamat") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Bersama kita maju\nPrivasi - Keselamatan - Kebebasan") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Berhenti #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Berhenti #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_nl() { //! Safe GUI content - lang = nl
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Huis\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] niet gevonden)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] niet gevonden)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] niet gevonden)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versie: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(niet verbonden)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(niet verbonden)" { network_label = format!("testnetwerk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testnetwerk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Veiligheid\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Netwerk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testnetwerk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Gebruikersbeveiliging") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Log in]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Aanmelden met privésleutel - gehandicapt\ntest net heeft u standaard ingelogd!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Uitloggen]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Uitloggen - uitgeschakeld voor testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Vertrouwd apparaat = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Vertrouwd apparaat = [Nee (maar ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Eigendom") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[munten]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_balance", &timestamp); let result_location = format!("safe evenwicht\nresultaat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Sleutels]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultaat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domeinen") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[pak je eigen]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nieuwe domeinnaam - safe nrs creëren","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultaat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Context") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[bestanden container]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Bestandscontainer = {}\n veranderen naar:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Downloads/"); let filename = format!("./Downloads/userinput_filescontainer"); let result_location = format!("Bestandscontainer genoteerd in: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Vrijheid\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Openbare Gegevens") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Uploaden naar het veilige netwerk") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Niet geverifieerd") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[upload één bestand]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Veilig netwerk: Openbare Gegevens - bestand upload"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultaat -> {}\nUpload bestand =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Upload bestanden]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Veilig netwerk: Openbare Gegevens - bestanden uploaden"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultaat -> {}\nUploaden {} bestanden =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultaat -> {}\nUpload bestand =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[map uploaden]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Veilig netwerk: Openbare Gegevens - map uploaden"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultaat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 map : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Uploaden naar een eigendomslocatie") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[upload één bestand]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Veilig netwerk: Openbare Gegevens - bestand uploaden naar Bestandscontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultaat -> {}\nUpload bestand tot {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 het dossier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Upload bestanden]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Veilig netwerk: Openbare Gegevens - bestanden uploaden naar Bestandscontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultaat -> {}\nUploaden {} bestanden tot {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} van {} bestanden : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultaat -> {}\nUpload bestand tot {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 het dossier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[map uploaden]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Veilig netwerk: Openbare Gegevens - map uploaden naar Bestandscontainer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultaat -> {}\n❰Upload directory❱ tot {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 map : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Downloaden van het veilige netwerk") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// het dossier]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresultaat -> {}\nkrijgen het dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 het dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// map]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultaat -> {}\nkrijgen map", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 map : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// het dossier]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe files sync\nresultaat -> {}\nkrijgen het dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 het dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// map]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"veilig xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultaat -> {}\nkrijgen map", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 map : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privacy\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privégegevens") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Ontdekken"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => downloaden]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/file", &timestamp); let result_location = format!("safe cat\nresultaat -> {}\nkrijgen het dossier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 van 1 het dossier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informatie]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultaat -> {}\nkrijgen informatie", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lijst]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultaat -> {}\nkrijgen lijst", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => boom]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultaat -> {}\nkrijgen boom", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Gereedschap"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[domein bijwerken]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultaat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nieuwe sleutels]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Downloads/{}/", &timestamp); let filename = format!("./Downloads/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultaat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[update]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[schakelaar]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Van netwerk wisselen en handmatig opnieuw opstarten\nveranderen naar::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Uitgang"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Help anderen ontdekken het veilige netwerk") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Samen komen we verder\nPrivacy - Veiligheid - Vrijheid") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Ontslag nemen #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Ontslag nemen #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_no() { //! Safe GUI content - lang = no
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Hjem\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ikke funnet)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ikke funnet)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ikke funnet)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versjon: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ikke tilkoblet)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ikke tilkoblet)" { network_label = format!("testnettverk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testnettverk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Sikkerhet\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Nettverk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testnettverk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Brukersikkerhet") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Logg Inn]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logg på privat nøkkel - funksjonshemmet\ntest net har du logget inn som standard!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Logg ut]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logg ut - deaktivert for testnett");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Pålitelig enhet = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Pålitelig enhet = [Nei (men ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Eie") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Mynter]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/info_balance", &timestamp); let result_location = format!("safe balansere\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Nøkler]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domener") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[få din]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nytt domenenavn - safe nrs skape","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontekst") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[filbeholder]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Filer Beholder = {}\n endre til:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Nedlastinger/"); let filename = format!("./Nedlastinger/userinput_filescontainer"); let result_location = format!("Filer Beholder notert i: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Frihet\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Offentlige Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Last opp til det trygge nettverket") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ikke godkjent") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[last opp en fil]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Trygt nettverk: Offentlige Data - filopplasting"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLast opp fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Last opp filer]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Trygt nettverk: Offentlige Data - laste opp filer"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLaste opp {} filer =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLast opp fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[last opp katalog]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Trygt nettverk: Offentlige Data - katalogopplasting"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Last opp til et eid sted") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[last opp en fil]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Trygt nettverk: Offentlige Data - laste opp filen til Filer Beholder"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nLast opp fil til {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Last opp filer]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Trygt nettverk: Offentlige Data - filer lastes opp til Filer Beholder"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nLaste opp {} filer til {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} av {} filer : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLast opp fil til {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[last opp katalog]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Trygt nettverk: Offentlige Data - katalogopplasting til Filer Beholder"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\n❰Upload directory❱ til {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Last ned fra det trygge nettverket") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fil]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// katalog]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nfå katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fil]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// katalog]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sikker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nfå katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Personvern\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Private Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Utforske"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => nedlasting]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/file", &timestamp); let result_location = format!("safe cat\nresultat -> {}\nfå fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informasjon]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultat -> {}\nfå informasjon", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => liste]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultat -> {}\nfå liste", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => tre]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultat -> {}\nfå tre", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Verktøy"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[oppdater domene]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nye nøkler]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedlastinger/{}/", &timestamp); let filename = format!("./Nedlastinger/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Oppdater]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[bytte om]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Bytt nettverk og start på nytt manuelt\nendre til::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Exit"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Hjelp andre å oppdage det trygge nettverket") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Sammen går vi videre\nPersonvern - Sikkerhet - Frihet") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Slutte #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Slutte #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_pl() { //! Safe GUI content - lang = pl
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Dom\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nie znaleziono)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nie znaleziono)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nie znaleziono)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Wersja: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(nie połączony)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(nie połączony)" { network_label = format!("sieć testowa: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("sieć testowa: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Bezpieczeństwo\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Sieć") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("sieć testowa") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Bezpieczeństwo użytkownika") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Zaloguj sie]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logowanie z kluczem prywatnym - wyłączone\ntest net czy domyślnie się zalogowałeś!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Wyloguj]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Wyloguj - wyłączone dla sieci testowej");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Zaufane urządzenie = [tak]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Zaufane urządzenie = [Nie (ale tak!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Własność") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monety]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/info_balance", &timestamp); let result_location = format!("safe saldo\nwynik -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Klucze]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nwynik -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domeny") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[Weź swoje]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nowa nazwa domeny - safe nrs Stwórz","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nwynik -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontekst") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[kontener plików]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Pojemnik na pliki = {}\n zmień na:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Pliki do pobrania/"); let filename = format!("./Pliki do pobrania/userinput_filescontainer"); let result_location = format!("Pojemnik na pliki zanotowane w: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Wolność\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Dane Publiczne") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Przesłać do Bezpieczna Sieć") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Nie zidentyfikowany") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[prześlij jeden plik]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpieczna sieć: Dane Publiczne - Udostępnianie pliku"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files put\nwynik -> {}\nPrzesyłanie pliku =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Prześlij pliki]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpieczna sieć: Dane Publiczne - przesyłanie plików"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files put\nwynik -> {}\nWgrywać {} pliki =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files put\nwynik -> {}\nPrzesyłanie pliku =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[prześlij katalog]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpieczna sieć: Dane Publiczne - przesyłanie katalogu"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nwynik -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 informator : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Prześlij do posiadanej lokalizacji") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[prześlij jeden plik]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpieczna sieć: Dane Publiczne - przesyłanie plików do Pojemnik na pliki"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nwynik -> {}\nPrzesyłanie pliku do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 plik : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Prześlij pliki]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpieczna sieć: Dane Publiczne - przesyłanie plików do Pojemnik na pliki"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nwynik -> {}\nWgrywać {} pliki do {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} z {} pliki : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files put\nwynik -> {}\nPrzesyłanie pliku do {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 plik : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[prześlij katalog]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpieczna sieć: Dane Publiczne - przesyłanie katalogu do Pojemnik na pliki"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nwynik -> {}\n❰Upload directory❱ do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 informator : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Pobrane z Bezpieczna Sieć") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// plik]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpieczna url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/file", &timestamp); let result_location = format!("safe files sync\nwynik -> {}\ndostwać plik", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 plik : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// informator]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpieczna url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nwynik -> {}\ndostwać informator", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 informator : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// plik]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpieczna xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/file", &timestamp); let result_location = format!("safe files sync\nwynik -> {}\ndostwać plik", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 plik : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// informator]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpieczna xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nwynik -> {}\ndostwać informator", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 informator : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Prywatność\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Dane Prywatne") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Badać"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => pobieranie]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/file", &timestamp); let result_location = format!("safe cat\nwynik -> {}\ndostwać plik", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 plik : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => Informacja]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nwynik -> {}\ndostwać Informacja", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nwynik -> {}\ndostwać lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => drzewo]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nwynik -> {}\ndostwać drzewo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Narzędzia"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[zaktualizuj domenę]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nwynik -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nowe klawisze]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Pliki do pobrania/{}/", &timestamp); let filename = format!("./Pliki do pobrania/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nwynik -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[aktualizacja]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[przełącznik]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Przełącz sieć i ręcznie uruchom ponownie\nzmień na::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Wyjście"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Pomóż innym odkryć Bezpieczna Sieć") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Razem robimy postępy\nPrywatność - Bezpieczeństwo - Wolność") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Zrezygnować #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Zrezygnować #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_pt() { //! Safe GUI content - lang = pt
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Casa\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] não encontrado)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] não encontrado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] não encontrado)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versão: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(não conectado)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(não conectado)" { network_label = format!("rede de teste: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("rede de teste: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Segurança\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Rede") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("rede de teste") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Segurança do usuário") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Conecte-se]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logon de chave privada - Desativado\ntest net você está logado por padrão!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Sair]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Sair - desabilitado para testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispositivo confiável = [sim]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispositivo confiável = [Não (mas sim!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Propriedade") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Moedas]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/info_balance", &timestamp); let result_location = format!("safe Saldo\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Chaves]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domínios") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[pegue o seu]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"novo nome de domínio - safe nrs Criar","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Contexto") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[container de arquivos]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Container de arquivos = {}\n mudar para:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Transferências/"); let filename = format!("./Transferências/userinput_filescontainer"); let result_location = format!("Container de arquivos anotado em: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Liberdade\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Dados Públicos") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Enviar para a rede segura") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Não autenticado") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[carregue um arquivo]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rede Segura: Dados Públicos - upload de arquivo"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir arquivo =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Fazer upload de arquivos]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rede Segura: Dados Públicos - upload de arquivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nEnvio {} arquivos =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir arquivo =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[diretório de upload]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rede Segura: Dados Públicos - upload de diretório"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultado -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 diretório : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Faça upload para um local próprio") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[carregue um arquivo]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rede Segura: Dados Públicos - upload de arquivo para Container de arquivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nSubir arquivo para {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 Arquivo : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Fazer upload de arquivos]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rede Segura: Dados Públicos - upload de arquivos para Container de arquivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\nEnvio {} arquivos para {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} do {} arquivos : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultado -> {}\nSubir arquivo para {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 Arquivo : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[diretório de upload]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rede Segura: Dados Públicos - upload de diretório para Container de arquivos"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\n❰Upload directory❱ para {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 diretório : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Baixar de a rede segura") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// Arquivo]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\npegue Arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 Arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// diretório]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\npegue diretório", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 diretório : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// Arquivo]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/file", &timestamp); let result_location = format!("safe files sync\nresultado -> {}\npegue Arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 Arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// diretório]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"seguro xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultado -> {}\npegue diretório", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 diretório : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Privacidade\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Dados Privados") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explorar"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => download]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/file", &timestamp); let result_location = format!("safe cat\nresultado -> {}\npegue Arquivo", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 do 1 Arquivo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => em formação]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultado -> {}\npegue em formação", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => Lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultado -> {}\npegue Lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => árvore]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultado -> {}\npegue árvore", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Ferramentas"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[atualizar domínio]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[novas chaves]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Transferências/{}/", &timestamp); let filename = format!("./Transferências/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultado -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[atualizar]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[trocar]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Troque de rede e reinicie manualmente\nmudar para::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Saída"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Ajude outros a descobrir a rede segura") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Juntos nós progredimos\nPrivacidade - Segurança - Liberdade") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Desistir #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Desistir #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ro() { //! Safe GUI content - lang = ro
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Acasă\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nu a fost găsit)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nu a fost găsit)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nu a fost găsit)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Versiune: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(nu este conectat)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(nu este conectat)" { network_label = format!("testează rețeaua: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testează rețeaua: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Securitate\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Reţea") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testează rețeaua") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Securitate utilizator") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Autentificare]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logare cheie privată - dezactivat\ntest net v-ați autentificat implicit!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Deconectează-te]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Deconectează-te - dezactivat pentru testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dispozitiv de încredere = [da]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dispozitiv de încredere = [Nu (dar da!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Proprietate") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Monede]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/info_balance", &timestamp); let result_location = format!("safe echilibru\nrezultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Taste]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nrezultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domenii") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ia-l pe al tău]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nume de domeniu nou - safe nrs crea","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nrezultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Context") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[container de fișiere]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Container de fișiere = {}\n schimba in:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Descărcări/"); let filename = format!("./Descărcări/userinput_filescontainer"); let result_location = format!("Container de fișiere notat în: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Libertate\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Date publice") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Încărcați în rețeaua sigură") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Neautentificat") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[încărcați un fișier]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rețea sigură: Date publice - fișier încărcat"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultat -> {}\nIncarca fisier =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Încărca fișiere]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rețea sigură: Date publice - încărcare fișiere"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultat -> {}\nÎncărcați {} fișiere =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultat -> {}\nIncarca fisier =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[director de încărcare]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rețea sigură: Date publice - încărcare director"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nrezultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 director : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Încărcați într-o locație deținută") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[încărcați un fișier]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Rețea sigură: Date publice - fișier încărcat în Container de fișiere"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezultat -> {}\nIncarca fisier la {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 fişier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Încărca fișiere]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Rețea sigură: Date publice - fișiere încărcate în Container de fișiere"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nrezultat -> {}\nÎncărcați {} fișiere la {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} de {} fișiere : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files put\nrezultat -> {}\nIncarca fisier la {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 fişier : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[director de încărcare]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Rețea sigură: Date publice - încărcare director în Container de fișiere"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nrezultat -> {}\n❰Upload directory❱ la {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 director : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Descărcați din rețeaua sigură") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fişier]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sigur url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/file", &timestamp); let result_location = format!("safe files sync\nrezultat -> {}\nobține fişier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 fişier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// director]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sigur url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezultat -> {}\nobține director", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 director : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fişier]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sigur xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/file", &timestamp); let result_location = format!("safe files sync\nrezultat -> {}\nobține fişier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 fişier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// director]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"sigur xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nrezultat -> {}\nobține director", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 director : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Confidențialitate\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Date private") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Explora"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Descarca]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/file", &timestamp); let result_location = format!("safe cat\nrezultat -> {}\nobține fişier", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 de 1 fişier : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informație]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nrezultat -> {}\nobține informație", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => listă]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nrezultat -> {}\nobține listă", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => copac]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nrezultat -> {}\nobține copac", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Instrumente"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[actualizare domeniu]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nrezultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[chei noi]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Descărcări/{}/", &timestamp); let filename = format!("./Descărcări/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nrezultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Actualizați]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[intrerupator]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Schimbați rețeaua și reporniți manual\nschimba in::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Ieșire"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Ajută-i pe alții să descopere rețeaua sigură") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Împreună progresăm\nConfidențialitate - Securitate - Libertate") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Părăsi #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Părăsi #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ru() { //! Safe GUI content - lang = ru
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Дом\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] не найден)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] не найден)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] не найден)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Версия: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(Нет соединения)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(Нет соединения)" { network_label = format!("тестовая сеть: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тестовая сеть: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Безопасность\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Сеть") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тестовая сеть") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Безопасность пользователя") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Авторизоваться]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Вход в систему с закрытым ключом - отключен\ntest net вы авторизованы по умолчанию!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Выйти]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Выйти - отключен для тестовой сети");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Надежное устройство = [да]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Надежное устройство = [Нет (но да!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Право собственности") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Монеты]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/info_balance", &timestamp); let result_location = format!("safe остаток средств\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ключи]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Домены") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[получить ваши]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"новое доменное имя - safe nrs Создайте","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Контекст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[контейнер файлов]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Контейнер файлов = {}\n изменить на:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Загрузки/"); let filename = format!("./Загрузки/userinput_filescontainer"); let result_location = format!("Контейнер файлов отмечено в: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Свобода\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Общедоступные данные") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Загрузить на безопасная сеть") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Не аутентифицирован") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[загрузить один файл]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безопасная сеть: Общедоступные данные - файл загружен"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗагрузить файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Загрузить файлы]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безопасная сеть: Общедоступные данные - загрузка файлов"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗагрузить {} файлы =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗагрузить файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[каталог загрузки]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безопасная сеть: Общедоступные данные - загрузка каталога"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nрезультат -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 каталог : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Загрузить в принадлежащее вам место") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[загрузить один файл]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безопасная сеть: Общедоступные данные - загрузка файла в Контейнер файлов"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nЗагрузить файл к {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Загрузить файлы]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безопасная сеть: Общедоступные данные - файлы загружаются в Контейнер файлов"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nЗагрузить {} файлы к {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} из {} файлы : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗагрузить файл к {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[каталог загрузки]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безопасная сеть: Общедоступные данные - загрузка каталога в Контейнер файлов"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\n❰Upload directory❱ к {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 каталог : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Скачать с безопасная сеть") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// файл]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/file", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nполучать файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// каталог]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\nполучать каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// файл]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/file", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nполучать файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// каталог]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безопасно xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\nполучать каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Конфиденциальность\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Личные данные") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Исследовать"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => скачать]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/file", &timestamp); let result_location = format!("safe cat\nрезультат -> {}\nполучать файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 из 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => Информация]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nрезультат -> {}\nполучать Информация", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => список]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nрезультат -> {}\nполучать список", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => дерево]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nрезультат -> {}\nполучать дерево", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Инструменты"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[обновить домен]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[новые ключи]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Загрузки/{}/", &timestamp); let filename = format!("./Загрузки/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Обновить]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[выключатель]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Переключите сеть и перезапустите вручную\nизменить на::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Выход"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Помогите другим узнать безопасная сеть") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Вместе мы прогрессируем\nКонфиденциальность - Безопасность - Свобода") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Покидать #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Покидать #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_sk() { //! Safe GUI content - lang = sk
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Domov\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] nenájdené)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] nenájdené)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] nenájdené)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Verzia: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(nepripojený)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(nepripojený)" { network_label = format!("testovacia sieť: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testovacia sieť: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Zabezpečenie\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Sieť") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testovacia sieť") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Zabezpečenie používateľa") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Prihlásiť sa]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Prihlásenie súkromným kľúčom - zakázaný\ntest net ste sa predvolene prihlásili!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Odhlásiť sa]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Odhlásiť sa - zakázané pre testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Dôveryhodné zariadenie = [Áno]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Dôveryhodné zariadenie = [Nie (ale áno!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Vlastníctvo") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Mince]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/info_balance", &timestamp); let result_location = format!("safe rovnováha\nvýsledok -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Kľúče]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nvýsledok -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domény") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[dostať svoje]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nový názov domény - safe nrs vytvoriť","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nvýsledok -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontext") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[kontajner na súbory]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Kontajner súborov = {}\n zmeniť na:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./K stiahnutiu/"); let filename = format!("./K stiahnutiu/userinput_filescontainer"); let result_location = format!("Kontajner súborov zaznamenané v: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Sloboda\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Verejné Údaje") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Odovzdať do bezpečnú sieť") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Neoverené") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[nahrajte jeden súbor]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpečná sieť: Verejné Údaje - nahranie súboru"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledok -> {}\nNahrajte súbor =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Nahrať súbory]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpečná sieť: Verejné Údaje - nahrávanie súborov"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledok -> {}\nOdovzdať {} súbory =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledok -> {}\nNahrajte súbor =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[nahrať adresár]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpečná sieť: Verejné Údaje - nahranie adresára"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nvýsledok -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresár : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Odovzdajte na vlastnené miesto") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[nahrajte jeden súbor]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Bezpečná sieť: Verejné Údaje - nahrať súbor do Kontajner súborov"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nvýsledok -> {}\nNahrajte súbor do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 súbor : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Nahrať súbory]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Bezpečná sieť: Verejné Údaje - nahrať súbory do Kontajner súborov"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nvýsledok -> {}\nOdovzdať {} súbory do {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} z {} súbory : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files put\nvýsledok -> {}\nNahrajte súbor do {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 súbor : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[nahrať adresár]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Bezpečná sieť: Verejné Údaje - nahrať adresár do Kontajner súborov"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nvýsledok -> {}\n❰Upload directory❱ do {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresár : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Stiahnuť z bezpečnú sieť") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// súbor]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečné url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/file", &timestamp); let result_location = format!("safe files sync\nvýsledok -> {}\ndostať súbor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 súbor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// adresár]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečné url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nvýsledok -> {}\ndostať adresár", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresár : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// súbor]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečné xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/file", &timestamp); let result_location = format!("safe files sync\nvýsledok -> {}\ndostať súbor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 súbor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// adresár]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"bezpečné xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nvýsledok -> {}\ndostať adresár", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 adresár : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Ochrana osobných údajov\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Súkromné Údaje") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Preskúmať"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Stiahnuť ]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/file", &timestamp); let result_location = format!("safe cat\nvýsledok -> {}\ndostať súbor", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 z 1 súbor : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => informácie]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nvýsledok -> {}\ndostať informácie", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => zoznam]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nvýsledok -> {}\ndostať zoznam", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => strom]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nvýsledok -> {}\ndostať strom", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Nástroje"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[aktualizovať doménu]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nvýsledok -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nové kľúče]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./K stiahnutiu/{}/", &timestamp); let filename = format!("./K stiahnutiu/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nvýsledok -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[aktualizovať]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[prepínač]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Prepnite sieť a reštartujte ručne\nzmeniť na::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Východ"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Pomáhajte druhým objavovať bezpečnú sieť") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Spoločne napredujeme\nOchrana osobných údajov - Zabezpečenie - Sloboda") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Skončiť #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Skončiť #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_sr() { //! Safe GUI content - lang = sr
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Кућа\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] није пронађен)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] није пронађен)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] није пронађен)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Верзија: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(није повезан)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(није повезан)" { network_label = format!("тест нетворк: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тест нетворк: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Сигурност\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Мрежа") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тест нетворк") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Сигурност корисника") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Пријавите се]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Пријава са приватним кључем - онемогућен\nтест нет да ли сте подразумевано пријављени!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Одјавити се]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Одјавити се - онемогућен за тестнет");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Поуздани уређај = [да]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Поуздани уређај = [Не (али да!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Власништво") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Цоинс]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/info_balance", &timestamp); let result_location = format!("safe равнотежа\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Кључеви]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Домаинс") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[узми своје]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ново име домена - safe nrs Креирај","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Контекст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[контејнер за датотеке]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Контејнер за датотеке = {}\n променити:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Преузимања/"); let filename = format!("./Преузимања/userinput_filescontainer"); let result_location = format!("Контејнер за датотеке забележено у: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Слобода\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Јавни подаци") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Отпреми на сигурну мрежу") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Нот Аутхентицатед") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[отпремите једну датотеку]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Сигурна мрежа: Јавни подаци - отпремање датотеке"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nОтпреми датотеку =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Додај фајлове]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Сигурна мрежа: Јавни подаци - отпремање датотека"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nОтпремити {} фајлови =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nОтпреми датотеку =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[директоријум за отпремање]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Сигурна мрежа: Јавни подаци - учитавање директоријума"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nрезултат -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 именик : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Отпремите на локацију у власништву") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[отпремите једну датотеку]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Сигурна мрежа: Јавни подаци - отпремање датотеке у Контејнер за датотеке"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nОтпреми датотеку до {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 филе : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Додај фајлове]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Сигурна мрежа: Јавни подаци - датотеке отпремите у Контејнер за датотеке"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nОтпремити {} фајлови до {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} оф {} фајлови : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезултат -> {}\nОтпреми датотеку до {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 филе : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[директоријум за отпремање]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Сигурна мрежа: Јавни подаци - директоријум у Контејнер за датотеке"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\n❰Upload directory❱ до {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 именик : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Преузми са сигурну мрежу") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// филе]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"сеф урл","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/file", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nдобити филе", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 филе : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// именик]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"сеф урл","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\nдобити именик", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 именик : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// филе]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"сеф кор",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/file", &timestamp); let result_location = format!("safe files sync\nрезултат -> {}\nдобити филе", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 филе : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// именик]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"сеф кор",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезултат -> {}\nдобити именик", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 именик : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Приватност\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Приватни подаци") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Екплоре"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => преузимање]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/file", &timestamp); let result_location = format!("safe cat\nрезултат -> {}\nдобити филе", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 оф 1 филе : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => информације]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nрезултат -> {}\nдобити информације", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => листа]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nрезултат -> {}\nдобити листа", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => дрво]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nрезултат -> {}\nдобити дрво", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Алати"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ажурирајте домен]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[нови кључеви]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Преузимања/{}/", &timestamp); let filename = format!("./Преузимања/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nрезултат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[ажурирање]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[прекидач]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Промените мрежу и ручно поново покрените\nпроменити::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Излаз"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Помозите другима да открију сигурну мрежу") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Заједно напредујемо\nПриватност - Сигурност - Слобода") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Одустати #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Одустати #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_sv() { //! Safe GUI content - lang = sv
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Hem\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] hittades inte)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] hittades inte)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] hittades inte)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Version: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ej ansluten)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ej ansluten)" { network_label = format!("testnätverk: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("testnätverk: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "säkerhet\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Nätverk") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("testnätverk") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Användarsäkerhet") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Logga in]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Privat nyckel -inloggning - Inaktiverad\ntestnet har du loggat in som standard!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Logga ut]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logga ut - inaktiverad för testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Pålitlig enhet = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Pålitlig enhet = [Nej (men ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Äganderätt") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Mynt]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/info_balance", &timestamp); let result_location = format!("safe balans\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Nycklar]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domäner") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ta din]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"nytt domännamn - safe nrs skapa","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Sammanhang") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[filbehållare]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Filer Behållare = {}\n ändra till:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Nedladdningar/"); let filename = format!("./Nedladdningar/userinput_filescontainer"); let result_location = format!("Filer Behållare noterat i: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Frihet\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Offentliga Data") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Ladda upp till det säkra nätverket") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ej autentiserad") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ladda upp en fil]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Säkert nätverk: Offentliga Data - filuppladdning"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLadda upp fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Ladda upp filer]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Säkert nätverk: Offentliga Data - filer ladda upp"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLadda upp {} filer =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLadda upp fil =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[ladda upp katalog]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Säkert nätverk: Offentliga Data - katalogöverföring"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nresultat -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Ladda upp till en ägd plats") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ladda upp en fil]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Säkert nätverk: Offentliga Data - ladda upp filen till Filer Behållare"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nLadda upp fil till {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Ladda upp filer]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Säkert nätverk: Offentliga Data - filer som laddas upp till Filer Behållare"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nLadda upp {} filer till {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} av {} filer : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files put\nresultat -> {}\nLadda upp fil till {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[ladda upp katalog]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Säkert nätverk: Offentliga Data - katalog överför till Filer Behållare"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\n❰Upload directory❱ till {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Ladda ner från det säkra nätverket") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// fil]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nskaffa sig fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// katalog]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nskaffa sig katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// fil]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/file", &timestamp); let result_location = format!("safe files sync\nresultat -> {}\nskaffa sig fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// katalog]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nresultat -> {}\nskaffa sig katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Integritet\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Privata Data") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Utforska"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ladda ner]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/file", &timestamp); let result_location = format!("safe cat\nresultat -> {}\nskaffa sig fil", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 av 1 fil : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => information]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nresultat -> {}\nskaffa sig information", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nresultat -> {}\nskaffa sig lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => träd]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nresultat -> {}\nskaffa sig träd", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Verktyg"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[uppdatera domän]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[nya nycklar]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Nedladdningar/{}/", &timestamp); let filename = format!("./Nedladdningar/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nresultat -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[uppdatering]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[växla]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Byt nätverk och starta om manuellt\nändra till::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Utgång"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Hjälp andra att upptäcka det säkra nätverket") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Tillsammans går vi framåt\nIntegritet - säkerhet - Frihet") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Sluta med #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Sluta med #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_sw() { //! Safe GUI content - lang = sw
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Nyumbani\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] haipatikani)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] haipatikani)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] haipatikani)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Toleo: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(haijaunganishwa)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(haijaunganishwa)" { network_label = format!("mtandao wa mtihani: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("mtandao wa mtihani: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Usalama\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Mtandao") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("mtandao wa mtihani") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Usalama wa Mtumiaji") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Ingia]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Logon ya Kibinafsi ya Kibinafsi - walemavu\nwavu wa jaribio umeingia kwa chaguo-msingi!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Ingia nje]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Ingia nje - walemavu kwa testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Pålitlig enhet = [Ja]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Pålitlig enhet = [Nej (men ja!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Umiliki") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Sarafu]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/info_balance", &timestamp); let result_location = format!("safe usawa\nmatokeo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Funguo]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nmatokeo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Vikoa") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[pata yako]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"jina jipya la kikoa - safe nrs skapa","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nmatokeo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Muktadha") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[chombo cha faili]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Kontena la Faili = {}\n badili kuwa:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Vipakuzi/"); let filename = format!("./Vipakuzi/userinput_filescontainer"); let result_location = format!("Kontena la Faili alibainisha katika: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Uhuru\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Takwimu za Umma") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Ladda upp till det säkra nätverket") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Haijathibitishwa") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[pakia faili moja]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Mtandao salama: Takwimu za Umma - kupakia faili"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files put\nmatokeo -> {}\nPakia faili =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Pakia faili]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Mtandao salama: Takwimu za Umma - faili za kupakia"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files put\nmatokeo -> {}\nPakia {} mafaili =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files put\nmatokeo -> {}\nPakia faili =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[saraka ya kupakia]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Mtandao salama: Takwimu za Umma - upakiaji wa saraka"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nmatokeo -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 saraka : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Pakia kwenye eneo linalomilikiwa") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[pakia faili moja]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Mtandao salama: Takwimu za Umma - pakia faili kwa Kontena la Faili"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nmatokeo -> {}\nPakia faili kwa {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 faili : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Pakia faili]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Mtandao salama: Takwimu za Umma - faili zimepakiwa kwenye Kontena la Faili"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nmatokeo -> {}\nPakia {} mafaili kwa {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ya {} mafaili : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files put\nmatokeo -> {}\nPakia faili kwa {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 faili : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[saraka ya kupakia]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Mtandao salama: Takwimu za Umma - saraka ya kupakia kwa Kontena la Faili"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nmatokeo -> {}\n❰Upload directory❱ kwa {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 saraka : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Ladda ner från det säkra nätverket") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// faili]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/file", &timestamp); let result_location = format!("safe files sync\nmatokeo -> {}\npata faili", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 faili : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// saraka]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nmatokeo -> {}\npata saraka", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 saraka : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// faili]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/file", &timestamp); let result_location = format!("safe files sync\nmatokeo -> {}\npata faili", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 faili : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// saraka]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"säker xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nmatokeo -> {}\npata saraka", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 saraka : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Faragha\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Takwimu za Kibinafsi") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Gundua"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ladda ner]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/file", &timestamp); let result_location = format!("safe cat\nmatokeo -> {}\npata faili", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ya 1 faili : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => information]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nmatokeo -> {}\npata information", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => lista]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nmatokeo -> {}\npata lista", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => träd]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nmatokeo -> {}\npata träd", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Zana"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[sasisha kikoa]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nmatokeo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[funguo mpya]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Vipakuzi/{}/", &timestamp); let filename = format!("./Vipakuzi/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nmatokeo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[sasisha]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[kubadili]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Badilisha mtandao na uanze upya kwa mikono\nbadili kuwa::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Utgång"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Hjälp andra att upptäcka det säkra nätverket") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Pamoja tunaendelea\nFaragha - Usalama - Uhuru") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Acha #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Acha #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ta() { //! Safe GUI content - lang = ta
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "வீடு\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] கிடைக்கவில்லை)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] கிடைக்கவில்லை)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] கிடைக்கவில்லை)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("பதிப்பு: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(இணைக்கப்படவில்லை)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(இணைக்கப்படவில்லை)" { network_label = format!("டெஸ்ட் நெட்வொர்க்: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("டெஸ்ட் நெட்வொர்க்: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "பாதுகாப்பு\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("வலைப்பின்னல்") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("டெஸ்ட் நெட்வொர்க்") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("பயனர் பாதுகாப்பு") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[உள்நுழைய]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"தனிப்பட்ட விசை உள்நுழைவு - முடக்கப்பட்டது\nசோதனை வலை நீங்கள் இயல்பாக உள்நுழைந்துள்ளீர்கள்!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[வெளியேறு]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"வெளியேறு - டெஸ்ட்நெட்டுக்காக முடக்கப்பட்டது");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("நம்பகமான சாதனம் = [ஆம்]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("நம்பகமான சாதனம் = [இல்லை (ஆனால் ஆம்!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("உடைமை") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[நாணயங்கள்]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/info_balance", &timestamp); let result_location = format!("safe சமநிலை\nவிளைவாக -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[விசைகள்]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nவிளைவாக -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("களங்கள்") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[உன்னுடையது கிடைக்கும்]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"புதிய டொமைன் பெயர் - safe nrs உருவாக்க","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nவிளைவாக -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("சூழல்") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[கோப்புகள் கொள்கலன்]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("கோப்புகள் கொள்கலன் = {}\n மாற்ற:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./பதிவிறக்கங்கள்/"); let filename = format!("./பதிவிறக்கங்கள்/userinput_filescontainer"); let result_location = format!("கோப்புகள் கொள்கலன் இல் குறிப்பிடப்பட்டுள்ளது: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "சுதந்திரம்\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("பொது தரவு") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("க்கு பதிவேற்றவும் பாதுகாப்பான நெட்வொர்க்") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("அங்கீகரிக்கப்படவில்லை") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ஒரு கோப்பை பதிவேற்றவும்]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - கோப்பு பதிவேற்றம்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files put\nவிளைவாக -> {}\nகோப்பைப் பதிவேற்றவும் =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[கோப்புகளை பதிவேற்றவும்]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - கோப்புகள் பதிவேற்றம்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files put\nவிளைவாக -> {}\nபதிவேற்று {} கோப்புகள் =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files put\nவிளைவாக -> {}\nகோப்பைப் பதிவேற்றவும் =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[பதிவேற்ற அடைவு]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - அடைவு பதிவேற்றம்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nவிளைவாக -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 அடைவு : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("சொந்தமான இடத்திற்குப் பதிவேற்றவும்") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ஒரு கோப்பை பதிவேற்றவும்]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - கோப்பை பதிவேற்றவும் கோப்புகள் கொள்கலன்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nவிளைவாக -> {}\nகோப்பைப் பதிவேற்றவும் க்கு {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 கோப்பு : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[கோப்புகளை பதிவேற்றவும்]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - கோப்புகளை பதிவேற்றுகிறது கோப்புகள் கொள்கலன்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nவிளைவாக -> {}\nபதிவேற்று {} கோப்புகள் க்கு {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} இன் {} கோப்புகள் : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files put\nவிளைவாக -> {}\nகோப்பைப் பதிவேற்றவும் க்கு {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 கோப்பு : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[பதிவேற்ற அடைவு]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"பாதுகாப்பான நெட்வொர்க்: பொது தரவு - அடைவு பதிவேற்றம் கோப்புகள் கொள்கலன்"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nவிளைவாக -> {}\n❰Upload directory❱ க்கு {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 அடைவு : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("இருந்து பதிவிறக்கவும் பாதுகாப்பான நெட்வொர்க்") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// கோப்பு]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"பாதுகாப்பான url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/file", &timestamp); let result_location = format!("safe files sync\nவிளைவாக -> {}\nபெறு கோப்பு", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 கோப்பு : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// அடைவு]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"பாதுகாப்பான url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nவிளைவாக -> {}\nபெறு அடைவு", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 அடைவு : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// கோப்பு]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"பாதுகாப்பான xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/file", &timestamp); let result_location = format!("safe files sync\nவிளைவாக -> {}\nபெறு கோப்பு", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 கோப்பு : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// அடைவு]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"பாதுகாப்பான xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nவிளைவாக -> {}\nபெறு அடைவு", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 அடைவு : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "தனியுரிமை\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("தனிப்பட்ட தரவு") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "ஆராயுங்கள்"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => பதிவிறக்க Tamil]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/file", &timestamp); let result_location = format!("safe cat\nவிளைவாக -> {}\nபெறு கோப்பு", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 இன் 1 கோப்பு : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => தகவல்]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nவிளைவாக -> {}\nபெறு தகவல்", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => பட்டியல்]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nவிளைவாக -> {}\nபெறு பட்டியல்", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => மரம்]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nவிளைவாக -> {}\nபெறு மரம்", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "கருவிகள்"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[டொமைனைப் புதுப்பிக்கவும்]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nவிளைவாக -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[புதிய விசைகள்]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./பதிவிறக்கங்கள்/{}/", &timestamp); let filename = format!("./பதிவிறக்கங்கள்/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nவிளைவாக -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[புதுப்பி]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[சொடுக்கி]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"நெட்வொர்க்கை மாற்றி கைமுறையாக மறுதொடக்கம் செய்யுங்கள்\nமாற்ற::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "வெளியேறு"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("மற்றவர்களைக் கண்டறிய உதவுங்கள் பாதுகாப்பான நெட்வொர்க்") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("ஒன்றாக நாம் முன்னேறுகிறோம்\nதனியுரிமை - பாதுகாப்பு - சுதந்திரம்") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# விட்டுவிட #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# விட்டுவிட #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_te() { //! Safe GUI content - lang = te
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "హోమ్\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] దొరకలేదు)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] దొరకలేదు)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] దొరకలేదు)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("సంస్కరణ: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(కనెక్ట్ కాలేదు)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(కనెక్ట్ కాలేదు)" { network_label = format!("పరీక్ష నెట్‌వర్క్: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("పరీక్ష నెట్‌వర్క్: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "భద్రత\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("నెట్‌వర్క్") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("పరీక్ష నెట్‌వర్క్") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("వినియోగదారు భద్రత") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[ప్రవేశించండి]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ప్రైవేట్ కీ లాగిన్ - వికలాంగుడు\nటెస్ట్ నెట్ మీరు డిఫాల్ట్‌గా లాగిన్ అయ్యారు!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[లాగ్ అవుట్]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"లాగ్ అవుట్ - టెస్ట్‌నెట్ కోసం నిలిపివేయబడింది");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("విశ్వసనీయ పరికరం = [అవును]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("విశ్వసనీయ పరికరం = [లేదు (కానీ అవును!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("యాజమాన్యం") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[నాణేలు]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/info_balance", &timestamp); let result_location = format!("safe సంతులనం\nఫలితం -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[కీలు]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nఫలితం -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("డొమైన్‌లు") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[మీది పొందండి]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"కొత్త డొమైన్ పేరు - safe nrs సృష్టించు","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nఫలితం -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("సందర్భం") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ఫైల్ కంటైనర్]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ఫైల్స్ కంటైనర్ = {}\n కు మార్చండి:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./డౌన్‌లోడ్‌లు/"); let filename = format!("./డౌన్‌లోడ్‌లు/userinput_filescontainer"); let result_location = format!("ఫైల్స్ కంటైనర్ లో గుర్తించబడింది: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "స్వేచ్ఛ\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("పబ్లిక్ డేటా") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("కు అప్‌లోడ్ చేయండి సురక్షిత నెట్‌వర్క్") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("ప్రమాణీకరించబడలేదు") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ఒక ఫైల్‌ను అప్‌లోడ్ చేయండి]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - ఫైల్ ఎక్కించుట"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files put\nఫలితం -> {}\nఫైల్‌ను అప్‌లోడ్ చేయండి =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ఫైల్లను అప్లోడ్ చేయండి]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - ఫైళ్లు అప్‌లోడ్"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files put\nఫలితం -> {}\nఅప్‌లోడ్ చేయండి {} ఫైళ్లు =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files put\nఫలితం -> {}\nఫైల్‌ను అప్‌లోడ్ చేయండి =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[డైరెక్టరీని అప్‌లోడ్ చేయండి]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - డైరెక్టరీ అప్‌లోడ్"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nఫలితం -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 డైరెక్టరీ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("స్వంత స్థలానికి అప్‌లోడ్ చేయండి") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ఒక ఫైల్‌ను అప్‌లోడ్ చేయండి]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - కు ఫైల్ అప్‌లోడ్ ఫైల్స్ కంటైనర్"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nఫలితం -> {}\nఫైల్‌ను అప్‌లోడ్ చేయండి కు {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 ఫైల్ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ఫైల్లను అప్లోడ్ చేయండి]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - ఫైల్‌లు అప్‌లోడ్ చేయబడతాయి ఫైల్స్ కంటైనర్"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nఫలితం -> {}\nఅప్‌లోడ్ చేయండి {} ఫైళ్లు కు {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} యొక్క {} ఫైళ్లు : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files put\nఫలితం -> {}\nఫైల్‌ను అప్‌లోడ్ చేయండి కు {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 ఫైల్ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[డైరెక్టరీని అప్‌లోడ్ చేయండి]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"సురక్షిత నెట్‌వర్క్: పబ్లిక్ డేటా - కు డైరెక్టరీ అప్‌లోడ్ ఫైల్స్ కంటైనర్"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nఫలితం -> {}\n❰Upload directory❱ కు {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 డైరెక్టరీ : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("నుండి డౌన్‌లోడ్ చేయండి సురక్షిత నెట్‌వర్క్") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ఫైల్]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"సురక్షితమైనది url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/file", &timestamp); let result_location = format!("safe files sync\nఫలితం -> {}\nపొందండి ఫైల్", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 ఫైల్ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// డైరెక్టరీ]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"సురక్షితమైనది url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nఫలితం -> {}\nపొందండి డైరెక్టరీ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 డైరెక్టరీ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ఫైల్]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"సురక్షితమైనది xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/file", &timestamp); let result_location = format!("safe files sync\nఫలితం -> {}\nపొందండి ఫైల్", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 ఫైల్ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// డైరెక్టరీ]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"సురక్షితమైనది xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nఫలితం -> {}\nపొందండి డైరెక్టరీ", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 డైరెక్టరీ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "గోప్యత\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("ప్రైవేట్ డేటా") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "అన్వేషించండి"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => డౌన్లోడ్]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/file", &timestamp); let result_location = format!("safe cat\nఫలితం -> {}\nపొందండి ఫైల్", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 యొక్క 1 ఫైల్ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => సమాచారం]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nఫలితం -> {}\nపొందండి సమాచారం", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => జాబితా]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nఫలితం -> {}\nపొందండి జాబితా", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => చెట్టు]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nఫలితం -> {}\nపొందండి చెట్టు", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "ఉపకరణాలు"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[డొమైన్ అప్‌డేట్ చేయండి]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nఫలితం -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[కొత్త కీలు]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./డౌన్‌లోడ్‌లు/{}/", &timestamp); let filename = format!("./డౌన్‌లోడ్‌లు/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nఫలితం -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[అప్‌డేట్]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[స్విచ్]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"నెట్‌వర్క్‌ను మార్చండి మరియు మాన్యువల్‌గా రీస్టార్ట్ చేయండి\nకు మార్చండి::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "బయటకి దారి"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("ఇతరులను కనుగొనడంలో సహాయపడండి సురక్షిత నెట్‌వర్క్") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("కలిసి మేము పురోగమిస్తాము\nగోప్యత - భద్రత - స్వేచ్ఛ") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# నిష్క్రమించు #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# నిష్క్రమించు #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_th() { //! Safe GUI content - lang = th
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "บ้าน\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ไม่พบ)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ไม่พบ)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ไม่พบ)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("เวอร์ชั่น: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ไม่ได้เชื่อมต่อ)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ไม่ได้เชื่อมต่อ)" { network_label = format!("ทดสอบเครือข่าย: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("ทดสอบเครือข่าย: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "ความปลอดภัย\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("เครือข่าย") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("ทดสอบเครือข่าย") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ความปลอดภัยของผู้ใช้") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[เข้าสู่ระบบ]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"เข้าสู่ระบบคีย์ส่วนตัว - พิการ\ntest net คุณได้ล็อกอินโดยปริยายแล้ว!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[ออกจากระบบ]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"ออกจากระบบ - ปิดการใช้งานสำหรับ testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("อุปกรณ์ที่เชื่อถือได้ = [ใช่]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("อุปกรณ์ที่เชื่อถือได้ = [ไม่ (แต่ใช่!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("กรรมสิทธิ์") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[เหรียญ]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/info_balance", &timestamp); let result_location = format!("safe สมดุล\nผลลัพธ์ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[กุญแจ]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nผลลัพธ์ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("โดเมน") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[รับของคุณ]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ชื่อโดเมนใหม่ - safe nrs สร้าง","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nผลลัพธ์ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("บริบท") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ไฟล์คอนเทนเนอร์]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("ไฟล์คอนเทนเนอร์ = {}\n เปลี่ยนไป:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ดาวน์โหลด/"); let filename = format!("./ดาวน์โหลด/userinput_filescontainer"); let result_location = format!("ไฟล์คอนเทนเนอร์ บันทึกไว้ใน: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "เสรีภาพ\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("ข้อมูลสาธารณะ") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("อัพโหลดไปที่ เครือข่ายที่ปลอดภัย") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("ไม่รับรองความถูกต้อง") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[อัพโหลดหนึ่งไฟล์]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - อัปโหลดไฟล์"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files put\nผลลัพธ์ -> {}\nอัพโหลดไฟล์ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[อัพโหลดไฟล์]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - ไฟล์อัพโหลด"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files put\nผลลัพธ์ -> {}\nที่อัพโหลด {} ไฟล์ =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files put\nผลลัพธ์ -> {}\nอัพโหลดไฟล์ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[อัพโหลดไดเร็กทอรี]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - อัพโหลดไดเร็กทอรี"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nผลลัพธ์ -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไดเรกทอรี : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("อัปโหลดไปยังตำแหน่งที่เป็นเจ้าของ") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[อัพโหลดหนึ่งไฟล์]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - อัพโหลดไฟล์ไปที่ ไฟล์คอนเทนเนอร์"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nผลลัพธ์ -> {}\nอัพโหลดไฟล์ ถึง {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไฟล์ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[อัพโหลดไฟล์]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - ไฟล์อัพโหลดไปที่ ไฟล์คอนเทนเนอร์"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nผลลัพธ์ -> {}\nที่อัพโหลด {} ไฟล์ ถึง {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ของ {} ไฟล์ : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files put\nผลลัพธ์ -> {}\nอัพโหลดไฟล์ ถึง {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไฟล์ : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[อัพโหลดไดเร็กทอรี]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"เครือข่ายที่ปลอดภัย: ข้อมูลสาธารณะ - ไดเร็กทอรีอัพโหลดไปที่ ไฟล์คอนเทนเนอร์"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nผลลัพธ์ -> {}\n❰Upload directory❱ ถึง {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไดเรกทอรี : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("ดาวน์โหลดจาก เครือข่ายที่ปลอดภัย") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ไฟล์]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ปลอดภัย url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/file", &timestamp); let result_location = format!("safe files sync\nผลลัพธ์ -> {}\nรับ ไฟล์", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไฟล์ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ไดเรกทอรี]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ปลอดภัย url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nผลลัพธ์ -> {}\nรับ ไดเรกทอรี", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไดเรกทอรี : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ไฟล์]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ปลอดภัย xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/file", &timestamp); let result_location = format!("safe files sync\nผลลัพธ์ -> {}\nรับ ไฟล์", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไฟล์ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ไดเรกทอรี]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ปลอดภัย xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nผลลัพธ์ -> {}\nรับ ไดเรกทอรี", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไดเรกทอรี : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "ความเป็นส่วนตัว\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("ข้อมูลส่วนตัว") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "สำรวจ"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ดาวน์โหลด]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/file", &timestamp); let result_location = format!("safe cat\nผลลัพธ์ -> {}\nรับ ไฟล์", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ของ 1 ไฟล์ : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => ข้อมูล]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nผลลัพธ์ -> {}\nรับ ข้อมูล", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => รายการ]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nผลลัพธ์ -> {}\nรับ รายการ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ต้นไม้]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nผลลัพธ์ -> {}\nรับ ต้นไม้", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "เครื่องมือ"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[อัปเดตโดเมน]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nผลลัพธ์ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[กุญแจใหม่]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ดาวน์โหลด/{}/", &timestamp); let filename = format!("./ดาวน์โหลด/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nผลลัพธ์ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[อัปเดต]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[สวิตซ์]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"สลับเครือข่ายและรีสตาร์ทด้วยตนเอง\nเปลี่ยนไป::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "ทางออก"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("ช่วยให้ผู้อื่นค้นพบ เครือข่ายที่ปลอดภัย") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("เราจะก้าวหน้าไปด้วยกัน\nความเป็นส่วนตัว - ความปลอดภัย - เสรีภาพ") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# ล้มเลิก #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# ล้มเลิก #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_tk() { //! Safe GUI content - lang = tk
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Öý\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] tapylmady)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] tapylmady)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] tapylmady)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Wersiýa: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(birikdirilmedik)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(birikdirilmedik)" { network_label = format!("synag tory: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("synag tory: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Howpsuzlyk\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Tor") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("synag tory") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Ulanyjy howpsuzlygy") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Giriň]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Şahsy açar belligi - maýyp\ntest net, adaty ýagdaýda girdiňiz!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Hasapdan çykmak]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Hasapdan çykmak - testnet üçin ýapyk");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Güvenilir Cihaz = [Evet]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Güvenilir Cihaz = [Hayır (ama evet!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Eýeçilik") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Şaýy pullar]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/info_balance", &timestamp); let result_location = format!("safe deňagramlylygy\nNetije -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Düwmeler]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nNetije -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Domenler") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[seniňki al]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"täze domen ady - safe nrs oluşturmak","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nNetije -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Kontekst") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[faýl konteýner]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Faýllar konteýner = {}\n üýtgetmek:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Üklemeler/"); let filename = format!("./Üklemeler/userinput_filescontainer"); let result_location = format!("Faýllar konteýner bellendi: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Erkinlik\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Jemgyýetçilik Maglumatlary") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Şuraya yükle: Güvenli Ağ") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Hakyky tassyklanmady") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[bir faýl ýükläň]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - faýl ýüklemek"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nNetije -> {}\nFaýl ýükläň =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Faýllary ýükläň]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - faýl ýüklemek"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nNetije -> {}\nUploadükle {} faýllary =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nNetije -> {}\nFaýl ýükläň =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[bukjany ýüklemek]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - bukjany ýüklemek"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nNetije -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 katalog : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Haýsydyr bir ýere ýükläň") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[bir faýl ýükläň]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - faýl ýüklemek Faýllar konteýner"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nNetije -> {}\nFaýl ýükläň to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 faýl : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Faýllary ýükläň]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - ýüklemek üçin faýllar Faýllar konteýner"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nNetije -> {}\nUploadükle {} faýllary to {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} of {} faýllary : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nNetije -> {}\nFaýl ýükläň to {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 faýl : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[bukjany ýüklemek]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Ygtybarly ulgam: Jemgyýetçilik Maglumatlary - bukjany ýüklemek Faýllar konteýner"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nNetije -> {}\n❰Upload directory❱ to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 katalog : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Şuradan indirin: Güvenli Ağ") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// faýl]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/file", &timestamp); let result_location = format!("safe files sync\nNetije -> {}\nal faýl", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 faýl : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// katalog]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nNetije -> {}\nal katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// faýl]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/file", &timestamp); let result_location = format!("safe files sync\nNetije -> {}\nal faýl", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 faýl : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// katalog]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nNetije -> {}\nal katalog", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 katalog : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Gizlinlik\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Şahsy Maglumatlar") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Gözläň"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => indirmek]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/file", &timestamp); let result_location = format!("safe cat\nNetije -> {}\nal faýl", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 faýl : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => bilgi]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nNetije -> {}\nal bilgi", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => liste]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nNetije -> {}\nal liste", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ağaç]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nNetije -> {}\nal ağaç", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Gurallar"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[domeni täzeläň]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nNetije -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[täze düwmeler]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Üklemeler/{}/", &timestamp); let filename = format!("./Üklemeler/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nNetije -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[täzelen]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[wyklýuçatel]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Tory açyň we el bilen täzeden açyň\nüýtgetmek::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Çyk"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Başkalarının keşfetmesine yardımcı olun Güvenli Ağ") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Bilelikde öňe gidýäris\nGizlinlik - Howpsuzlyk - Erkinlik") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Taşla #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Taşla #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_tr() { //! Safe GUI content - lang = tr
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Ev\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] bulunamadı)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] bulunamadı)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] bulunamadı)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Sürüm: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(bağlı değil)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(bağlı değil)" { network_label = format!("test ağı: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("test ağı: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Güvenlik\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Ağ") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("test ağı") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Kullanıcı Güvenliği") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Giriş yapmak]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Özel Anahtar oturum açma - engelli\ntest net varsayılan olarak giriş yaptınız mı!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Çıkış Yap]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Çıkış Yap - testnet için devre dışı");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Güvenilir Cihaz = [Evet]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Güvenilir Cihaz = [Hayır (ama evet!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Mülkiyet") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[madeni paralar]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/info_balance", &timestamp); let result_location = format!("safe denge\nsonuç -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Anahtarlar]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nsonuç -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Etki Alanları") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[seninkini al]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"yeni alan adı - safe nrs oluşturmak","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nsonuç -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Bağlam") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[dosya kapsayıcısı]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Dosya Kapsayıcısı = {}\n değişmek:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./İndirilenler/"); let filename = format!("./İndirilenler/userinput_filescontainer"); let result_location = format!("Dosya Kapsayıcısı not edildi: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Özgürlük\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Herkese Açık Veriler") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Şuraya yükle: Güvenli Ağ") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Kimliği Doğrulanmadı") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[bir dosya yükle]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Güvenli Ağ: Herkese Açık Veriler - dosya yükleme"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nsonuç -> {}\nDosya yükleme =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Dosyaları yükle]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Güvenli Ağ: Herkese Açık Veriler - dosya yükleme"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nsonuç -> {}\nYüklemek {} Dosyalar =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nsonuç -> {}\nDosya yükleme =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[dizini yükle]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Güvenli Ağ: Herkese Açık Veriler - dizin yükleme"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nsonuç -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dizin : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Sahip olunan bir konuma yükleyin") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[bir dosya yükle]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Güvenli Ağ: Herkese Açık Veriler - dosya yükleme Dosya Kapsayıcısı"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nsonuç -> {}\nDosya yükleme ile {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dosya : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Dosyaları yükle]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Güvenli Ağ: Herkese Açık Veriler - dosya yükleme Dosya Kapsayıcısı"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nsonuç -> {}\nYüklemek {} Dosyalar ile {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ile ilgili {} Dosyalar : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files put\nsonuç -> {}\nDosya yükleme ile {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dosya : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[dizini yükle]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Güvenli Ağ: Herkese Açık Veriler - dizin yükleme Dosya Kapsayıcısı"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nsonuç -> {}\n❰Upload directory❱ ile {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dizin : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Şuradan indirin: Güvenli Ağ") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// dosya]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/file", &timestamp); let result_location = format!("safe files sync\nsonuç -> {}\nelde etmek dosya", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dosya : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// dizin]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nsonuç -> {}\nelde etmek dizin", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dizin : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// dosya]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/file", &timestamp); let result_location = format!("safe files sync\nsonuç -> {}\nelde etmek dosya", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dosya : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// dizin]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"güvenli xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nsonuç -> {}\nelde etmek dizin", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dizin : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Mahremiyet\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Özel Veriler") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Keşfetmek"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => indirmek]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/file", &timestamp); let result_location = format!("safe cat\nsonuç -> {}\nelde etmek dosya", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ile ilgili 1 dosya : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => bilgi]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nsonuç -> {}\nelde etmek bilgi", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => liste]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nsonuç -> {}\nelde etmek liste", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => ağaç]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nsonuç -> {}\nelde etmek ağaç", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Aletler"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[etki alanını güncelle]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nsonuç -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[yeni anahtarlar]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./İndirilenler/{}/", &timestamp); let filename = format!("./İndirilenler/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nsonuç -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[Güncelleme]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[değiştirmek]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Ağı değiştir ve manuel olarak yeniden başlat\ndeğişmek::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "çıkış"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Başkalarının keşfetmesine yardımcı olun Güvenli Ağ") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Birlikte ilerliyoruz\nMahremiyet - Güvenlik - Özgürlük") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Çıkış yapmak #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Çıkış yapmak #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_tt() { //! Safe GUI content - lang = tt
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Өй\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] табылмады)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] табылмады)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] табылмады)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Вариант: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(тоташмаган)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(тоташмаган)" { network_label = format!("тест челтәре: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тест челтәре: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Куркынычсызлык\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Челтәр") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тест челтәре") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Кулланучының куркынычсызлыгы") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Керергә]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Шәхси ачкыч логоны - инвалид\nсынау челтәре сез килешү буенча кердегез!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Чыгарга]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Чыгарга - тест челтәре өчен инвалид");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Ышанычлы җайланма = [Әйе]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Ышанычлы җайланма = [Noк (ләкин әйе!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Хуҗалык") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Монеталар]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/info_balance", &timestamp); let result_location = format!("safe баланс\nНәтиҗә -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ачкычлар]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nНәтиҗә -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Доменнар") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[үзеңнекен ал]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"яңа домен исеме - safe nrs булдыру","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nНәтиҗә -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Контекст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[файллар контейнеры]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Файллар контейнеры = {}\n toәр сүзнең:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Йөкләүләр/"); let filename = format!("./Йөкләүләр/userinput_filescontainer"); let result_location = format!("Файллар контейнеры .әр сүзнең: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Ирек\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Халык мәгълүматлары") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Йөкләү Куркынычсыз челтәр") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Аутентификацияләнмәгән") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[бер файл йөкләү]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Куркынычсыз челтәр: Халык мәгълүматлары - файл йөкләү"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files put\nНәтиҗә -> {}\nФайлны йөкләү =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Файлларны йөкләү]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Куркынычсыз челтәр: Халык мәгълүматлары - файллар йөкләү"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files put\nНәтиҗә -> {}\nЙөкләү {} файллар =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files put\nНәтиҗә -> {}\nФайлны йөкләү =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[каталогны йөкләү]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Куркынычсыз челтәр: Халык мәгълүматлары - каталог йөкләү"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nНәтиҗә -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 каталог : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Игътибарлы урынга йөкләү") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[бер файл йөкләү]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Куркынычсыз челтәр: Халык мәгълүматлары - файл йөкләү Файллар контейнеры"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nНәтиҗә -> {}\nФайлны йөкләү to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Файлларны йөкләү]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Куркынычсыз челтәр: Халык мәгълүматлары - йөкләү файллары Файллар контейнеры"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nНәтиҗә -> {}\nЙөкләү {} файллар to {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} of {} файллар : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files put\nНәтиҗә -> {}\nФайлны йөкләү to {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[каталогны йөкләү]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Куркынычсыз челтәр: Халык мәгълүматлары - каталогка йөкләү Файллар контейнеры"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nНәтиҗә -> {}\n❰Upload directory❱ to {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 каталог : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Күчереп алу Куркынычсыз челтәр") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// файл]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"куркынычсыз url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/file", &timestamp); let result_location = format!("safe files sync\nНәтиҗә -> {}\nалу файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// каталог]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"куркынычсыз url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nНәтиҗә -> {}\nалу каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// файл]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"куркынычсыз xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/file", &timestamp); let result_location = format!("safe files sync\nНәтиҗә -> {}\nалу файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// каталог]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"куркынычсыз xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nНәтиҗә -> {}\nалу каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Хосусыйлык\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Шәхси мәгълүматлар") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Тикшерү"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => йөкләү]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/file", &timestamp); let result_location = format!("safe cat\nНәтиҗә -> {}\nалу файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => мәгълүмат]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nНәтиҗә -> {}\nалу мәгълүмат", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => исемлеге]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nНәтиҗә -> {}\nалу исемлеге", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => агач]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nНәтиҗә -> {}\nалу агач", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Кораллар"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[доменны яңарту]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nНәтиҗә -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[яңа ачкычлар]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Йөкләүләр/{}/", &timestamp); let filename = format!("./Йөкләүләр/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nНәтиҗә -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[яңарту]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[күчерү]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Челтәрне күчерегез һәм кул белән яңадан эшләтеп җибәрегез\ntoәр сүзнең::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Чыгу"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Башкаларга ачарга булыш Куркынычсыз челтәр") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Бергәләп алга барабыз\nХосусыйлык - Куркынычсызлык - Ирек") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Тукта #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Тукта #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ug() { //! Safe GUI content - lang = ug
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "ئۆي\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] تېپىلمىدى)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] تېپىلمىدى)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] تېپىلمىدى)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("نەشرى: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ئۇلانمىدى)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ئۇلانمىدى)" { network_label = format!("سىناق تورى: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("سىناق تورى: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "بىخەتەرلىك\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("تور") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("سىناق تورى") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("ئىشلەتكۈچى بىخەتەرلىكى") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[كىرىڭ]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"شەخسىي ئاچقۇچ بەلگىسى - چەكلەنگەن\nسىناق تورى سىز سۈكۈتتىكى ھالەتتە كىردىڭىز!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[چېكىنىش]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"چېكىنىش - سىناق تورى ئۈچۈن چەكلەنگەن");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("ئىشەنچلىك ئۈسكۈنە = [ھەئە]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("ئىشەنچلىك ئۈسكۈنە = [ياق (ئەمما شۇنداق!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ئىگىدارلىق ھوقۇقى") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[تەڭگە]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/info_balance", &timestamp); let result_location = format!("safe تەڭپۇڭلۇق\nنەتىجە -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[ئاچقۇچ]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nنەتىجە -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("دائىرە") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[ئېرىشىڭ]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"يېڭى تور نامى - safe nrs قۇرۇش","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nنەتىجە -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("مەزمۇن") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[ھۆججەت قاچىسى]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("كونتېينېر = {}\n ئۆزگەرتىش:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./چۈشۈرۈش/"); let filename = format!("./چۈشۈرۈش/userinput_filescontainer"); let result_location = format!("كونتېينېر دەپ كۆرسىتىلدى: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "ئەركىنلىك\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("ئاممىۋى سانلىق مەلۇمات") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("يۈكلەش بىخەتەر تور") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("دەلىللەنمىدى") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[بىر ھۆججەت يۈكلەڭ]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - ھۆججەت يوللاش"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنەتىجە -> {}\nھۆججەت يۈكلەڭ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[ھۆججەتلەرنى يۈكلەڭ]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - ھۆججەت يوللاش"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنەتىجە -> {}\nيۈكلەش {} ھۆججەتلەر =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنەتىجە -> {}\nھۆججەت يۈكلەڭ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[مۇندەرىجىنى يۈكلەش]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - مۇندەرىجە يۈكلەش"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nنەتىجە -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 مۇندەرىجە : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("ئىگىدارچىلىق ئورنىغا يۈكلەڭ") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[بىر ھۆججەت يۈكلەڭ]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - ھۆججەت يوللاش كونتېينېر"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنەتىجە -> {}\nھۆججەت يۈكلەڭ به {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 ھۆججەت : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[ھۆججەتلەرنى يۈكلەڭ]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - ھۆججەتلەرنى يوللاش كونتېينېر"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنەتىجە -> {}\nيۈكلەش {} ھۆججەتلەر به {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} از {} ھۆججەتلەر : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنەتىجە -> {}\nھۆججەت يۈكلەڭ به {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 ھۆججەت : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[مۇندەرىجىنى يۈكلەش]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"بىخەتەر تور: ئاممىۋى سانلىق مەلۇمات - مۇندەرىجە يۈكلىنىدۇ كونتېينېر"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nنەتىجە -> {}\n❰Upload directory❱ به {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 مۇندەرىجە : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("دىن چۈشۈرۈڭ بىخەتەر تور") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ھۆججەت]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بىخەتەر url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/file", &timestamp); let result_location = format!("safe files sync\nنەتىجە -> {}\nئېلىش ھۆججەت", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 ھۆججەت : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// مۇندەرىجە]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بىخەتەر url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنەتىجە -> {}\nئېلىش مۇندەرىجە", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 مۇندەرىجە : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ھۆججەت]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بىخەتەر xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/file", &timestamp); let result_location = format!("safe files sync\nنەتىجە -> {}\nئېلىش ھۆججەت", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 ھۆججەت : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// مۇندەرىجە]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"بىخەتەر xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنەتىجە -> {}\nئېلىش مۇندەرىجە", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 مۇندەرىجە : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "مەخپىيەتلىك\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("شەخسىي سانلىق مەلۇمات") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "ئىزدىنىش"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => چۈشۈرۈش]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/file", &timestamp); let result_location = format!("safe cat\nنەتىجە -> {}\nئېلىش ھۆججەت", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 از 1 ھۆججەت : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => ئۇچۇر]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nنەتىجە -> {}\nئېلىش ئۇچۇر", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => list]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nنەتىجە -> {}\nئېلىش list", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => دەرەخ]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nنەتىجە -> {}\nئېلىش دەرەخ", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "قوراللار"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[دائىرە يېڭىلاش]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nنەتىجە -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[يېڭى كۇنۇپكىلار]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./چۈشۈرۈش/{}/", &timestamp); let filename = format!("./چۈشۈرۈش/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nنەتىجە -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[يېڭىلاش]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[ئۆزگەرتىش]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"تورنى ئالماشتۇرۇپ قولدا قايتا قوزغىتىڭ\nئۆزگەرتىش::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "چىقىش"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("باشقىلارنىڭ بايقىشىغا ياردەم قىلىڭ بىخەتەر تور") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("بىز بىرلىكتە ئالغا ئىلگىرىلەيمىز\nمەخپىيەتلىك - بىخەتەرلىك - ئەركىنلىك") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# چېكىنىش #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# چېكىنىش #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_uk() { //! Safe GUI content - lang = uk
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Додому\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] не знайдено)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] не знайдено)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] не знайдено)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Версія: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(не підʼєднано)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(не підʼєднано)" { network_label = format!("тестова мережа: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("тестова мережа: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Безпека\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Мережа") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("тестова мережа") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Безпека користувачів") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Увійдіть]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Вхід до приватного ключа - інвалід\ntest net Ви увійшли за замовчуванням!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Вийти]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Вийти - вимкнено для тестової мережі");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Надійний пристрій = [Так]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Надійний пристрій = [Ні (але так!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Власність") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Монети]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/info_balance", &timestamp); let result_location = format!("safe баланс\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Ключі]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Домени") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[отримай своє]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"нове доменне імʼя - safe nrs створити","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Контекст") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[контейнер файлів]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Контейнер для файлів = {}\n перейти:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Завантаження/"); let filename = format!("./Завантаження/userinput_filescontainer"); let result_location = format!("Контейнер для файлів зазначено у: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Свобода\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Публічні дані") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Завантажити в безпечна мережа") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Не автентифіковано") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[завантажити один файл]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безпечна мережа: Публічні дані - завантаження файлу"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗавантажити файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Завантажуйте файли]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безпечна мережа: Публічні дані - завантаження файлів"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗавантажити {} файли =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗавантажити файл =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[каталог завантаження]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безпечна мережа: Публічні дані - завантаження каталогу"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nрезультат -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Завантажте до власного розташування") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[завантажити один файл]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Безпечна мережа: Публічні дані - завантажити файл у Контейнер для файлів"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nЗавантажити файл до {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Завантажуйте файли]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Безпечна мережа: Публічні дані - файли, завантажені до Контейнер для файлів"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nЗавантажити {} файли до {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} з {} файли : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files put\nрезультат -> {}\nЗавантажити файл до {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[каталог завантаження]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Безпечна мережа: Публічні дані - завантаження до каталогу Контейнер для файлів"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\n❰Upload directory❱ до {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Завантажити з безпечна мережа") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// файл]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безпечний url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/file", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nотримати файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// каталог]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безпечний url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\nотримати каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// файл]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безпечний xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/file", &timestamp); let result_location = format!("safe files sync\nрезультат -> {}\nотримати файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// каталог]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"безпечний xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nрезультат -> {}\nотримати каталог", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 каталог : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Конфіденційність\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Приватні дані") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Досліджуйте"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => завантажити]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/file", &timestamp); let result_location = format!("safe cat\nрезультат -> {}\nотримати файл", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 з 1 файл : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => інформації]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nрезультат -> {}\nотримати інформації", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => список]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nрезультат -> {}\nотримати список", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => дерево]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nрезультат -> {}\nотримати дерево", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Інструменти"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[оновити домен]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[нові ключі]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Завантаження/{}/", &timestamp); let filename = format!("./Завантаження/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nрезультат -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[оновлення]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[перемикач]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Змініть мережу та перезапустіть вручну\nперейти::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Вихід"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Допоможіть іншим відкрити для себе безпечна мережа") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Разом ми прогресуємо\nКонфіденційність - Безпека - Свобода") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Вийти #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Вийти #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_ur() { //! Safe GUI content - lang = ur
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "گھر\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] نہیں ملا)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] نہیں ملا)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] نہیں ملا)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("ورژن: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(منسلک نہیں)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(منسلک نہیں)" { network_label = format!("ٹیسٹ نیٹ ورک: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("ٹیسٹ نیٹ ورک: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "سیکورٹی\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("نیٹ ورک") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("ٹیسٹ نیٹ ورک") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("صارف کی حفاظت۔") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[لاگ ان کریں]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"نجی کلیدی لاگ ان۔ - معذور\nٹیسٹ نیٹ آپ نے بطور ڈیفالٹ لاگ ان کیا ہے!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[لاگ آوٹ]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"لاگ آوٹ - ٹیسٹ نیٹ کے لیے غیر فعال");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("قابل اعتماد آلہ۔ = [جی ہاں]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("قابل اعتماد آلہ۔ = [نہیں (لیکن ہاں!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("ملکیت۔") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[سکے]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/info_balance", &timestamp); let result_location = format!("safe بقیہ\nنتیجہ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[چابیاں]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nنتیجہ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("ڈومینز") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[اپنا حاصل کرو]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"نیا ڈومین نام - safe nrs بنانا","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nنتیجہ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("خیال، سیاق") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[فائلوں کا کنٹینر]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("فائل کنٹینر۔ = {}\n تبدیل کرنا:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./ڈاؤن لوڈ/"); let filename = format!("./ڈاؤن لوڈ/userinput_filescontainer"); let result_location = format!("فائل کنٹینر۔ میں نوٹ کیا: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "آزادی۔\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("عوامی ڈیٹا") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("پر اپ لوڈ کریں۔ محفوظ نیٹ ورک") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("مستند نہیں۔") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[ایک فائل اپ لوڈ کریں]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - فائل اپ لوڈ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجہ -> {}\nاپ لوڈ فائل =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[فائلیں اپ لوڈ کرو]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - فائلیں اپ لوڈ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجہ -> {}\nاپ لوڈ کریں۔ {} فائلوں =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجہ -> {}\nاپ لوڈ فائل =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[اپ لوڈ ڈائریکٹری]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - ڈائریکٹری اپ لوڈ"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nنتیجہ -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 ڈائریکٹری : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("کسی ملکیت والے مقام پر اپ لوڈ کریں۔") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[ایک فائل اپ لوڈ کریں]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - فائل اپ لوڈ کریں فائل کنٹینر۔"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتیجہ -> {}\nاپ لوڈ فائل کو {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 فائل : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[فائلیں اپ لوڈ کرو]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - فائلیں اپ لوڈ کریں فائل کنٹینر۔"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nنتیجہ -> {}\nاپ لوڈ کریں۔ {} فائلوں کو {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} کی {} فائلوں : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files put\nنتیجہ -> {}\nاپ لوڈ فائل کو {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 فائل : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[اپ لوڈ ڈائریکٹری]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"محفوظ نیٹ ورک۔: عوامی ڈیٹا - ڈائریکٹری اپ لوڈ کریں فائل کنٹینر۔"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nنتیجہ -> {}\n❰Upload directory❱ کو {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 ڈائریکٹری : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("سے ڈاؤن لوڈ کریں۔ محفوظ نیٹ ورک") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// فائل]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"محفوظ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/file", &timestamp); let result_location = format!("safe files sync\nنتیجہ -> {}\nحاصل کریں فائل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 فائل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ڈائریکٹری]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"محفوظ url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتیجہ -> {}\nحاصل کریں ڈائریکٹری", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 ڈائریکٹری : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// فائل]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"محفوظ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/file", &timestamp); let result_location = format!("safe files sync\nنتیجہ -> {}\nحاصل کریں فائل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 فائل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ڈائریکٹری]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"محفوظ xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nنتیجہ -> {}\nحاصل کریں ڈائریکٹری", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 ڈائریکٹری : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "پرائیویسی\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("نجی ڈیٹا۔") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "دریافت کریں۔"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => ڈاؤن لوڈ کریں]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/file", &timestamp); let result_location = format!("safe cat\nنتیجہ -> {}\nحاصل کریں فائل", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 کی 1 فائل : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => معلومات]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nنتیجہ -> {}\nحاصل کریں معلومات", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => فہرست]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nنتیجہ -> {}\nحاصل کریں فہرست", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => درخت]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nنتیجہ -> {}\nحاصل کریں درخت", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "اوزار"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[ڈومین کو اپ ڈیٹ کریں۔]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nنتیجہ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[نئی چابیاں]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./ڈاؤن لوڈ/{}/", &timestamp); let filename = format!("./ڈاؤن لوڈ/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nنتیجہ -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[اپ ڈیٹ]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[سوئچ]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"نیٹ ورک سوئچ کریں اور دستی طور پر دوبارہ شروع کریں۔\nتبدیل کرنا::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "باہر نکلیں"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("دریافت کرنے میں دوسروں کی مدد کریں۔ محفوظ نیٹ ورک") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("مل کر ہم ترقی کرتے ہیں۔\nپرائیویسی - سیکورٹی - آزادی۔") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# چھوڑو۔ #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# چھوڑو۔ #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_vi() { //! Safe GUI content - lang = vi
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Nhà\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] không tìm thấy)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] không tìm thấy)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] không tìm thấy)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Phiên bản: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(không kết nối)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(không kết nối)" { network_label = format!("mạng thử nghiệm: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("mạng thử nghiệm: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Bảo vệ\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Mạng") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("mạng thử nghiệm") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Bảo mật người dùng") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Đăng nhập]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Đăng nhập khóa cá nhân - Vô hiệu hóa\nkiểm tra net có bạn đã đăng nhập theo mặc định!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Đăng xuất]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Đăng xuất - bị vô hiệu hóa đối với testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Thiết bị đáng tin cậy = [đúng]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Thiết bị đáng tin cậy = [Không (nhưng có!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Quyền sở hữu") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[đồng xu]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/info_balance", &timestamp); let result_location = format!("safe thăng bằng\nkết quả -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Chìa khóa]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\nkết quả -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Miền") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[lấy của bạn]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"tên miền mới - safe nrs tạo ra","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\nkết quả -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Định nghĩa bài văn") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[thùng chứa tệp]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Vùng chứa tệp = {}\n thay đổi thành:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Tải xuống/"); let filename = format!("./Tải xuống/userinput_filescontainer"); let result_location = format!("Vùng chứa tệp ghi nhận trong: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Tự do\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Dữ liệu công khai") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Tải lên Mạng an toàn") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Chưa được xác thực") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[tải lên một tệp]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Mạng an toàn: Dữ liệu công khai - tải lên tệp"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files put\nkết quả -> {}\nCập nhật dử liệu =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Tải tệp lên]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Mạng an toàn: Dữ liệu công khai - tập tin tải lên"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files put\nkết quả -> {}\nTải lên {} các tập tin =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files put\nkết quả -> {}\nCập nhật dử liệu =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[tải lên thư mục]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Mạng an toàn: Dữ liệu công khai - tải lên thư mục"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\nkết quả -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 danh mục : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Tải lên vị trí được sở hữu") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[tải lên một tệp]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Mạng an toàn: Dữ liệu công khai - tải tệp lên Vùng chứa tệp"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nkết quả -> {}\nCập nhật dử liệu đến {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 tập tin : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Tải tệp lên]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Mạng an toàn: Dữ liệu công khai - tập tin tải lên Vùng chứa tệp"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files sync\nkết quả -> {}\nTải lên {} các tập tin đến {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} của {} các tập tin : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files put\nkết quả -> {}\nCập nhật dử liệu đến {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 tập tin : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[tải lên thư mục]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Mạng an toàn: Dữ liệu công khai - tải thư mục lên Vùng chứa tệp"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\nkết quả -> {}\n❰Upload directory❱ đến {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 danh mục : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Tải xuống từ Mạng an toàn") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// tập tin]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"an toàn url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/file", &timestamp); let result_location = format!("safe files sync\nkết quả -> {}\nhiểu được tập tin", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 tập tin : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// danh mục]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"an toàn url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nkết quả -> {}\nhiểu được danh mục", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 danh mục : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// tập tin]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"an toàn xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/file", &timestamp); let result_location = format!("safe files sync\nkết quả -> {}\nhiểu được tập tin", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 tập tin : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// danh mục]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"an toàn xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\nkết quả -> {}\nhiểu được danh mục", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 danh mục : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Sự riêng tư\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Dữ liệu cá nhân") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Khám phá"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => Tải xuống]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/file", &timestamp); let result_location = format!("safe cat\nkết quả -> {}\nhiểu được tập tin", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 của 1 tập tin : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => thông tin]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/info_metadata", &timestamp); let result_location = format!("safe dog\nkết quả -> {}\nhiểu được thông tin", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => danh sách]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/info_ls", &timestamp); let result_location = format!("safe files ls\nkết quả -> {}\nhiểu được danh sách", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => cây]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/info_tree", &timestamp); let result_location = format!("safe files tree\nkết quả -> {}\nhiểu được cây", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Công cụ"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[cập nhật miền]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\nkết quả -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[chìa khóa mới]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Tải xuống/{}/", &timestamp); let filename = format!("./Tải xuống/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\nkết quả -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[cập nhật]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[chuyển]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Chuyển mạng và khởi động lại theo cách thủ công\nthay đổi thành::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Lối ra"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Giúp người khác khám phá Mạng an toàn") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Chúng ta cùng nhau tiến bộ\nSự riêng tư - Bảo vệ - Tự do") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Từ bỏ #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Từ bỏ #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_xh() { //! Safe GUI content - lang = xh
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "Ekhaya\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] ayifunyanwa)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] ayifunyanwa)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] ayifunyanwa)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("Inguqulelo: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(ayixhunyiwe)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(ayixhunyiwe)" { network_label = format!("inethiwekhi yovavanyo: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("inethiwekhi yovavanyo: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "Ukhuseleko\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("Inethiwekhi") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("inethiwekhi yovavanyo") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("Ukhuseleko loMsebenzisi") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[Ngema]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"I-Logon eyimfihlo yabucala - ukhubazekile\nuvavanyo lomnatha ungenile ngokungagqibekanga!");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[Phuma]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"Phuma - ikhubazekile ngenxa ye-testnet");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("Isixhobo esithembekileyo = [Ewe]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("Isixhobo esithembekileyo = [Hayi (kodwa ewe!)]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("Ubunini") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[Iingqekembe zemali]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/info_balance", &timestamp); let result_location = format!("safe ibhalansi\niziphumo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[Izitshixo]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\niziphumo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("Imimandla") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[thatha eyakho]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"igama elitsha lesizinda - safe nrs yenza","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\niziphumo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("Umxholo") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[isikhongozeli sefayile]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("Isikhongozelo seefayile = {}\n tshintshela kwi:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./Ukhuphelo/"); let filename = format!("./Ukhuphelo/userinput_filescontainer"); let result_location = format!("Isikhongozelo seefayile kuphawulwe kwi: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "Inkululeko\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("Iinkcukacha Zoluntu") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("Ngenisa ku Inethiwekhi ekhuselekileyo") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("Ayingqiniswanga") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[layisha ifayile enye]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - ifayile yokulayisha"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files put\niziphumo -> {}\nNgenisa ifayile =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[Ngenisa iifayile]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - iifayile zilayishwe"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files put\niziphumo -> {}\nLayisha {} iifayile =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files put\niziphumo -> {}\nNgenisa ifayile =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[layisha isikhombisi]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - layisha ulawulo"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\niziphumo -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ulawulo : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("Ngenisa kwindawo eyeyakho") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[layisha ifayile enye]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - layisha ifayile kwi Isikhongozelo seefayile"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files sync\niziphumo -> {}\nNgenisa ifayile ukuya {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ifayile : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[Ngenisa iifayile]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - iifayile zilayishwe kwi Isikhongozelo seefayile"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files sync\niziphumo -> {}\nLayisha {} iifayile ukuya {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} ye {} iifayile : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files put\niziphumo -> {}\nNgenisa ifayile ukuya {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ifayile : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[layisha isikhombisi]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"Inethiwekhi Ekhuselekileyo: Iinkcukacha Zoluntu - layisha ulawulo kwi Isikhongozelo seefayile"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\niziphumo -> {}\n❰Upload directory❱ ukuya {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ulawulo : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("Khuphela kwi Inethiwekhi ekhuselekileyo") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// ifayile]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ikhuselekile I-url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/file", &timestamp); let result_location = format!("safe files sync\niziphumo -> {}\nfumana ifayile", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ifayile : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// ulawulo]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ikhuselekile I-url","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\niziphumo -> {}\nfumana ulawulo", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ulawulo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ifayile]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ikhuselekile xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/file", &timestamp); let result_location = format!("safe files sync\niziphumo -> {}\nfumana ifayile", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ifayile : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// ulawulo]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"ikhuselekile xor",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\niziphumo -> {}\nfumana ulawulo", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ulawulo : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "Ukuba Bucala\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("Idatha Yabucala") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "Jonga"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => khuphela]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/file", &timestamp); let result_location = format!("safe cat\niziphumo -> {}\nfumana ifayile", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 ye 1 ifayile : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => ulwazi]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/info_metadata", &timestamp); let result_location = format!("safe dog\niziphumo -> {}\nfumana ulwazi", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => uluhlu]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/info_ls", &timestamp); let result_location = format!("safe files ls\niziphumo -> {}\nfumana uluhlu", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => umthi]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/info_tree", &timestamp); let result_location = format!("safe files tree\niziphumo -> {}\nfumana umthi", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "Izixhobo"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[uhlaziyo lwesizinda]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\niziphumo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[amaqhosha amatsha]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./Ukhuphelo/{}/", &timestamp); let filename = format!("./Ukhuphelo/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\niziphumo -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[hlaziya]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[tshintsha]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"Shintsha inethiwekhi kwaye uqalise kwakhona ngesandla\ntshintshela kwi::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "Phuma"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("Nceda abanye bafumanise Inethiwekhi ekhuselekileyo") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("Sisonke siqhubela phambili\nUkuba Bucala - Ukhuseleko - Inkululeko") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# Yeka #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# Yeka #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_zh_traditional() { //! Safe GUI content - lang = zh_traditional
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "家\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] 未找到)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] 未找到)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] 未找到)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("版本: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(未連接)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(未連接)" { network_label = format!("測試網: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("測試網: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "安全\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("網絡") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("測試網") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("用戶安全") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[登錄]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"私鑰登錄 - 殘疾\n測試網默認已登錄！");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[登出]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"登出 - 測試網禁用");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("可信設備 = [是的]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("可信設備 = [不（但是是的！）]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("所有權") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[硬幣]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/info_balance", &timestamp); let result_location = format!("safe 平衡\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[鑰匙]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("域") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[得到你的]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"新域名 - safe nrs 創建","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("語境") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[文件容器]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("文件容器 = {}\n 改成:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./下載/"); let filename = format!("./下載/userinput_filescontainer"); let result_location = format!("文件容器 記在: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "自由\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("公共數據") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("上傳到 安全網絡") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("未認證") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[上傳一個文件]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全網絡: 公共數據 - 上傳文件"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\n上傳文件 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[上傳文件]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全網絡: 公共數據 - 文件上傳"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\n上傳 {} 檔案 =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\n上傳文件 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[上傳目錄]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全網絡: 公共數據 - 目錄上傳"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\n結果 -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目錄 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("上傳到自有位置") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[上傳一個文件]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全網絡: 公共數據 - 文件上傳到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n上傳文件 到 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[上傳文件]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全網絡: 公共數據 - 文件上傳到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n上傳 {} 檔案 到 {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} 的 {} 檔案 : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files put\n結果 -> {}\n上傳文件 到 {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[上傳目錄]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全網絡: 公共數據 - 目錄上傳到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n❰Upload directory❱ 到 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目錄 : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("下載自 安全網絡") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// 文件]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 網址","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/file", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// 目錄]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 網址","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n得到 目錄", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目錄 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 文件]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 異或",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/file", &timestamp); let result_location = format!("safe files sync\n結果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 目錄]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 異或",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n結果 -> {}\n得到 目錄", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目錄 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "隱私\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("私人數據") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "探索"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => 下載]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/file", &timestamp); let result_location = format!("safe cat\n結果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => 信息]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/info_metadata", &timestamp); let result_location = format!("safe dog\n結果 -> {}\n得到 信息", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => 列表]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/info_ls", &timestamp); let result_location = format!("safe files ls\n結果 -> {}\n得到 列表", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => 樹]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/info_tree", &timestamp); let result_location = format!("safe files tree\n結果 -> {}\n得到 樹", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "工具"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[更新域]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[新鑰匙]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下載/{}/", &timestamp); let filename = format!("./下載/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\n結果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[更新]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[轉變]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"切換網絡並手動重啟\n改成::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "出口"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("幫助他人發現 安全網絡") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("我們一起進步\n隱私 - 安全 - 自由") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# 退出 #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# 退出 #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 
pub fn draw_gallery_zh() { //! Safe GUI content - lang = zh
 let platform: &str = if format!("{}", whoami::platform()) == "Windows" { "Windows" } else { "default" }; let tab = Tabs::new(10, 10, 800 - 20, 600 - 20, ""); let mut grp1 = Group::new(10, 35, 800 - 20, 600 - 45, "家\t"); grp1.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(760, 560); let image = PngImage::from_data(&img_safe_logo()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut version; let output = if &platform == &"Windows" { Command::new("safe.exe").arg("-V").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("-V").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { version = String::from_utf8(ok.stdout).unwrap(); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("--help").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("--help").stdout(Stdio::piped()).output() }; match output { Ok(ok) => { let mut output = String::from_utf8(ok.stdout).unwrap(); let matcher = RegexMatcher::new(r"Safe Network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &output.as_bytes(), printer.sink(&matcher)).unwrap(); output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); let output_check = find_and_replace(&output, &[r"s/.*\n.*(?P<first>Safe Network).*\n.*/$first"]).unwrap().to_string(); if &output_check != "Safe Network\n" { version = "(404: [safe] 未找到)".to_string(); println!("\nError: safe is not obviously the Safe Network\n"); }; }, Err(error) => {version = "(404: [safe] 未找到)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; }, Err(error) => {version = "(404: [safe] 未找到)".to_string(); println!("\nError from safe -V: \n{}\n", error)}, }; let cli_version = format!("版本: {}", version); let mut version_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(330,400); version_text.set_label_size(16); version_text.set_label_font(enums::Font::Symbol); version_text.set_label_type(enums::LabelType::Engraved); let timestamp = iso8601(&SystemTime::now()); let mut date_text = Frame::default() .with_size(100, 40) .with_label(&timestamp) .with_pos(330,480); date_text.set_label_size(14); date_text.set_label_font(enums::Font::Symbol); date_text.set_label_type(enums::LabelType::Engraved); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("networks").arg("check").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("networks").arg("check").stdout(Stdio::piped()).output() }; let safe_networks_check; match output { Ok(ok) => safe_networks_check = String::from_utf8(ok.stdout).unwrap(), Err(error) => {safe_networks_check = "(未连接)".to_string(); println!("\nError from safe networks check: \n{}\n", error)}, }; let network; let network_label; if &safe_networks_check == "(未连接)" { network_label = format!("测试网: {}", safe_networks_check); } else { let matcher = RegexMatcher::new(r"'[^']*' network").unwrap(); let mut printer = Standard::new_no_color(vec![]); Searcher::new().search_slice(&matcher, &safe_networks_check.as_bytes(), printer.sink(&matcher)).unwrap(); let output = String::from_utf8(printer.into_inner().into_inner()).unwrap(); network = find_and_replace(&output, &[r"s/^3:'(?P<first>[^']*)'.*\n.*/$first"]).unwrap().to_string(); network_label = format!("测试网: {}", &network); } let mut network_text = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(330,440); network_text.set_label_size(16); network_text.set_label_font(enums::Font::Symbol); network_text.set_label_type(enums::LabelType::Engraved); grp1.end(); let mut grp2 = Group::new(10, 35, 800 - 40, 600 - 15, "安全\t"); grp2.set_label_type(enums::LabelType::Engraved); let mut network_header = Frame::default() .with_pos(300,80) .with_label("网络") .with_align(Align::Right); network_header.set_label_size(22); network_header.set_label_type(enums::LabelType::Engraved); let mut testnet_text = Frame::default() .with_pos(60,160) .with_label("测试网") .with_align(Align::Right); testnet_text.set_label_size(16); testnet_text.set_label_color(Color::DarkRed); testnet_text.set_label_type(enums::LabelType::Engraved); let mut title_user_security = Frame::default() .with_pos(60,220) .with_label("用户安全") .with_align(Align::Right); title_user_security.set_label_size(18); title_user_security.set_label_type(enums::LabelType::Engraved); title_user_security.hide(); let mut button_private_key_login = Button::default() .with_size(180, 40) .with_label("[登录]") .with_pos(60,250); button_private_key_login.set_label_size(16); button_private_key_login.set_label_font(enums::Font::Symbol); button_private_key_login.set_label_type(enums::LabelType::Engraved); button_private_key_login.hide(); button_private_key_login.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"私钥登录 - 残疾\n测试网默认已登录！");  true }, _ => false, } }); let mut button_private_key_logoff = Button::default() .with_size(180, 40) .with_label("[登出]") .with_pos(60,300); button_private_key_logoff.set_label_size(16); button_private_key_logoff.set_label_font(enums::Font::Symbol); button_private_key_logoff.set_label_type(enums::LabelType::Engraved); button_private_key_logoff.hide(); button_private_key_logoff.handle(move |_widget, ev: Event| { match ev { Event::Push => { dialog::message(400,200,"登出 - 测试网禁用");  true }, _ => false, } }); let mut label_trusted_device_yes = Frame::default() .with_pos(60,380) .with_label("可信设备 = [是的]") .with_align(Align::Right); label_trusted_device_yes.set_label_size(16); label_trusted_device_yes.set_label_color(Color::DarkRed); label_trusted_device_yes.set_label_type(enums::LabelType::Engraved); let mut label_trusted_device_no = Frame::default() .with_pos(60,380) .with_label("可信设备 = [不（但是是的！）]") .with_align(Align::Right); label_trusted_device_no.set_label_size(16); label_trusted_device_no.set_label_color(Color::DarkRed); label_trusted_device_no.set_label_type(enums::LabelType::Engraved); label_trusted_device_no.hide(); let mut button_trusted_device = CheckButton::new(30,370,20,20,"?"); button_trusted_device.set_checked(true); button_trusted_device.set_label_type(enums::LabelType::Engraved); button_trusted_device.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { println!("toggle trusted device = No"); label_trusted_device_no.hide(); label_trusted_device_yes.show(); } else { println!("toggle trusted device = Yes"); label_trusted_device_yes.hide(); label_trusted_device_no.show(); };  true }, _ => false, } }); let mut network_text_2 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(300,100); network_text_2.set_label_size(16); network_text_2.set_label_font(enums::Font::Symbol); network_text_2.set_label_type(enums::LabelType::Engraved); let mut title_ownership = Frame::default() .with_pos(430,180) .with_label("所有权") .with_align(Align::Right); title_ownership.set_label_size(18); title_ownership.set_label_type(enums::LabelType::Engraved); let mut button_coins = Button::default() .with_size(200, 40) .with_label("[硬币]") .with_pos(420,210); button_coins.set_label_size(16); button_coins.set_label_font(enums::Font::Symbol); button_coins.set_label_type(enums::LabelType::Engraved); button_coins.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/info_balance", &timestamp); let result_location = format!("safe 平衡\n结果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe balance > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); } else { Command::new("bash").arg("-c").arg(format!("safe balance > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe balance]"); };  true }, _ => false, } }); let mut button_keys = Button::default() .with_size(200, 40) .with_label("[钥匙]") .with_pos(420,250); button_keys.set_label_size(16); button_keys.set_label_font(enums::Font::Symbol); button_keys.set_label_type(enums::LabelType::Engraved); button_keys.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/info_keys_show", &timestamp); let result_location = format!("safe keys show\n结果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys show > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys show > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys show]"); };  true }, _ => false, } }); let mut title_new_domains = Frame::default() .with_pos(430,340) .with_label("域") .with_align(Align::Right); title_new_domains.set_label_size(18); title_new_domains.set_label_type(enums::LabelType::Engraved); let mut button_new_nrs = Button::default() .with_size(200, 40) .with_label("[得到你的]") .with_pos(420,370); button_new_nrs.set_label_size(16); button_new_nrs.set_label_font(enums::Font::Symbol); button_new_nrs.set_label_type(enums::LabelType::Engraved); button_new_nrs.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"新域名 - safe nrs 创建","safe://"); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_nrs_create", &timestamp); let result_location = format!("safe nrs create\n结果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs create {} > \"{}\" 2>> \"{}\"", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs create {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs create]"); }; }, None => {}, };  true }, _ => false, } }); let mut title_filescontainer = Frame::default() .with_pos(430,460) .with_label("语境") .with_align(Align::Right); title_filescontainer.set_label_size(18); title_filescontainer.set_label_type(enums::LabelType::Engraved); let mut button_set_filescontainer = Button::default() .with_size(200, 40) .with_label("[文件容器]") .with_pos(420,490); button_set_filescontainer.set_label_size(16); button_set_filescontainer.set_label_font(enums::Font::Symbol); button_set_filescontainer.set_label_type(enums::LabelType::Engraved); button_set_filescontainer.handle(move |_widget, ev: Event| { match ev { Event::Push => { let filescontainer = get_filescontainer(); let message_currentfilescontainer = format!("文件容器 = {}\n 改成:", filescontainer); let input = dialog::input(400,200,&message_currentfilescontainer,""); match input { Some(input) => { let filescontainer = clean_text(&input); let folder = format!("./下载/"); let filename = format!("./下载/userinput_filescontainer"); let result_location = format!("文件容器 记在: {}", &filename); println!("{}", &result_location); check_dir_exists(&folder); write(&filename, filescontainer).unwrap(); dialog::message(400,200,&result_location); }, None => {}, };  true }, _ => false, } }); let mut button_testnet_tmp = CheckButton::new(30,150,20,20,"#"); button_testnet_tmp.set_checked(true); button_testnet_tmp.set_label_type(enums::LabelType::Engraved); button_testnet_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { testnet_text.show(); title_user_security.hide(); button_private_key_login.hide(); button_private_key_logoff.hide(); } else { testnet_text.hide(); title_user_security.show(); button_private_key_login.show(); button_private_key_logoff.show(); };  true }, _ => false, } }); grp2.end(); let mut grp3 = Group::new(10, 35, 800 - 50, 600 - 5, "自由\t"); grp3.set_label_type(enums::LabelType::Engraved); let mut header_public_data = Frame::default() .with_pos(300,80) .with_label("公共数据") .with_align(Align::Right); header_public_data.set_label_size(22); header_public_data.set_label_type(enums::LabelType::Engraved); let mut header_upload = Frame::default() .with_pos(20,140) .with_label("上传到 安全网络") .with_align(Align::Right); header_upload.set_label_size(18); header_upload.set_label_type(enums::LabelType::Engraved); let mut auth_check_label = Frame::default() .with_pos(50,160) .with_label("未认证") .with_align(Align::Right); auth_check_label.set_label_size(16); auth_check_label.set_label_color(Color::DarkRed); auth_check_label.set_label_type(enums::LabelType::Engraved); auth_check_label.hide(); let mut button_upload_file = Button::default() .with_size(180, 40) .with_label("[上传一个文件]") .with_pos(60,180); button_upload_file.set_label_size(16); button_upload_file.set_label_font(enums::Font::Symbol); button_upload_file.set_label_type(enums::LabelType::Engraved); button_upload_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全网络: 公共数据 - 上传文件"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files put\n结果 -> {}\n上传文件 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_files = Button::default() .with_size(180, 40) .with_label("[上传文件]") .with_pos(60,230); button_upload_files.set_label_size(16); button_upload_files.set_label_font(enums::Font::Symbol); button_upload_files.set_label_type(enums::LabelType::Engraved); button_upload_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全网络: 公共数据 - 文件上传"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files put\n结果 -> {}\n上传 {} 档案 =>", filename, chooser.count()); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(1).unwrap().to_string(); println!("{} of {} files : \"{}\"", t, chooser.count(), choice); writeln!(&mut w, "{} of {} files : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files put\n结果 -> {}\n上传文件 =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 of 1 file : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[upload one of one file]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_upload_dir = Button::default() .with_size(180, 40) .with_label("[上传目录]") .with_pos(60,280); button_upload_dir.set_label_size(16); button_upload_dir.set_label_font(enums::Font::Symbol); button_upload_dir.set_label_type(enums::LabelType::Engraved); button_upload_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全网络: 公共数据 - 目录上传"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files put -r\n结果 -> {}\n❰Upload directory❱ =>", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目录 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put -r \"{}\" 2>> \"{}\"", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put -r \"{}\" 2>> \"{}\" &", choice, logname)).spawn().expect("failed to execute child for [safe files put].[dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut title_upload_to_container = Frame::default() .with_pos(20,370) .with_label("上传到自有位置") .with_align(Align::Right); title_upload_to_container.set_label_size(18); title_upload_to_container.set_label_type(enums::LabelType::Engraved); let mut button_sync_file = Button::default() .with_size(180, 40) .with_label("[上传一个文件]") .with_pos(60,410); button_sync_file.set_label_size(16); button_sync_file.set_label_font(enums::Font::Symbol); button_sync_file.set_label_type(enums::LabelType::Engraved); button_sync_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Single,"安全网络: 公共数据 - 文件上传到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let choice = chooser.value(1).unwrap().to_string(); let filescontainer = get_filescontainer(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n结果 -> {}\n上传文件 到 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload file]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_files = Button::default() .with_size(180, 40) .with_label("[上传文件]") .with_pos(60,460); button_sync_files.set_label_size(16); button_sync_files.set_label_font(enums::Font::Symbol); button_sync_files.set_label_type(enums::LabelType::Engraved); button_sync_files.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Multi,"安全网络: 公共数据 - 文件上传到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); if chooser.count() > 1 { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files sync\n结果 -> {}\n上传 {} 档案 到 {} =>", filename, chooser.count(), &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); for t in 1..=chooser.count() { let choice = chooser.value(t).unwrap().to_string(); println!("{} of {} files : \"{}\" \"{}\"", t, chooser.count(), choice, filescontainer); writeln!(&mut w, "{} 的 {} 档案 : \"{}\"", t, chooser.count(), choice).unwrap(); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of many files]"); }; }; } else { let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files put\n结果 -> {}\n上传文件 到 {} =>", filename, &filescontainer); check_dir_exists(&folder); println!("{}", &result_location); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files put \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); } else { Command::new("bash").arg("-c").arg(format!("safe files put \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload 1 of 1 files]"); }; }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_sync_dir = Button::default() .with_size(180, 40) .with_label("[上传目录]") .with_pos(60,510); button_sync_dir.set_label_size(16); button_sync_dir.set_label_font(enums::Font::Symbol); button_sync_dir.set_label_type(enums::LabelType::Engraved); button_sync_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let mut chooser = dialog::FileChooser::new(".","*",dialog::FileChooserType::Directory,"安全网络: 公共数据 - 目录上传到 文件容器"); chooser.show(); chooser.window().set_pos(400, 100); while chooser.shown() { app::wait(); } if chooser.value(1).is_none() == false { let filescontainer = get_filescontainer(); let choice = chooser.value(1).unwrap().to_string(); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_upload", &timestamp); let result_location = format!("safe files sync -r\n结果 -> {}\n❰Upload directory❱ 到 {} =>", filename, &filescontainer); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目录 : \"{}\"", &choice).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r \"{}\" \"{}\" 2>> \"{}\"", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r \"{}\" \"{}\" 2>> \"{}\" &", choice, filescontainer, logname)).spawn().expect("failed to execute child for [safe files sync].[upload dir]"); }; } else { println!("Upload cancelled"); };  true }, _ => false, } }); let mut button_autheticate_tmp = CheckButton::new(30,150,20,20,"?"); button_autheticate_tmp.set_checked(true); button_autheticate_tmp.set_label_type(enums::LabelType::Engraved); button_autheticate_tmp.handle(move |widget, ev: Event| { match ev { Event::Push => {  if widget.is_checked() == false { button_upload_file.show(); button_upload_files.show(); button_upload_dir.show(); title_upload_to_container.show(); button_sync_file.show(); button_sync_files.show(); button_sync_dir.show(); auth_check_label.hide(); } else { button_upload_file.hide(); button_upload_files.hide(); button_upload_dir.hide(); title_upload_to_container.hide(); button_sync_file.hide(); button_sync_files.hide(); button_sync_dir.hide(); auth_check_label.show(); };  true }, _ => false, } }); let mut download_title = Frame::default() .with_pos(420,230) .with_label("下载自 安全网络") .with_align(Align::Right); download_title.set_label_size(18); download_title.set_label_type(enums::LabelType::Engraved); let mut button_get_file = Button::default() .with_size(180, 40) .with_label("[safe:// 文件]") .with_pos(480,260); button_get_file.set_label_size(16); button_get_file.set_label_font(enums::Font::Symbol); button_get_file.set_label_type(enums::LabelType::Engraved); button_get_file.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 网址","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/file", &timestamp); let result_location = format!("safe files sync\n结果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir = Button::default() .with_size(180, 40) .with_label("[safe:// 目录]") .with_pos(480,310); button_get_dir.set_label_size(16); button_get_dir.set_label_font(enums::Font::Symbol); button_get_dir.set_label_type(enums::LabelType::Engraved); button_get_dir.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 网址","safe://"); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n结果 -> {}\n得到 目录", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目录 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_file_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 文件]") .with_pos(480,380); button_get_file_xor.set_label_size(16); button_get_file_xor.set_label_font(enums::Font::Symbol); button_get_file_xor.set_label_type(enums::LabelType::Engraved); button_get_file_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 异或",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/file", &timestamp); let result_location = format!("safe files sync\n结果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync {} > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync {} > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files sync].[get file from safexor]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_get_dir_xor = Button::default() .with_size(180, 40) .with_label("[xor:// 目录]") .with_pos(480,430); button_get_dir_xor.set_label_size(16); button_get_dir_xor.set_label_font(enums::Font::Symbol); button_get_dir_xor.set_label_type(enums::LabelType::Engraved); button_get_dir_xor.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"安全的 异或",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/dir/", &timestamp); let result_location = format!("safe files sync -r\n结果 -> {}\n得到 目录", folder); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 目录 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files sync -r {} > \"{}\" 2>> \"{}\"", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); } else { Command::new("bash").arg("-c").arg(format!("safe files sync -r {} > \"{}\" 2>> \"{}\" &", url, folder, logname)).spawn().expect("failed to execute child for [safe files sync].[get dir from safexor]"); }; }, None => {}, };  true }, _ => false, } }); grp3.end(); let mut grp4 = Group::new(10, 35, 800 - 30, 600 - 25, "隐私\t"); grp4.set_label_type(enums::LabelType::Engraved); grp4.set_label_type(enums::LabelType::Engraved); let mut header_private_data = Frame::default() .with_pos(300,80) .with_label("私人数据") .with_align(Align::Right); header_private_data.set_label_size(22); header_private_data.set_label_type(enums::LabelType::Engraved); let mut title_privacy = Frame::default() .with_pos(350,300) .with_label("...") .with_align(Align::Right); title_privacy.set_label_size(100); title_privacy.set_label_type(enums::LabelType::Engraved); grp4.end(); let mut grp5 = Group::new(10, 35, 800 - 50, 600 - 5, "探索"); grp5.set_label_type(enums::LabelType::Engraved); let mut frame = Frame::default() .with_size(400, 300) .with_pos(400,50); let image = PngImage::from_data(&img_dragon()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut button_cat = Button::default() .with_size(250, 40) .with_label("[safe cat => 下载]") .with_pos(150,180); button_cat.set_label_size(16); button_cat.set_label_font(enums::Font::Symbol); button_cat.set_label_type(enums::LabelType::Engraved); button_cat.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe cat",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/file", &timestamp); let result_location = format!("safe cat\n结果 -> {}\n得到 文件", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "1 的 1 文件 : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe cat \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); } else { Command::new("bash").arg("-c").arg(format!("safe cat \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe cat]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_dog = Button::default() .with_size(250, 40) .with_label("[safe dog => 信息]") .with_pos(150,240); button_dog.set_label_size(16); button_dog.set_label_font(enums::Font::Symbol); button_dog.set_label_type(enums::LabelType::Engraved); button_dog.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe dog",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/info_metadata", &timestamp); let result_location = format!("safe dog\n结果 -> {}\n得到 信息", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe dog \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); } else { Command::new("bash").arg("-c").arg(format!("safe dog \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe dog]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_ls = Button::default() .with_size(250, 40) .with_label("[safe files ls => 列表]") .with_pos(150,350); button_files_ls.set_label_size(16); button_files_ls.set_label_font(enums::Font::Symbol); button_files_ls.set_label_type(enums::LabelType::Engraved); button_files_ls.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files ls",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/info_ls", &timestamp); let result_location = format!("safe files ls\n结果 -> {}\n得到 列表", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files ls \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); } else { Command::new("bash").arg("-c").arg(format!("safe files ls \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files ls]"); }; }, None => {}, };  true }, _ => false, } }); let mut button_files_tree = Button::default() .with_size(250, 40) .with_label("[safe files tree => 树]") .with_pos(150,410); button_files_tree.set_label_size(16); button_files_tree.set_label_font(enums::Font::Symbol); button_files_tree.set_label_type(enums::LabelType::Engraved); button_files_tree.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe files tree",""); match input { Some(input) => { let url = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/info_tree", &timestamp); let result_location = format!("safe files tree\n结果 -> {}\n得到 树", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "url : \"{}\"", url).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe files tree \"{}\" > \"{}\" 2>> \"{}\"", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); } else { Command::new("bash").arg("-c").arg(format!("safe files tree \"{}\" > \"{}\" 2>> \"{}\" &", url, filename, logname)).spawn().expect("failed to execute child for [safe files tree]"); }; }, None => {}, };  true }, _ => false, } }); grp5.end(); let mut grp6 = Group::new(10, 35, 800 - 50, 600 - 5, "工具"); grp6.set_label_type(enums::LabelType::Engraved); let mut nrs_add_text = Frame::default() .with_size(100, 40) .with_label("safe nrs add") .with_pos(240,160); nrs_add_text.set_label_size(16); nrs_add_text.set_label_font(enums::Font::Symbol); nrs_add_text.set_label_type(enums::LabelType::Engraved); let mut nrs_add_create = Button::default() .with_size(160, 40) .with_label("[更新域]") .with_pos(430,160); nrs_add_create.set_label_size(16); nrs_add_create.set_label_font(enums::Font::Symbol); nrs_add_create.set_label_type(enums::LabelType::Engraved); nrs_add_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"safe nrs add",""); match input { Some(input) => { let nrs = clean_text(&input); let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_nrs_add", &timestamp); let result_location = format!("safe nrs add\n结果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); writeln!(&mut w, "nrs : \"{}\"", nrs).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe nrs add > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); } else { Command::new("bash").arg("-c").arg(format!("safe nrs add {} > \"{}\" 2>> \"{}\" &", nrs, filename, logname)).spawn().expect("failed to execute child for [safe nrs add]"); }; }, None => {}, };  true }, _ => false, } }); let mut keys_create_text = Frame::default() .with_size(100, 40) .with_label("safe keys create") .with_pos(240,230); keys_create_text.set_label_size(16); keys_create_text.set_label_font(enums::Font::Symbol); keys_create_text.set_label_type(enums::LabelType::Engraved); let mut button_keys_create = Button::default() .with_size(160, 40) .with_label("[新钥匙]") .with_pos(430,230); button_keys_create.set_label_size(16); button_keys_create.set_label_font(enums::Font::Symbol); button_keys_create.set_label_type(enums::LabelType::Engraved); button_keys_create.handle(move |_widget, ev: Event| { match ev { Event::Push => { let timestamp = iso8601(&SystemTime::now()); let folder = format!("./下载/{}/", &timestamp); let filename = format!("./下载/{}/result_keys_create", &timestamp); let result_location = format!("safe keys create\n结果 -> {}", filename); println!("{}", &result_location); check_dir_exists(&folder); let mut w = File::create(format!("{}/log.txt", &folder)).unwrap(); let logname = format!("{}/log.txt", &folder); writeln!(&mut w, "{} : {}\n", &timestamp, &result_location).unwrap(); dialog::message(400,200,&result_location); if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe keys create > \"{}\" 2>> \"{}\"", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); } else { Command::new("bash").arg("-c").arg(format!("safe keys create > \"{}\" 2>> \"{}\" &", filename, logname)).spawn().expect("failed to execute child for [safe keys create]"); };  true }, _ => false, } }); let mut safe_version_6_text = Frame::default() .with_size(100, 40) .with_label(&cli_version) .with_pos(240,300); safe_version_6_text.set_label_size(16); safe_version_6_text.set_label_font(enums::Font::Symbol); safe_version_6_text.set_label_type(enums::LabelType::Engraved); let mut safe_update = Button::default() .with_size(160, 40) .with_label("[更新]") .with_pos(430,300); safe_update.set_label_size(16); safe_update.set_label_font(enums::Font::Symbol); safe_update.set_label_type(enums::LabelType::Engraved); safe_update.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("safe update"); let output = if &platform == &"Windows" { Command::new("safe.exe").arg("update").arg("-y").stdout(Stdio::piped()).output() } else { Command::new("safe").arg("update").arg("-y").stdout(Stdio::piped()).output() }; match output { Ok(_ok) => { println!("\n# Safe updated to latest version - restart GUI #\n"); process::exit(1); }, Err(error) => { println!("\nError from safe update: \n{}\n", error)}, }; true }, _ => false, } }); let mut network_text_6 = Frame::default() .with_size(100, 40) .with_label(&network_label) .with_pos(240,370); network_text_6.set_label_size(16); network_text_6.set_label_font(enums::Font::Symbol); network_text_6.set_label_type(enums::LabelType::Engraved); let mut network_change = Button::default() .with_size(160, 40) .with_label("[转变]") .with_pos(430,370); network_change.set_label_size(16); network_change.set_label_font(enums::Font::Symbol); network_change.set_label_type(enums::LabelType::Engraved); network_change.handle(move |_widget, ev: Event| { match ev { Event::Push => { let input = dialog::input(400,200,"切换网络并手动重启\n改成::",""); match input { Some(input) => { let name = clean_text(&input); let output = if &platform == &"Windows" { Command::new("START").arg("/B").arg(format!("safe.exe networks switch \"{}\"", name)).stdout(Stdio::piped()).output() } else { Command::new("bash").arg("-c").arg(format!("safe networks switch \"{}\" &", name)).stdout(Stdio::piped()).output() }; match output { Ok(ok) => { println!("\n# Safe network switch in progress - restart GUI #\n\n{:#?}", ok); process::exit(1); }, Err(error) => { println!("\nError from safe networks switch: \n{}\n", error)}, }; }, None => {}, };  true }, _ => false, } }); grp6.end(); let mut grp7 = Group::new(10, 35, 800 - 50, 600 - 5, "退出"); grp7.set_label_type(enums::LabelType::Engraved); let mut social = Frame::default() .with_label("帮助他人发现 安全网络") .with_size(250, 50) .with_pos(100,80); social.set_label_size(16); social.set_label_font(enums::Font::Symbol); social.set_label_type(enums::LabelType::Engraved); let mut social_link1 = Frame::default() .with_label("twitter") .with_size(220, 40) .with_pos(100,140); social_link1.set_label_size(16); social_link1.set_label_font(enums::Font::Symbol); social_link1.set_label_type(enums::LabelType::Engraved); social_link1.set_tooltip("https://twitter.com/safenetworktech"); let mut social_link2 = Frame::default() .with_label("facebook") .with_size(220, 40) .with_pos(100,180); social_link2.set_label_size(16); social_link2.set_label_font(enums::Font::Symbol); social_link2.set_label_type(enums::LabelType::Engraved); social_link2.set_tooltip("https://www.facebook.com/safenetworktech/"); let mut social_link3 = Frame::default() .with_label("youtube") .with_size(220, 40) .with_pos(100,220); social_link3.set_label_size(16); social_link3.set_label_font(enums::Font::Symbol); social_link3.set_label_type(enums::LabelType::Engraved); social_link3.set_tooltip("https://www.youtube.com/channel/UChDck5R_C9i6XTrS66tbwOw"); let mut social_link4 = Frame::default() .with_label("reddit") .with_size(220, 40) .with_pos(100,260); social_link4.set_label_size(16); social_link4.set_label_font(enums::Font::Symbol); social_link4.set_label_type(enums::LabelType::Engraved); social_link4.set_tooltip("https://www.reddit.com/r/safenetwork/"); let mut social_link5 = Frame::default() .with_label("riot") .with_size(220, 40) .with_pos(100,300); social_link5.set_label_size(16); social_link5.set_label_font(enums::Font::Symbol); social_link5.set_label_type(enums::LabelType::Engraved); social_link5.set_tooltip("https://riot.im/app/#/room/#safenetwork:matrix.org"); let mut social_link6 = Frame::default() .with_label("telegram") .with_size(220, 40) .with_pos(100,340); social_link6.set_label_size(16); social_link6.set_label_font(enums::Font::Symbol); social_link6.set_label_type(enums::LabelType::Engraved); social_link6.set_tooltip("https://t.me/safenetwork"); let mut social_link7 = Frame::default() .with_label("discord") .with_size(220, 40) .with_pos(100,380); social_link7.set_label_size(16); social_link7.set_label_font(enums::Font::Symbol); social_link7.set_label_type(enums::LabelType::Engraved); social_link7.set_tooltip("https://discord.com/invite/0ak6ESm4oAR3oXik"); let mut social_link8 = Frame::default() .with_label("github") .with_size(220, 40) .with_pos(100,420); social_link8.set_label_size(16); social_link8.set_label_font(enums::Font::Symbol); social_link8.set_label_type(enums::LabelType::Engraved); social_link8.set_tooltip("https://github.com/maidsafe"); let mut social_link9 = Frame::default() .with_label("Safe Network forum") .with_size(220, 40) .with_pos(100,460); social_link9.set_label_size(16); social_link9.set_label_font(enums::Font::Symbol); social_link9.set_label_type(enums::LabelType::Engraved); social_link9.set_tooltip("https://safenetforum.org/"); let mut frame = Frame::default() .with_size(300, 300) .with_pos(400,150); let image = PngImage::from_data(&img_venn_psf()); match image { Ok(x) => { frame.set_image(Some(x)); }, Err(_error) => { }, }; let mut together_progress = Frame::default() .with_size(300, 200) .with_label("我们一起进步\n隐私 - 安全 - 自由") .with_pos(400,400); together_progress.set_label_size(16); together_progress.set_label_font(enums::Font::Symbol); together_progress.set_label_type(enums::LabelType::Engraved); let mut button_quit1 = Button::default() .with_size(150, 40) .with_label("# 退出 #") .with_pos(480,50); button_quit1.set_label_size(16); button_quit1.set_label_font(enums::Font::Symbol); button_quit1.set_label_type(enums::LabelType::Engraved); button_quit1.set_color(Color::Gray0); button_quit1.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); let mut button_quit2 = Button::default() .with_size(150, 40) .with_label("# 退出 #") .with_pos(50,530); button_quit2.set_label_size(16); button_quit2.set_label_font(enums::Font::Symbol); button_quit2.set_label_type(enums::LabelType::Engraved); button_quit2.set_color(Color::Gray0); button_quit2.handle(move |_widget, ev: Event| { match ev { Event::Push => {  println!("Quit"); process::exit(1) }, _ => false, } }); grp7.end(); tab.end(); } 

